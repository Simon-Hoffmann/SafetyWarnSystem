
sensor_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004818  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080049ac  080049ac  000149ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a98  08004a98  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004a98  08004a98  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a98  08004a98  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a98  08004a98  00014a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000010c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000011c  2000011c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d81c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001faa  00000000  00000000  0002d85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  0002f808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ba8  00000000  00000000  000304c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002077b  00000000  00000000  00031068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f79a  00000000  00000000  000517e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6e27  00000000  00000000  00060f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127da4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003438  00000000  00000000  00127df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004994 	.word	0x08004994

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08004994 	.word	0x08004994

080001d4 <RFM69_Config>:
**Function: Initialize RFM69 & set it entry to standby mode
**Input:    none
**Output:   none
**********************************************************/
void RFM69_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	uint8_t i;
  for(i=0;i<3;i++)                      
 80001da:	2300      	movs	r3, #0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	e010      	b.n	8000202 <RFM69_Config+0x2e>
    SPIWrite(RFM69FreqTbl[gb_FreqBuf_Addr][i]);             //setting frequency parameter
 80001e0:	4b23      	ldr	r3, [pc, #140]	; (8000270 <RFM69_Config+0x9c>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	4618      	mov	r0, r3
 80001e6:	79fa      	ldrb	r2, [r7, #7]
 80001e8:	4922      	ldr	r1, [pc, #136]	; (8000274 <RFM69_Config+0xa0>)
 80001ea:	4603      	mov	r3, r0
 80001ec:	005b      	lsls	r3, r3, #1
 80001ee:	4403      	add	r3, r0
 80001f0:	4413      	add	r3, r2
 80001f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 fb32 	bl	8000860 <SPIWrite>
  for(i=0;i<3;i++)                      
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	3301      	adds	r3, #1
 8000200:	71fb      	strb	r3, [r7, #7]
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	2b02      	cmp	r3, #2
 8000206:	d9eb      	bls.n	80001e0 <RFM69_Config+0xc>
  for(i=0;i<2;i++)
 8000208:	2300      	movs	r3, #0
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	e00e      	b.n	800022c <RFM69_Config+0x58>
    SPIWrite(RFM69RateTbl[gb_RateBuf_Addr][i]);             //setting rf rate parameter
 800020e:	4b1a      	ldr	r3, [pc, #104]	; (8000278 <RFM69_Config+0xa4>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	461a      	mov	r2, r3
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	4919      	ldr	r1, [pc, #100]	; (800027c <RFM69_Config+0xa8>)
 8000218:	0052      	lsls	r2, r2, #1
 800021a:	4413      	add	r3, r2
 800021c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fb1d 	bl	8000860 <SPIWrite>
  for(i=0;i<2;i++)
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	3301      	adds	r3, #1
 800022a:	71fb      	strb	r3, [r7, #7]
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	2b01      	cmp	r3, #1
 8000230:	d9ed      	bls.n	800020e <RFM69_Config+0x3a>
  SPIWrite(RFM69PowerTbl[gb_PowerBuf_Addr][0]);             //Setting output power parameter
 8000232:	4b13      	ldr	r3, [pc, #76]	; (8000280 <RFM69_Config+0xac>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	461a      	mov	r2, r3
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <RFM69_Config+0xb0>)
 800023a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fb0e 	bl	8000860 <SPIWrite>
  for(i=0;i<18;i++)
 8000244:	2300      	movs	r3, #0
 8000246:	71fb      	strb	r3, [r7, #7]
 8000248:	e009      	b.n	800025e <RFM69_Config+0x8a>
    SPIWrite(RFM69ConfigTbl[i]);                            //setting base parameter
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	4a0e      	ldr	r2, [pc, #56]	; (8000288 <RFM69_Config+0xb4>)
 800024e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fb04 	bl	8000860 <SPIWrite>
  for(i=0;i<18;i++)
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	3301      	adds	r3, #1
 800025c:	71fb      	strb	r3, [r7, #7]
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	2b11      	cmp	r3, #17
 8000262:	d9f2      	bls.n	800024a <RFM69_Config+0x76>
}
 8000264:	bf00      	nop
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000000 	.word	0x20000000
 8000274:	080049ac 	.word	0x080049ac
 8000278:	2000003d 	.word	0x2000003d
 800027c:	080049c4 	.word	0x080049c4
 8000280:	2000003e 	.word	0x2000003e
 8000284:	080049d4 	.word	0x080049d4
 8000288:	080049dc 	.word	0x080049dc

0800028c <RFM69_EntryRx>:
**Function: Set RFM69 entry Rx_mode
**Input:    None
**Output:   "0" for Error Status
**********************************************************/
void RFM69_EntryRx(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
	uint8_t i;
  RFM69_Config();                                          //Module parameter setting
 8000292:	f7ff ff9f 	bl	80001d4 <RFM69_Config>
  
  for(i=0;i<5;i++)                                         //Define to Rx mode  
 8000296:	2300      	movs	r3, #0
 8000298:	71fb      	strb	r3, [r7, #7]
 800029a:	e009      	b.n	80002b0 <RFM69_EntryRx+0x24>
    SPIWrite(RFM69RxTbl[i]);
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <RFM69_EntryRx+0x44>)
 80002a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fadb 	bl	8000860 <SPIWrite>
  for(i=0;i<5;i++)                                         //Define to Rx mode  
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	3301      	adds	r3, #1
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	2b04      	cmp	r3, #4
 80002b4:	d9f2      	bls.n	800029c <RFM69_EntryRx+0x10>
  
  gb_SysTimer_1S=3;                                        //System time = 3S
 80002b6:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <RFM69_EntryRx+0x48>)
 80002b8:	2203      	movs	r2, #3
 80002ba:	701a      	strb	r2, [r3, #0]
  gb_StatusTx=0;                                           //Clear Tx status flag 
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <RFM69_EntryRx+0x4c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
  gb_WaitStableFlag=0x0f;                                  //State stable flag initial
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <RFM69_EntryRx+0x50>)
 80002c4:	220f      	movs	r2, #15
 80002c6:	701a      	strb	r2, [r3, #0]
}
 80002c8:	bf00      	nop
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	08004a00 	.word	0x08004a00
 80002d4:	20000031 	.word	0x20000031
 80002d8:	2000002e 	.word	0x2000002e
 80002dc:	2000002c 	.word	0x2000002c

080002e0 <RFM69_EntryTx>:
**Function: Set RFM69 entry Tx_mode
**Input:    None
**Output:   "0" for Error Status
**********************************************************/
void RFM69_EntryTx(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
	uint8_t i;
  RFM69_Config();                                          //Module parameter setting
 80002e6:	f7ff ff75 	bl	80001d4 <RFM69_Config>
  
  for(i=0;i<5;i++)                                         //Define to Tx mode  
 80002ea:	2300      	movs	r3, #0
 80002ec:	71fb      	strb	r3, [r7, #7]
 80002ee:	e009      	b.n	8000304 <RFM69_EntryTx+0x24>
    SPIWrite(RFM69TxTbl[i]);
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	4a0c      	ldr	r2, [pc, #48]	; (8000324 <RFM69_EntryTx+0x44>)
 80002f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fab1 	bl	8000860 <SPIWrite>
  for(i=0;i<5;i++)                                         //Define to Tx mode  
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	3301      	adds	r3, #1
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	2b04      	cmp	r3, #4
 8000308:	d9f2      	bls.n	80002f0 <RFM69_EntryTx+0x10>
    
  gb_SysTimer_1S=3;                                        //System time = 3S
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <RFM69_EntryTx+0x48>)
 800030c:	2203      	movs	r2, #3
 800030e:	701a      	strb	r2, [r3, #0]
  gb_StatusRx=0;                                           //Clear Rx status flag 
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <RFM69_EntryTx+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]
  gb_WaitStableFlag=0x0f;                                  //State stable flag initial
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <RFM69_EntryTx+0x50>)
 8000318:	220f      	movs	r2, #15
 800031a:	701a      	strb	r2, [r3, #0]
}
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	08004a0c 	.word	0x08004a0c
 8000328:	20000031 	.word	0x20000031
 800032c:	2000002f 	.word	0x2000002f
 8000330:	2000002c 	.word	0x2000002c

08000334 <RFM69_TxWaitStable>:
**Function: Determine whether the state of stable Tx
**Input:    none
**Output:   none
**********************************************************/
void RFM69_TxWaitStable(void)
{ 
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
	uint8_t temp=0;
 800033a:	2300      	movs	r3, #0
 800033c:	71fb      	strb	r3, [r7, #7]
  if(gb_WaitStableFlag==0x0f) 
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <RFM69_TxWaitStable+0x50>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b0f      	cmp	r3, #15
 8000344:	d11a      	bne.n	800037c <RFM69_TxWaitStable+0x48>
  {
    if(gb_SysTimer_1S!=0)
 8000346:	4b10      	ldr	r3, [pc, #64]	; (8000388 <RFM69_TxWaitStable+0x54>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d010      	beq.n	8000370 <RFM69_TxWaitStable+0x3c>
    {
      temp=SPIRead(0x27);
 800034e:	2027      	movs	r0, #39	; 0x27
 8000350:	f000 fa72 	bl	8000838 <SPIRead>
 8000354:	4603      	mov	r3, r0
 8000356:	71fb      	strb	r3, [r7, #7]
      if((temp&0xA0)==0xA0 && temp!=0xff)
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800035e:	2ba0      	cmp	r3, #160	; 0xa0
 8000360:	d10c      	bne.n	800037c <RFM69_TxWaitStable+0x48>
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	2bff      	cmp	r3, #255	; 0xff
 8000366:	d009      	beq.n	800037c <RFM69_TxWaitStable+0x48>
      {
        gb_WaitStableFlag=1; 
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <RFM69_TxWaitStable+0x50>)
 800036a:	2201      	movs	r2, #1
 800036c:	701a      	strb	r2, [r3, #0]
    {
      gb_ErrorFlag=1;
      gb_WaitStableFlag=0;
    }
  }
}
 800036e:	e005      	b.n	800037c <RFM69_TxWaitStable+0x48>
      gb_ErrorFlag=1;
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <RFM69_TxWaitStable+0x58>)
 8000372:	2201      	movs	r2, #1
 8000374:	701a      	strb	r2, [r3, #0]
      gb_WaitStableFlag=0;
 8000376:	4b03      	ldr	r3, [pc, #12]	; (8000384 <RFM69_TxWaitStable+0x50>)
 8000378:	2200      	movs	r2, #0
 800037a:	701a      	strb	r2, [r3, #0]
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	2000002c 	.word	0x2000002c
 8000388:	20000031 	.word	0x20000031
 800038c:	20000030 	.word	0x20000030

08000390 <RFM69_RxWaitStable>:
**Function: Determine whether the state of stable Rx
**Input:    none
**Output:   none
**********************************************************/
void RFM69_RxWaitStable(void)
{ 
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	uint8_t temp=0;
 8000396:	2300      	movs	r3, #0
 8000398:	71fb      	strb	r3, [r7, #7]
  if(gb_WaitStableFlag==0x0f) 
 800039a:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <RFM69_RxWaitStable+0x50>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b0f      	cmp	r3, #15
 80003a0:	d11a      	bne.n	80003d8 <RFM69_RxWaitStable+0x48>
  {
    if(gb_SysTimer_1S!=0)
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <RFM69_RxWaitStable+0x54>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d010      	beq.n	80003cc <RFM69_RxWaitStable+0x3c>
    {
      temp=SPIRead(0x27);
 80003aa:	2027      	movs	r0, #39	; 0x27
 80003ac:	f000 fa44 	bl	8000838 <SPIRead>
 80003b0:	4603      	mov	r3, r0
 80003b2:	71fb      	strb	r3, [r7, #7]
      if((temp&0xC0)==0xC0 && temp!=0xff)
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80003ba:	2bc0      	cmp	r3, #192	; 0xc0
 80003bc:	d10c      	bne.n	80003d8 <RFM69_RxWaitStable+0x48>
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	2bff      	cmp	r3, #255	; 0xff
 80003c2:	d009      	beq.n	80003d8 <RFM69_RxWaitStable+0x48>
      {
        gb_WaitStableFlag=1;        
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <RFM69_RxWaitStable+0x50>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	701a      	strb	r2, [r3, #0]
    {
      gb_ErrorFlag=1;
      gb_WaitStableFlag=0;
    }
  }
}
 80003ca:	e005      	b.n	80003d8 <RFM69_RxWaitStable+0x48>
      gb_ErrorFlag=1;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <RFM69_RxWaitStable+0x58>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	701a      	strb	r2, [r3, #0]
      gb_WaitStableFlag=0;
 80003d2:	4b03      	ldr	r3, [pc, #12]	; (80003e0 <RFM69_RxWaitStable+0x50>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
}
 80003d8:	bf00      	nop
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	2000002c 	.word	0x2000002c
 80003e4:	20000031 	.word	0x20000031
 80003e8:	20000030 	.word	0x20000030

080003ec <RFM69_ClearFIFO>:
**Function: Change to RxMode from StandbyMode, can clear FIFO buffer
**Input:    None
**Output:   None
**********************************************************/
void RFM69_ClearFIFO(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  SPIWrite(0x0104);                                        //Standby
 80003f0:	f44f 7082 	mov.w	r0, #260	; 0x104
 80003f4:	f000 fa34 	bl	8000860 <SPIWrite>
  SPIWrite(0x0110);                                        //entry RxMode
 80003f8:	f44f 7088 	mov.w	r0, #272	; 0x110
 80003fc:	f000 fa30 	bl	8000860 <SPIWrite>
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}

08000404 <RFM69_Sleep>:
**Function: Set RFM69 to sleep mode 
**Input:    none
**Output:   none
**********************************************************/
void RFM69_Sleep(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  SPIWrite(0x0100);                                        //Sleep
 8000408:	f44f 7080 	mov.w	r0, #256	; 0x100
 800040c:	f000 fa28 	bl	8000860 <SPIWrite>
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}

08000414 <RFM69_Standby>:
**Function: Set RFM69 to Standby mode
**Input:    none
**Output:   none
**********************************************************/
void RFM69_Standby(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  SPIWrite(0x0104);                                        //Standby
 8000418:	f44f 7082 	mov.w	r0, #260	; 0x104
 800041c:	f000 fa20 	bl	8000860 <SPIWrite>
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}

08000424 <RFM69_ReadRSSI>:
**Function: Read the RSSI value
**Input:    none
**Output:   temp, RSSI value
**********************************************************/
uint8_t RFM69_ReadRSSI(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
	uint16_t temp=0xff;
 800042a:	23ff      	movs	r3, #255	; 0xff
 800042c:	80fb      	strh	r3, [r7, #6]
  if((SPIRead(0x24)&0x02)==0x02)
 800042e:	2024      	movs	r0, #36	; 0x24
 8000430:	f000 fa02 	bl	8000838 <SPIRead>
 8000434:	4603      	mov	r3, r0
 8000436:	f003 0302 	and.w	r3, r3, #2
 800043a:	2b02      	cmp	r3, #2
 800043c:	d10e      	bne.n	800045c <RFM69_ReadRSSI+0x38>
  {
    temp=SPIRead(0x24);
 800043e:	2024      	movs	r0, #36	; 0x24
 8000440:	f000 f9fa 	bl	8000838 <SPIRead>
 8000444:	4603      	mov	r3, r0
 8000446:	80fb      	strh	r3, [r7, #6]
    temp=0xff-temp;
 8000448:	88fb      	ldrh	r3, [r7, #6]
 800044a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800044e:	80fb      	strh	r3, [r7, #6]
    temp>>=1;
 8000450:	88fb      	ldrh	r3, [r7, #6]
 8000452:	085b      	lsrs	r3, r3, #1
 8000454:	80fb      	strh	r3, [r7, #6]
    temp&=0xff;
 8000456:	88fb      	ldrh	r3, [r7, #6]
 8000458:	b2db      	uxtb	r3, r3
 800045a:	80fb      	strh	r3, [r7, #6]
  }
  return (uint8_t)temp;
 800045c:	88fb      	ldrh	r3, [r7, #6]
 800045e:	b2db      	uxtb	r3, r3
}
 8000460:	4618      	mov	r0, r3
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <RFM69_RxPacket>:
**Input:    none
**Output:   "!0"-----Receive one packet
**          "0"------Nothing for receive
**********************************************************/
uint8_t RFM69_RxPacket(uint8_t* data, uint8_t length)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	460b      	mov	r3, r1
 8000472:	70fb      	strb	r3, [r7, #3]
 
  RFM69_RxWaitStable();
 8000474:	f7ff ff8c 	bl	8000390 <RFM69_RxWaitStable>
  if(gb_WaitStableFlag==1)
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <RFM69_RxPacket+0x48>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d105      	bne.n	800048c <RFM69_RxPacket+0x24>
  {
    gb_WaitStableFlag=2;
 8000480:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <RFM69_RxPacket+0x48>)
 8000482:	2202      	movs	r2, #2
 8000484:	701a      	strb	r2, [r3, #0]
    gb_StatusRx=1;                                         //Rx state stable
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <RFM69_RxPacket+0x4c>)
 8000488:	2201      	movs	r2, #1
 800048a:	701a      	strb	r2, [r3, #0]
  }       
 
  if(gb_StatusRx==1)
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <RFM69_RxPacket+0x4c>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d108      	bne.n	80004a6 <RFM69_RxPacket+0x3e>
  {
    SPIBurstRead(0x00, data, length);
 8000494:	78fb      	ldrb	r3, [r7, #3]
 8000496:	461a      	mov	r2, r3
 8000498:	6879      	ldr	r1, [r7, #4]
 800049a:	2000      	movs	r0, #0
 800049c:	f000 f9f2 	bl	8000884 <SPIBurstRead>
    RFM69_ClearFIFO();
 80004a0:	f7ff ffa4 	bl	80003ec <RFM69_ClearFIFO>
  }
  else
    return(0);
}
 80004a4:	e000      	b.n	80004a8 <RFM69_RxPacket+0x40>
    return(0);
 80004a6:	2300      	movs	r3, #0
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	2000002c 	.word	0x2000002c
 80004b4:	2000002f 	.word	0x2000002f

080004b8 <RFM69_TxPacket>:
**Function: Check RFM69 send over & send next packet
**Input:    none
**Output:   TxFlag=1, Send success
**********************************************************/
uint8_t RFM69_TxPacket(uint8_t* data, uint8_t length)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
	uint8_t TxFlag=0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	73fb      	strb	r3, [r7, #15]
  
  RFM69_TxWaitStable();
 80004c8:	f7ff ff34 	bl	8000334 <RFM69_TxWaitStable>
  if(gb_WaitStableFlag==1)
 80004cc:	4b27      	ldr	r3, [pc, #156]	; (800056c <RFM69_TxPacket+0xb4>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d118      	bne.n	8000506 <RFM69_TxPacket+0x4e>
  {
    gb_WaitStableFlag=2;
 80004d4:	4b25      	ldr	r3, [pc, #148]	; (800056c <RFM69_TxPacket+0xb4>)
 80004d6:	2202      	movs	r2, #2
 80004d8:	701a      	strb	r2, [r3, #0]
    if(gb_StatusTx==0)                                     //First entry Tx mode
 80004da:	4b25      	ldr	r3, [pc, #148]	; (8000570 <RFM69_TxPacket+0xb8>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d111      	bne.n	8000506 <RFM69_TxPacket+0x4e>
    {
      gb_StatusTx=1;                                       //Tx state stable                        
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <RFM69_TxPacket+0xb8>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	701a      	strb	r2, [r3, #0]
      gw_TxTimer=gw_RF_SentInterval;                       //Send time interval
 80004e8:	4b22      	ldr	r3, [pc, #136]	; (8000574 <RFM69_TxPacket+0xbc>)
 80004ea:	881a      	ldrh	r2, [r3, #0]
 80004ec:	4b22      	ldr	r3, [pc, #136]	; (8000578 <RFM69_TxPacket+0xc0>)
 80004ee:	801a      	strh	r2, [r3, #0]
      BurstWrite(0x00, data, length);               //Send one packet data
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	461a      	mov	r2, r3
 80004f4:	6879      	ldr	r1, [r7, #4]
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f9da 	bl	80008b0 <BurstWrite>
      TxFlag=1;
 80004fc:	2301      	movs	r3, #1
 80004fe:	73fb      	strb	r3, [r7, #15]
      gb_WaitStableFlag=3;
 8000500:	4b1a      	ldr	r3, [pc, #104]	; (800056c <RFM69_TxPacket+0xb4>)
 8000502:	2203      	movs	r2, #3
 8000504:	701a      	strb	r2, [r3, #0]
    }
  }
  if(gb_StatusTx==1)
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <RFM69_TxPacket+0xb8>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d129      	bne.n	8000562 <RFM69_TxPacket+0xaa>
  {
    if(gb_WaitStableFlag==3)                   //Packet send over
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <RFM69_TxPacket+0xb4>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b03      	cmp	r3, #3
 8000514:	d104      	bne.n	8000520 <RFM69_TxPacket+0x68>
    {
      gb_WaitStableFlag=0;
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <RFM69_TxPacket+0xb4>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
      RFM69_Standby();                                     //Entry Standby mode
 800051c:	f7ff ff7a 	bl	8000414 <RFM69_Standby>
    }   
    if(gw_TxTimer==0)                                      //It's time to Sending
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <RFM69_TxPacket+0xc0>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d10d      	bne.n	8000544 <RFM69_TxPacket+0x8c>
    {
      gw_TxTimer=gw_RF_SentInterval;                       //Send time interval
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <RFM69_TxPacket+0xbc>)
 800052a:	881a      	ldrh	r2, [r3, #0]
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <RFM69_TxPacket+0xc0>)
 800052e:	801a      	strh	r2, [r3, #0]
      gb_SysTimer_1S=3;
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <RFM69_TxPacket+0xc4>)
 8000532:	2203      	movs	r2, #3
 8000534:	701a      	strb	r2, [r3, #0]
      gb_WaitStableFlag=0x0f;                              //Promised to call mode stable decide
 8000536:	4b0d      	ldr	r3, [pc, #52]	; (800056c <RFM69_TxPacket+0xb4>)
 8000538:	220f      	movs	r2, #15
 800053a:	701a      	strb	r2, [r3, #0]
      SPIWrite(0x010C);                                    //Entry Tx mode
 800053c:	f44f 7086 	mov.w	r0, #268	; 0x10c
 8000540:	f000 f98e 	bl	8000860 <SPIWrite>
    }
    if(gb_WaitStableFlag==2)                               //Mode stable
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <RFM69_TxPacket+0xb4>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b02      	cmp	r3, #2
 800054a:	d10a      	bne.n	8000562 <RFM69_TxPacket+0xaa>
    {
      BurstWrite(0x00, data, length);               //Send data
 800054c:	78fb      	ldrb	r3, [r7, #3]
 800054e:	461a      	mov	r2, r3
 8000550:	6879      	ldr	r1, [r7, #4]
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f9ac 	bl	80008b0 <BurstWrite>
      TxFlag=1;
 8000558:	2301      	movs	r3, #1
 800055a:	73fb      	strb	r3, [r7, #15]
      gb_WaitStableFlag=3;
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <RFM69_TxPacket+0xb4>)
 800055e:	2203      	movs	r2, #3
 8000560:	701a      	strb	r2, [r3, #0]
    }
  }
  return TxFlag;
 8000562:	7bfb      	ldrb	r3, [r7, #15]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000002c 	.word	0x2000002c
 8000570:	2000002e 	.word	0x2000002e
 8000574:	20000034 	.word	0x20000034
 8000578:	20000036 	.word	0x20000036
 800057c:	20000031 	.word	0x20000031

08000580 <RFM69_TestConfig>:
**Function: Initialize RFM69 in test mode & set it entry to standby mode
**Input:    none
**Output:   none
**********************************************************/
void RFM69_TestConfig(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	uint8_t i;
  for(i=0;i<3;i++)                      
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
 800058a:	e010      	b.n	80005ae <RFM69_TestConfig+0x2e>
    SPIWrite(RFM69FreqTbl[gb_FreqBuf_Addr][i]);             //setting frequency parameter
 800058c:	4b23      	ldr	r3, [pc, #140]	; (800061c <RFM69_TestConfig+0x9c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	79fa      	ldrb	r2, [r7, #7]
 8000594:	4922      	ldr	r1, [pc, #136]	; (8000620 <RFM69_TestConfig+0xa0>)
 8000596:	4603      	mov	r3, r0
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	4403      	add	r3, r0
 800059c:	4413      	add	r3, r2
 800059e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f95c 	bl	8000860 <SPIWrite>
  for(i=0;i<3;i++)                      
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	3301      	adds	r3, #1
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	d9eb      	bls.n	800058c <RFM69_TestConfig+0xc>
  for(i=0;i<2;i++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	e00e      	b.n	80005d8 <RFM69_TestConfig+0x58>
    SPIWrite(RFM69RateTbl[gb_RateBuf_Addr][i]);             //setting rf rate parameter
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <RFM69_TestConfig+0xa4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	4919      	ldr	r1, [pc, #100]	; (8000628 <RFM69_TestConfig+0xa8>)
 80005c4:	0052      	lsls	r2, r2, #1
 80005c6:	4413      	add	r3, r2
 80005c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f947 	bl	8000860 <SPIWrite>
  for(i=0;i<2;i++)
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	3301      	adds	r3, #1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d9ed      	bls.n	80005ba <RFM69_TestConfig+0x3a>
  SPIWrite(RFM69PowerTbl[gb_PowerBuf_Addr][0]);             //Setting output power parameter
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <RFM69_TestConfig+0xac>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <RFM69_TestConfig+0xb0>)
 80005e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f938 	bl	8000860 <SPIWrite>
  
  for(i=0;i<13;i++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	e009      	b.n	800060a <RFM69_TestConfig+0x8a>
    SPIWrite(RFM69TestConfigTbl[i]);                        //setting base parameter
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <RFM69_TestConfig+0xb4>)
 80005fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f92e 	bl	8000860 <SPIWrite>
  for(i=0;i<13;i++)
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	3301      	adds	r3, #1
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b0c      	cmp	r3, #12
 800060e:	d9f2      	bls.n	80005f6 <RFM69_TestConfig+0x76>
}
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000000 	.word	0x20000000
 8000620:	080049ac 	.word	0x080049ac
 8000624:	2000003d 	.word	0x2000003d
 8000628:	080049c4 	.word	0x080049c4
 800062c:	2000003e 	.word	0x2000003e
 8000630:	080049d4 	.word	0x080049d4
 8000634:	08004a18 	.word	0x08004a18

08000638 <RFM69_EntryTestRx>:
**Function: Set RFM69 entry Rx test mode
**Input:    None
**Output:   None
**********************************************************/
void RFM69_EntryTestRx(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	uint8_t i;
  //Input_RFData();
  RFM69_Config();                                          //Module parameter setting
 800063e:	f7ff fdc9 	bl	80001d4 <RFM69_Config>
  for(i=0;i<5;i++)                                         //Define to Rx mode  
 8000642:	2300      	movs	r3, #0
 8000644:	71fb      	strb	r3, [r7, #7]
 8000646:	e009      	b.n	800065c <RFM69_EntryTestRx+0x24>
    SPIWrite(RFM69RxTbl[i]);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	4a0c      	ldr	r2, [pc, #48]	; (800067c <RFM69_EntryTestRx+0x44>)
 800064c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000650:	4618      	mov	r0, r3
 8000652:	f000 f905 	bl	8000860 <SPIWrite>
  for(i=0;i<5;i++)                                         //Define to Rx mode  
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	3301      	adds	r3, #1
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b04      	cmp	r3, #4
 8000660:	d9f2      	bls.n	8000648 <RFM69_EntryTestRx+0x10>
  
  gb_SysTimer_1S=3;                                        //System time = 3S
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <RFM69_EntryTestRx+0x48>)
 8000664:	2203      	movs	r2, #3
 8000666:	701a      	strb	r2, [r3, #0]
  gb_StatusTx=0;                                           //Clear Tx status flag 
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <RFM69_EntryTestRx+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
  gb_WaitStableFlag=0x0f;                                  //State stable flag initial
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <RFM69_EntryTestRx+0x50>)
 8000670:	220f      	movs	r2, #15
 8000672:	701a      	strb	r2, [r3, #0]
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	08004a00 	.word	0x08004a00
 8000680:	20000031 	.word	0x20000031
 8000684:	2000002e 	.word	0x2000002e
 8000688:	2000002c 	.word	0x2000002c

0800068c <RFM69_EntryTestTx>:
**Function: Set RFM69 entry Tx test mode
**Input:    None
**Output:   None
**********************************************************/
void RFM69_EntryTestTx(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
	uint8_t i;
  
 // Output_RFData();                                         //DIO2=0
  //RFData=0;
  RFM69_TestConfig();
 8000692:	f7ff ff75 	bl	8000580 <RFM69_TestConfig>
  for(i=0;i<5;i++)                                         //Define to Tx mode  
 8000696:	2300      	movs	r3, #0
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	e009      	b.n	80006b0 <RFM69_EntryTestTx+0x24>
    SPIWrite(RFM69TxTbl[i]);
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <RFM69_EntryTestTx+0x44>)
 80006a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f8db 	bl	8000860 <SPIWrite>
  for(i=0;i<5;i++)                                         //Define to Tx mode  
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	3301      	adds	r3, #1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	d9f2      	bls.n	800069c <RFM69_EntryTestTx+0x10>
    
  gb_SysTimer_1S=3;                                        //System time = 3S
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <RFM69_EntryTestTx+0x48>)
 80006b8:	2203      	movs	r2, #3
 80006ba:	701a      	strb	r2, [r3, #0]
  gb_StatusRx=0;                                           //Clear Rx status flag 
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <RFM69_EntryTestTx+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
  gb_WaitStableFlag=0x0f;                                  //State stable flag initial
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <RFM69_EntryTestTx+0x50>)
 80006c4:	220f      	movs	r2, #15
 80006c6:	701a      	strb	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	08004a0c 	.word	0x08004a0c
 80006d4:	20000031 	.word	0x20000031
 80006d8:	2000002f 	.word	0x2000002f
 80006dc:	2000002c 	.word	0x2000002c

080006e0 <RFM69_TestRx>:
**Function: RFM69 Rx test mode
**Input:    None
**Output:   "0" for Error Status
**********************************************************/
void RFM69_TestRx(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  RFM69_RxWaitStable();
 80006e4:	f7ff fe54 	bl	8000390 <RFM69_RxWaitStable>
  if(gb_WaitStableFlag==1)
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <RFM69_TestRx+0x20>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d105      	bne.n	80006fc <RFM69_TestRx+0x1c>
  {
    gb_WaitStableFlag=2;
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <RFM69_TestRx+0x20>)
 80006f2:	2202      	movs	r2, #2
 80006f4:	701a      	strb	r2, [r3, #0]
    gb_StatusRx=1;    
 80006f6:	4b03      	ldr	r3, [pc, #12]	; (8000704 <RFM69_TestRx+0x24>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
  }
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000002c 	.word	0x2000002c
 8000704:	2000002f 	.word	0x2000002f

08000708 <RFM69_TestTx>:
**Function: RFM69 Tx test mode
**Input:    None
**Output:   "0" for Error Status
**********************************************************/
void RFM69_TestTx(void)
{ 
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  RFM69_TxWaitStable();
 800070c:	f7ff fe12 	bl	8000334 <RFM69_TxWaitStable>
  if(gb_WaitStableFlag==1)
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <RFM69_TestTx+0x20>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d105      	bne.n	8000724 <RFM69_TestTx+0x1c>
  {
    gb_WaitStableFlag=2;
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <RFM69_TestTx+0x20>)
 800071a:	2202      	movs	r2, #2
 800071c:	701a      	strb	r2, [r3, #0]
    gb_StatusTx=1;  
 800071e:	4b03      	ldr	r3, [pc, #12]	; (800072c <RFM69_TestTx+0x24>)
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
                                        
    //RFData=1;                                              //DIO2=1
  }
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000002c 	.word	0x2000002c
 800072c:	2000002e 	.word	0x2000002e

08000730 <RFM69_Running>:
            *RxFlag, Rx success flag affect Rx count
            *RSSI, RSSI value
**Output:   none
**********************************************************/
void RFM69_Running(uint8_t mode,uint8_t WorkStatus,uint8_t ParaChangeFlag,uint8_t *TxFlag,uint8_t *RxFlag,uint8_t *RSSI, DataBuffer* data)
{ 
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	4603      	mov	r3, r0
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	460b      	mov	r3, r1
 800073e:	71bb      	strb	r3, [r7, #6]
 8000740:	4613      	mov	r3, r2
 8000742:	717b      	strb	r3, [r7, #5]
  uint8_t temp;
  if(WorkStatus==C_ModuleWorkMode_FSK)                  	 //Normal status
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d158      	bne.n	80007fc <RFM69_Running+0xcc>
  {
    switch(mode)
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	3b21      	subs	r3, #33	; 0x21
 800074e:	2b05      	cmp	r3, #5
 8000750:	d869      	bhi.n	8000826 <RFM69_Running+0xf6>
 8000752:	a201      	add	r2, pc, #4	; (adr r2, 8000758 <RFM69_Running+0x28>)
 8000754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000758:	080007d1 	.word	0x080007d1
 800075c:	080007e1 	.word	0x080007e1
 8000760:	08000827 	.word	0x08000827
 8000764:	08000827 	.word	0x08000827
 8000768:	08000771 	.word	0x08000771
 800076c:	0800079b 	.word	0x0800079b
    {
      case C_SysMode_FSKTx:                                //Normal send mode(Abbreviation:FS-T)
        if(ParaChangeFlag==1)                              //Parament changed
 8000770:	797b      	ldrb	r3, [r7, #5]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d101      	bne.n	800077a <RFM69_Running+0x4a>
        {                   
          RFM69_EntryTx();
 8000776:	f7ff fdb3 	bl	80002e0 <RFM69_EntryTx>
        }         
        temp= RFM69_TxPacket(data->data, data->size);
 800077a:	6a3a      	ldr	r2, [r7, #32]
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	7e5b      	ldrb	r3, [r3, #25]
 8000780:	4619      	mov	r1, r3
 8000782:	4610      	mov	r0, r2
 8000784:	f7ff fe98 	bl	80004b8 <RFM69_TxPacket>
 8000788:	4603      	mov	r3, r0
 800078a:	73fb      	strb	r3, [r7, #15]
        if(temp==1){*TxFlag=1;}
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d148      	bne.n	8000824 <RFM69_Running+0xf4>
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
        break;
 8000798:	e044      	b.n	8000824 <RFM69_Running+0xf4>
      case C_SysMode_FSKRx:                                //Normal receive mode(Abbreviation:FS-R)      
        if(ParaChangeFlag==1)
 800079a:	797b      	ldrb	r3, [r7, #5]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d101      	bne.n	80007a4 <RFM69_Running+0x74>
        {           
          RFM69_EntryRx();
 80007a0:	f7ff fd74 	bl	800028c <RFM69_EntryRx>
        }
        temp=RFM69_RxPacket(data->data, data->size);
 80007a4:	6a3a      	ldr	r2, [r7, #32]
 80007a6:	6a3b      	ldr	r3, [r7, #32]
 80007a8:	7e5b      	ldrb	r3, [r3, #25]
 80007aa:	4619      	mov	r1, r3
 80007ac:	4610      	mov	r0, r2
 80007ae:	f7ff fe5b 	bl	8000468 <RFM69_RxPacket>
 80007b2:	4603      	mov	r3, r0
 80007b4:	73fb      	strb	r3, [r7, #15]
        if(temp==1)
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d102      	bne.n	80007c2 <RFM69_Running+0x92>
        {
          *RxFlag=1;
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
               //Buzzer on When received data success
        }
        
        *RSSI=RFM69_ReadRSSI();                            //Read RSSI
 80007c2:	f7ff fe2f 	bl	8000424 <RFM69_ReadRSSI>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	701a      	strb	r2, [r3, #0]
        break;
 80007ce:	e02a      	b.n	8000826 <RFM69_Running+0xf6>
      case C_SysMode_TestTx:                               //Test send mode(Abbreviation:T-T)   
        if(ParaChangeFlag==1)
 80007d0:	797b      	ldrb	r3, [r7, #5]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d101      	bne.n	80007da <RFM69_Running+0xaa>
        {           
          RFM69_EntryTestTx();
 80007d6:	f7ff ff59 	bl	800068c <RFM69_EntryTestTx>
        }
        RFM69_TestTx();
 80007da:	f7ff ff95 	bl	8000708 <RFM69_TestTx>
        break;
 80007de:	e022      	b.n	8000826 <RFM69_Running+0xf6>
      case C_SysMode_TestRx:                               //Test receive mode(Abbreviation:T-R)  
        if(ParaChangeFlag==1)
 80007e0:	797b      	ldrb	r3, [r7, #5]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d101      	bne.n	80007ea <RFM69_Running+0xba>
        {       
          RFM69_EntryTestRx();
 80007e6:	f7ff ff27 	bl	8000638 <RFM69_EntryTestRx>
        }
        RFM69_TestRx();
 80007ea:	f7ff ff79 	bl	80006e0 <RFM69_TestRx>
        
        *RSSI=RFM69_ReadRSSI();                            //Read RSSI
 80007ee:	f7ff fe19 	bl	8000424 <RFM69_ReadRSSI>
 80007f2:	4603      	mov	r3, r0
 80007f4:	461a      	mov	r2, r3
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	701a      	strb	r2, [r3, #0]
        break;
 80007fa:	e014      	b.n	8000826 <RFM69_Running+0xf6>
    } 
  }
  else if(WorkStatus==C_ModuleWorkMode_Standby)            //Standby status
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	d106      	bne.n	8000810 <RFM69_Running+0xe0>
  {
    if(gb_WorkmodeBackup!=C_ModuleWorkMode_Standby)
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <RFM69_Running+0x104>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b03      	cmp	r3, #3
 8000808:	d00d      	beq.n	8000826 <RFM69_Running+0xf6>
    	RFM69_Standby();
 800080a:	f7ff fe03 	bl	8000414 <RFM69_Standby>
 800080e:	e00a      	b.n	8000826 <RFM69_Running+0xf6>
  }
  else if(WorkStatus==C_ModuleWorkMode_Sleep)              //Sleep status
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	2b04      	cmp	r3, #4
 8000814:	d107      	bne.n	8000826 <RFM69_Running+0xf6>
  {
    if(gb_WorkmodeBackup!=C_ModuleWorkMode_Sleep)
 8000816:	4b07      	ldr	r3, [pc, #28]	; (8000834 <RFM69_Running+0x104>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b04      	cmp	r3, #4
 800081c:	d003      	beq.n	8000826 <RFM69_Running+0xf6>
    	RFM69_Sleep();
 800081e:	f7ff fdf1 	bl	8000404 <RFM69_Sleep>
 8000822:	e000      	b.n	8000826 <RFM69_Running+0xf6>
        break;
 8000824:	bf00      	nop
  }
  gb_WorkmodeBackup=WorkStatus;
 8000826:	4a03      	ldr	r2, [pc, #12]	; (8000834 <RFM69_Running+0x104>)
 8000828:	79bb      	ldrb	r3, [r7, #6]
 800082a:	7013      	strb	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000002d 	.word	0x2000002d

08000838 <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;

	HAL_SPI_Receive(&hspi2, &tmp, 1, HAL_MAX_DELAY);
 8000842:	f107 010f 	add.w	r1, r7, #15
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	2201      	movs	r2, #1
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <SPIRead+0x24>)
 800084e:	f002 fea4 	bl	800359a <HAL_SPI_Receive>
  return(tmp);
 8000852:	7bfb      	ldrb	r3, [r7, #15]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000048 	.word	0x20000048

08000860 <SPIWrite>:
**Function: SPI Write CMD
**Input:    WrPara -> address & data
**Output:   None
**********************************************************/
void SPIWrite(unsigned int WrPara)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit(&hspi2, &WrPara, 4, HAL_MAX_DELAY);
 8000868:	1d39      	adds	r1, r7, #4
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	2204      	movs	r2, #4
 8000870:	4803      	ldr	r0, [pc, #12]	; (8000880 <SPIWrite+0x20>)
 8000872:	f002 fd24 	bl	80032be <HAL_SPI_Transmit>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000048 	.word	0x20000048

08000884 <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	71fb      	strb	r3, [r7, #7]
 8000890:	4613      	mov	r3, r2
 8000892:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Receive(&hspi2, ptr, length, 10);
 8000894:	79bb      	ldrb	r3, [r7, #6]
 8000896:	b29a      	uxth	r2, r3
 8000898:	230a      	movs	r3, #10
 800089a:	6839      	ldr	r1, [r7, #0]
 800089c:	4803      	ldr	r0, [pc, #12]	; (80008ac <SPIBurstRead+0x28>)
 800089e:	f002 fe7c 	bl	800359a <HAL_SPI_Receive>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000048 	.word	0x20000048

080008b0 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi2, ptr, length, HAL_MAX_DELAY);
 80008c0:	79bb      	ldrb	r3, [r7, #6]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f04f 33ff 	mov.w	r3, #4294967295
 80008c8:	6839      	ldr	r1, [r7, #0]
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <BurstWrite+0x28>)
 80008cc:	f002 fcf7 	bl	80032be <HAL_SPI_Transmit>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000048 	.word	0x20000048

080008dc <packet_serializeData>:

#include "packet.h"



void packet_serializeData(SWS_Packet* packet, DataBuffer* data){
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
	data->data[0] = packet->idSensor;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	701a      	strb	r2, [r3, #0]
	data->data[1] = packet->idBase;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	785a      	ldrb	r2, [r3, #1]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	705a      	strb	r2, [r3, #1]
	data->data[2] = packet->packetID;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	789a      	ldrb	r2, [r3, #2]
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	709a      	strb	r2, [r3, #2]
	data->data[3] = packet->packetType;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	78da      	ldrb	r2, [r3, #3]
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	70da      	strb	r2, [r3, #3]

	switch(packet->packetType){
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	78db      	ldrb	r3, [r3, #3]
 800090a:	2b02      	cmp	r3, #2
 800090c:	dc02      	bgt.n	8000914 <packet_serializeData+0x38>
 800090e:	2b00      	cmp	r3, #0
 8000910:	dc03      	bgt.n	800091a <packet_serializeData+0x3e>
 8000912:	e05a      	b.n	80009ca <packet_serializeData+0xee>
 8000914:	2b05      	cmp	r3, #5
 8000916:	d00b      	beq.n	8000930 <packet_serializeData+0x54>
 8000918:	e057      	b.n	80009ca <packet_serializeData+0xee>
	case CONNECT:
	case CONNACK:
		data->data[4] = packet->data[0];
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	791a      	ldrb	r2, [r3, #4]
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	711a      	strb	r2, [r3, #4]
		data->data[5] = '~';
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	227e      	movs	r2, #126	; 0x7e
 8000926:	715a      	strb	r2, [r3, #5]
		data->size = 6;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	2206      	movs	r2, #6
 800092c:	765a      	strb	r2, [r3, #25]
		break;
 800092e:	e053      	b.n	80009d8 <packet_serializeData+0xfc>
	case SEND:
		switch(*(packet->data)){
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	791b      	ldrb	r3, [r3, #4]
 8000934:	2b03      	cmp	r3, #3
 8000936:	d044      	beq.n	80009c2 <packet_serializeData+0xe6>
 8000938:	2b03      	cmp	r3, #3
 800093a:	dc44      	bgt.n	80009c6 <packet_serializeData+0xea>
 800093c:	2b01      	cmp	r3, #1
 800093e:	d002      	beq.n	8000946 <packet_serializeData+0x6a>
 8000940:	2b02      	cmp	r3, #2
 8000942:	d017      	beq.n	8000974 <packet_serializeData+0x98>
				data->size = 13;
				break;
			case DoorSensor:
				break;
			default:
				break;
 8000944:	e03f      	b.n	80009c6 <packet_serializeData+0xea>
				data->data[4] = packet->data[0];
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	791a      	ldrb	r2, [r3, #4]
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	711a      	strb	r2, [r3, #4]
				data->data[5] = packet->data[1];
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	795a      	ldrb	r2, [r3, #5]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	715a      	strb	r2, [r3, #5]
				data->data[6] = packet->data[2];
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	799a      	ldrb	r2, [r3, #6]
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	719a      	strb	r2, [r3, #6]
				data->data[7] = packet->data[3];
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	79da      	ldrb	r2, [r3, #7]
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	71da      	strb	r2, [r3, #7]
				data->data[8] = '~';
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	227e      	movs	r2, #126	; 0x7e
 800096a:	721a      	strb	r2, [r3, #8]
				data->size = 9;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	2209      	movs	r2, #9
 8000970:	765a      	strb	r2, [r3, #25]
				break;
 8000972:	e029      	b.n	80009c8 <packet_serializeData+0xec>
				data->data[4] = packet->data[0];
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	791a      	ldrb	r2, [r3, #4]
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	711a      	strb	r2, [r3, #4]
				data->data[5] = packet->data[1];
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	795a      	ldrb	r2, [r3, #5]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	715a      	strb	r2, [r3, #5]
				data->data[6] = packet->data[2];
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	799a      	ldrb	r2, [r3, #6]
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	719a      	strb	r2, [r3, #6]
				data->data[7] = packet->data[3];
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	79da      	ldrb	r2, [r3, #7]
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	71da      	strb	r2, [r3, #7]
				data->data[8] = packet->data[4];
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	7a1a      	ldrb	r2, [r3, #8]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	721a      	strb	r2, [r3, #8]
				data->data[9] = packet->data[5];
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7a5a      	ldrb	r2, [r3, #9]
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	725a      	strb	r2, [r3, #9]
				data->data[10] = packet->data[6];
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7a9a      	ldrb	r2, [r3, #10]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	729a      	strb	r2, [r3, #10]
				data->data[11] = packet->data[7];
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	7ada      	ldrb	r2, [r3, #11]
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	72da      	strb	r2, [r3, #11]
				data->data[12] = '~';
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	227e      	movs	r2, #126	; 0x7e
 80009b8:	731a      	strb	r2, [r3, #12]
				data->size = 13;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	220d      	movs	r2, #13
 80009be:	765a      	strb	r2, [r3, #25]
				break;
 80009c0:	e002      	b.n	80009c8 <packet_serializeData+0xec>
				break;
 80009c2:	bf00      	nop
 80009c4:	e008      	b.n	80009d8 <packet_serializeData+0xfc>
				break;
 80009c6:	bf00      	nop
		}

		break;
 80009c8:	e006      	b.n	80009d8 <packet_serializeData+0xfc>
	default:
		data->data[4] = '~';
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	227e      	movs	r2, #126	; 0x7e
 80009ce:	711a      	strb	r2, [r3, #4]
		data->size = 5;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	2205      	movs	r2, #5
 80009d4:	765a      	strb	r2, [r3, #25]
		break;
 80009d6:	bf00      	nop
	}
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <InitSystemParameter>:
**Function: Initial system parameter
**Input:    none
**Output:   none
**********************************************************/
void InitSystemParameter(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  gw_SendDataCount=0;                                      //Send data count
 80009e8:	4b44      	ldr	r3, [pc, #272]	; (8000afc <InitSystemParameter+0x118>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	801a      	strh	r2, [r3, #0]
  gw_ReceiveDataCount=0;                                   //Receive data count
 80009ee:	4b44      	ldr	r3, [pc, #272]	; (8000b00 <InitSystemParameter+0x11c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	801a      	strh	r2, [r3, #0]

  if(RF_ModemBuf[1]==0 && gb_SystemMode==C_SysMode_Modem){gb_SystemMode=C_SysMode_Set;}      //Direct entry set mode when the modem mode only one
 80009f4:	4b43      	ldr	r3, [pc, #268]	; (8000b04 <InitSystemParameter+0x120>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d106      	bne.n	8000a0e <InitSystemParameter+0x2a>
 8000a00:	4b41      	ldr	r3, [pc, #260]	; (8000b08 <InitSystemParameter+0x124>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d102      	bne.n	8000a0e <InitSystemParameter+0x2a>
 8000a08:	4b3f      	ldr	r3, [pc, #252]	; (8000b08 <InitSystemParameter+0x124>)
 8000a0a:	2224      	movs	r2, #36	; 0x24
 8000a0c:	701a      	strb	r2, [r3, #0]

  gw_RF_SentInterval=C_RF_SentInterval;                    //RF parameter Send interval time(ms)
 8000a0e:	4b3f      	ldr	r3, [pc, #252]	; (8000b0c <InitSystemParameter+0x128>)
 8000a10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a14:	801a      	strh	r2, [r3, #0]

  RF_ModemBuf=(uint8_t*)C_RFM69_ModemBuf;
 8000a16:	4b3b      	ldr	r3, [pc, #236]	; (8000b04 <InitSystemParameter+0x120>)
 8000a18:	4a3d      	ldr	r2, [pc, #244]	; (8000b10 <InitSystemParameter+0x12c>)
 8000a1a:	601a      	str	r2, [r3, #0]
  if(RF_ModemBuf[gb_Modem_Addr]==C_SysMode_FSK)
 8000a1c:	4b39      	ldr	r3, [pc, #228]	; (8000b04 <InitSystemParameter+0x120>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a3c      	ldr	r2, [pc, #240]	; (8000b14 <InitSystemParameter+0x130>)
 8000a22:	7812      	ldrb	r2, [r2, #0]
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b10      	cmp	r3, #16
 8000a2a:	d114      	bne.n	8000a56 <InitSystemParameter+0x72>
  {
    RF_ModuleName=(uint8_t*)C_RFM69_ModuleName;
 8000a2c:	4b3a      	ldr	r3, [pc, #232]	; (8000b18 <InitSystemParameter+0x134>)
 8000a2e:	4a3b      	ldr	r2, [pc, #236]	; (8000b1c <InitSystemParameter+0x138>)
 8000a30:	601a      	str	r2, [r3, #0]
    RF_FreqBuf=(uint16_t*)C_RFM69_FreqBuf;
 8000a32:	4b3b      	ldr	r3, [pc, #236]	; (8000b20 <InitSystemParameter+0x13c>)
 8000a34:	4a3b      	ldr	r2, [pc, #236]	; (8000b24 <InitSystemParameter+0x140>)
 8000a36:	601a      	str	r2, [r3, #0]
    RF_RateBuf=(uint8_t*)C_RFM69_RateBuf;
 8000a38:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <InitSystemParameter+0x144>)
 8000a3a:	4a3c      	ldr	r2, [pc, #240]	; (8000b2c <InitSystemParameter+0x148>)
 8000a3c:	601a      	str	r2, [r3, #0]
    RF_PowerBuf=(uint8_t*)C_RFM69_PowerBuf;
 8000a3e:	4b3c      	ldr	r3, [pc, #240]	; (8000b30 <InitSystemParameter+0x14c>)
 8000a40:	4a3c      	ldr	r2, [pc, #240]	; (8000b34 <InitSystemParameter+0x150>)
 8000a42:	601a      	str	r2, [r3, #0]
    RF_FdevBuf=(uint8_t*)C_RFM69_FdevBuf;
 8000a44:	4b3c      	ldr	r3, [pc, #240]	; (8000b38 <InitSystemParameter+0x154>)
 8000a46:	4a3d      	ldr	r2, [pc, #244]	; (8000b3c <InitSystemParameter+0x158>)
 8000a48:	601a      	str	r2, [r3, #0]
    RF_BandBuf=(uint8_t*)C_RFM69_BandBuf;
 8000a4a:	4b3d      	ldr	r3, [pc, #244]	; (8000b40 <InitSystemParameter+0x15c>)
 8000a4c:	4a3d      	ldr	r2, [pc, #244]	; (8000b44 <InitSystemParameter+0x160>)
 8000a4e:	601a      	str	r2, [r3, #0]
    RF_RSSIBuf=(uint8_t*)C_RFM69_RSSIBuf;
 8000a50:	4b3d      	ldr	r3, [pc, #244]	; (8000b48 <InitSystemParameter+0x164>)
 8000a52:	4a3e      	ldr	r2, [pc, #248]	; (8000b4c <InitSystemParameter+0x168>)
 8000a54:	601a      	str	r2, [r3, #0]
  }

  if(gb_FirstPowerUpFlag==1)                               //FirstPowerUp
 8000a56:	4b3e      	ldr	r3, [pc, #248]	; (8000b50 <InitSystemParameter+0x16c>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d148      	bne.n	8000af0 <InitSystemParameter+0x10c>
  {
    if((gb_SystemMode>=C_SysMode_FSKTx && gb_SystemMode<=C_SysMode_LoRaTRx) || (gb_SystemMode>=C_SysMode_TestTx && gb_SystemMode<=C_SysMode_Sleep))
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <InitSystemParameter+0x124>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b24      	cmp	r3, #36	; 0x24
 8000a64:	d903      	bls.n	8000a6e <InitSystemParameter+0x8a>
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <InitSystemParameter+0x124>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b2d      	cmp	r3, #45	; 0x2d
 8000a6c:	d907      	bls.n	8000a7e <InitSystemParameter+0x9a>
 8000a6e:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <InitSystemParameter+0x124>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b20      	cmp	r3, #32
 8000a74:	d92c      	bls.n	8000ad0 <InitSystemParameter+0xec>
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <InitSystemParameter+0x124>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b23      	cmp	r3, #35	; 0x23
 8000a7c:	d828      	bhi.n	8000ad0 <InitSystemParameter+0xec>
    {
      switch(RF_ModemBuf[gb_Modem_Addr])
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <InitSystemParameter+0x120>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a24      	ldr	r2, [pc, #144]	; (8000b14 <InitSystemParameter+0x130>)
 8000a84:	7812      	ldrb	r2, [r2, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b12      	cmp	r3, #18
 8000a8c:	d00e      	beq.n	8000aac <InitSystemParameter+0xc8>
 8000a8e:	2b12      	cmp	r3, #18
 8000a90:	dc10      	bgt.n	8000ab4 <InitSystemParameter+0xd0>
 8000a92:	2b10      	cmp	r3, #16
 8000a94:	d002      	beq.n	8000a9c <InitSystemParameter+0xb8>
 8000a96:	2b11      	cmp	r3, #17
 8000a98:	d004      	beq.n	8000aa4 <InitSystemParameter+0xc0>
 8000a9a:	e00b      	b.n	8000ab4 <InitSystemParameter+0xd0>
      {
        case C_SysMode_FSK:
          gb_ModuleWorkMode=C_ModuleWorkMode_FSK;          //Module entry FSK mode
 8000a9c:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <InitSystemParameter+0x170>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
          break;
 8000aa2:	e007      	b.n	8000ab4 <InitSystemParameter+0xd0>
        case C_SysMode_OOK:
          gb_ModuleWorkMode=C_ModuleWorkMode_OOK;          //Module entry OOK mode
 8000aa4:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <InitSystemParameter+0x170>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
          break;
 8000aaa:	e003      	b.n	8000ab4 <InitSystemParameter+0xd0>
        case C_SysMode_LoRa:
          gb_ModuleWorkMode=C_ModuleWorkMode_LoRa;         //Module entry LoRa mode
 8000aac:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <InitSystemParameter+0x170>)
 8000aae:	2202      	movs	r2, #2
 8000ab0:	701a      	strb	r2, [r3, #0]
          break;
 8000ab2:	bf00      	nop
      }
      //if(gb_SystemMode==C_SysMode_Standby){gb_ModuleWorkMode=C_ModuleWorkMode_Standby;}   //Module entry standby mode
      if(gb_SystemMode==C_SysMode_Sleep){gb_ModuleWorkMode=C_ModuleWorkMode_Sleep;}       //Module entry sleep mode
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <InitSystemParameter+0x124>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b23      	cmp	r3, #35	; 0x23
 8000aba:	d102      	bne.n	8000ac2 <InitSystemParameter+0xde>
 8000abc:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <InitSystemParameter+0x170>)
 8000abe:	2204      	movs	r2, #4
 8000ac0:	701a      	strb	r2, [r3, #0]

      gb_ModuleWorkEnableFlag=1;                           //Enable module work in Tx/Rx mode
 8000ac2:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <InitSystemParameter+0x174>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
      gb_ParameterChangeFlag=1;                            //Enalbe entry normal mode
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <InitSystemParameter+0x178>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]
      gb_ModuleWorkEnableFlag=0;                           //Disable module work in Tx/Rx mode
      gb_ModuleWorkMode=C_ModuleWorkMode_Standby;          //Module entry stanby mode
      gb_ParameterChangeFlag=2;
    }
  }
}
 8000ace:	e00f      	b.n	8000af0 <InitSystemParameter+0x10c>
      if(gb_SystemMode==C_SysMode_EntrySet)
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <InitSystemParameter+0x124>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d102      	bne.n	8000ade <InitSystemParameter+0xfa>
        gb_SysMode_Set=C_SysMode_Set_Freq;                 //Modify SysMode set
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <InitSystemParameter+0x17c>)
 8000ada:	2251      	movs	r2, #81	; 0x51
 8000adc:	701a      	strb	r2, [r3, #0]
      gb_ModuleWorkEnableFlag=0;                           //Disable module work in Tx/Rx mode
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <InitSystemParameter+0x174>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
      gb_ModuleWorkMode=C_ModuleWorkMode_Standby;          //Module entry stanby mode
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <InitSystemParameter+0x170>)
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	701a      	strb	r2, [r3, #0]
      gb_ParameterChangeFlag=2;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <InitSystemParameter+0x178>)
 8000aec:	2202      	movs	r2, #2
 8000aee:	701a      	strb	r2, [r3, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000044 	.word	0x20000044
 8000b00:	20000046 	.word	0x20000046
 8000b04:	20000114 	.word	0x20000114
 8000b08:	20000032 	.word	0x20000032
 8000b0c:	20000034 	.word	0x20000034
 8000b10:	08004a64 	.word	0x08004a64
 8000b14:	20000041 	.word	0x20000041
 8000b18:	200000f8 	.word	0x200000f8
 8000b1c:	08004a34 	.word	0x08004a34
 8000b20:	200000fc 	.word	0x200000fc
 8000b24:	08004a38 	.word	0x08004a38
 8000b28:	20000100 	.word	0x20000100
 8000b2c:	08004a44 	.word	0x08004a44
 8000b30:	20000104 	.word	0x20000104
 8000b34:	08004a4c 	.word	0x08004a4c
 8000b38:	20000108 	.word	0x20000108
 8000b3c:	08004a54 	.word	0x08004a54
 8000b40:	2000010c 	.word	0x2000010c
 8000b44:	08004a58 	.word	0x08004a58
 8000b48:	20000110 	.word	0x20000110
 8000b4c:	08004a5c 	.word	0x08004a5c
 8000b50:	2000003b 	.word	0x2000003b
 8000b54:	20000039 	.word	0x20000039
 8000b58:	20000038 	.word	0x20000038
 8000b5c:	2000003c 	.word	0x2000003c
 8000b60:	20000033 	.word	0x20000033

08000b64 <ModuleSelectModeEntryCheck>:
**Function: Confirm whether you can enter module select mode
**Input:    none
**Output:   none
**********************************************************/
void ModuleSelectModeEntryCheck(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  gb_FirstPowerUpFlag=1;                                   //FirstPowerUp
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <ModuleSelectModeEntryCheck+0x44>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]

    gb_FreqBuf_Addr=0;
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <ModuleSelectModeEntryCheck+0x48>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
    gb_RateBuf_Addr=1;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <ModuleSelectModeEntryCheck+0x4c>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
    gb_PowerBuf_Addr=0;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <ModuleSelectModeEntryCheck+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
    gb_FdevBuf_Addr=0;
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <ModuleSelectModeEntryCheck+0x54>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
    gb_BandBuf_Addr=0;
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <ModuleSelectModeEntryCheck+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
    gb_Modem_Addr_Backup=gb_Modem_Addr=0;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <ModuleSelectModeEntryCheck+0x5c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <ModuleSelectModeEntryCheck+0x5c>)
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <ModuleSelectModeEntryCheck+0x60>)
 8000b98:	701a      	strb	r2, [r3, #0]

    gb_SystemMode=C_SysMode_Modem;                       //RF select modem mode
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <ModuleSelectModeEntryCheck+0x64>)
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	701a      	strb	r2, [r3, #0]

  InitSystemParameter();
 8000ba0:	f7ff ff20 	bl	80009e4 <InitSystemParameter>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000003b 	.word	0x2000003b
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	2000003d 	.word	0x2000003d
 8000bb4:	2000003e 	.word	0x2000003e
 8000bb8:	2000003f 	.word	0x2000003f
 8000bbc:	20000040 	.word	0x20000040
 8000bc0:	20000041 	.word	0x20000041
 8000bc4:	20000042 	.word	0x20000042
 8000bc8:	20000032 	.word	0x20000032

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b095      	sub	sp, #84	; 0x54
 8000bd0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd2:	f000 fb57 	bl	8001284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd6:	f000 f8bf 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bda:	f000 f9af 	bl	8000f3c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000bde:	f000 f91b 	bl	8000e18 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000be2:	f000 f957 	bl	8000e94 <MX_TIM1_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8000be6:	4852      	ldr	r0, [pc, #328]	; (8000d30 <main+0x164>)
 8000be8:	f003 fa2e 	bl	8004048 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */

  uint8_t TxFlag=0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint8_t RxFlag=0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

   //timer1_init();
   //timer2_init();
   ModuleSelectModeEntryCheck();                            //Confirm whether you can enter module select mode
 8000bf8:	f7ff ffb4 	bl	8000b64 <ModuleSelectModeEntryCheck>
   SWS_Packet packet;
   DataBuffer buffer;
   SmokeSensorData smokeData;
   packet.packetID = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

   gb_SystemMode=C_SysMode_FSKTx;
 8000c02:	4b4c      	ldr	r3, [pc, #304]	; (8000d34 <main+0x168>)
 8000c04:	2225      	movs	r2, #37	; 0x25
 8000c06:	701a      	strb	r2, [r3, #0]
   packet.idBase = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   packet.idSensor = 2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   packet.packetID = packet.packetID++;
 8000c14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8000c20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   packet.packetType = SEND;
 8000c24:	2305      	movs	r3, #5
 8000c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   smokeData.GasDetectionTimeout_Minutes = 10;
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	707b      	strb	r3, [r7, #1]
   smokeData.GasSensor = 500;
 8000c2e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c32:	80bb      	strh	r3, [r7, #4]
   smokeData.SmokeSensor = 1000;
 8000c34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c38:	807b      	strh	r3, [r7, #2]
   smokeData.SensorType = 2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	703b      	strb	r3, [r7, #0]
   smokeData.Temperature = 52;
 8000c3e:	2334      	movs	r3, #52	; 0x34
 8000c40:	80fb      	strh	r3, [r7, #6]
   memcpy(packet.data, &smokeData, 8);
 8000c42:	4639      	mov	r1, r7
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 fe8b 	bl	8004968 <memcpy>

   packet_serializeData(&packet, &buffer);
 8000c52:	f107 0208 	add.w	r2, r7, #8
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fe3d 	bl	80008dc <packet_serializeData>

   while(1)
   {


	 if(gb_ModuleWorkEnableFlag)
 8000c62:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <main+0x16c>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d05b      	beq.n	8000d22 <main+0x156>
	 {
		//gb_SystemMode=C_SysMode_FSKTx;	//Send

		RFM69_Running(gb_SystemMode,gb_ModuleWorkMode,gb_ParameterChangeFlag,&TxFlag,&RxFlag,&gb_RF_RSSI, &buffer);
 8000c6a:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <main+0x168>)
 8000c6c:	7818      	ldrb	r0, [r3, #0]
 8000c6e:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <main+0x170>)
 8000c70:	7819      	ldrb	r1, [r3, #0]
 8000c72:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <main+0x174>)
 8000c74:	781a      	ldrb	r2, [r3, #0]
 8000c76:	f107 043f 	add.w	r4, r7, #63	; 0x3f
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	9302      	str	r3, [sp, #8]
 8000c80:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <main+0x178>)
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	f7ff fd50 	bl	8000730 <RFM69_Running>

		gb_SystemMode = C_ModuleWorkMode_Standby;
 8000c90:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <main+0x168>)
 8000c92:	2203      	movs	r2, #3
 8000c94:	701a      	strb	r2, [r3, #0]
		//gb_SystemMode=C_SysMode_FSKTx;	//Receive (only if ACK needed)

		//RFM69_Running(gb_SystemMode,gb_ModuleWorkMode,gb_ParameterChangeFlag,&TxFlag,&RxFlag,&gb_RF_RSSI);

		if(TxFlag==1)                                        //Sent successfully
 8000c96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d111      	bne.n	8000cc2 <main+0xf6>
		{
		 TxFlag=0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		 gw_SendDataCount++;
 8000ca4:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <main+0x17c>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <main+0x17c>)
 8000cae:	801a      	strh	r2, [r3, #0]
		 if(gw_SendDataCount>9999){gw_SendDataCount=0;}
 8000cb0:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <main+0x17c>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d902      	bls.n	8000cc2 <main+0xf6>
 8000cbc:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <main+0x17c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	801a      	strh	r2, [r3, #0]
		}
		if(RxFlag==1)                                        //Successfully received
 8000cc2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d111      	bne.n	8000cee <main+0x122>
		{
		 RxFlag=0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		 gw_ReceiveDataCount++;
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <main+0x180>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <main+0x180>)
 8000cda:	801a      	strh	r2, [r3, #0]
		 if(gw_ReceiveDataCount>9999){gw_ReceiveDataCount=0;}
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <main+0x180>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d902      	bls.n	8000cee <main+0x122>
 8000ce8:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <main+0x180>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	801a      	strh	r2, [r3, #0]
		}

		if(gb_ParameterChangeFlag==1){gb_ParameterChangeFlag=0;}    //clear parameter flag
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <main+0x174>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d102      	bne.n	8000cfc <main+0x130>
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <main+0x174>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
		if(gb_ModuleWorkMode!=C_ModuleWorkMode_FSK && gb_ModuleWorkMode!=C_ModuleWorkMode_OOK && gb_ModuleWorkMode!=C_ModuleWorkMode_LoRa)
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <main+0x170>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0ae      	beq.n	8000c62 <main+0x96>
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <main+0x170>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d0aa      	beq.n	8000c62 <main+0x96>
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <main+0x170>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d0a6      	beq.n	8000c62 <main+0x96>
		{
		 gb_StatusTx=0;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <main+0x184>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
		 gb_StatusRx=0;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <main+0x188>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	e79f      	b.n	8000c62 <main+0x96>
		}
		}
		else
		{
		gb_StatusTx=0;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <main+0x184>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
		gb_StatusRx=0;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <main+0x188>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
	 if(gb_ModuleWorkEnableFlag)
 8000d2e:	e798      	b.n	8000c62 <main+0x96>
 8000d30:	200000ac 	.word	0x200000ac
 8000d34:	20000032 	.word	0x20000032
 8000d38:	20000038 	.word	0x20000038
 8000d3c:	20000039 	.word	0x20000039
 8000d40:	2000003c 	.word	0x2000003c
 8000d44:	2000003a 	.word	0x2000003a
 8000d48:	20000044 	.word	0x20000044
 8000d4c:	20000046 	.word	0x20000046
 8000d50:	2000002e 	.word	0x2000002e
 8000d54:	2000002f 	.word	0x2000002f

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0a6      	sub	sp, #152	; 0x98
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d62:	2228      	movs	r2, #40	; 0x28
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f003 fe0c 	bl	8004984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2258      	movs	r2, #88	; 0x58
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 fdfe 	bl	8004984 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d90:	2310      	movs	r3, #16
 8000d92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000da0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000da4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000da8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 fd7e 	bl	80018b8 <HAL_RCC_OscConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dc2:	f000 f95b 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc6:	230f      	movs	r3, #15
 8000dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ddc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000de0:	2102      	movs	r1, #2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 fdbc 	bl	8002960 <HAL_RCC_ClockConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dee:	f000 f945 	bl	800107c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 ff94 	bl	8002d2c <HAL_RCCEx_PeriphCLKConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000e0a:	f000 f937 	bl	800107c <Error_Handler>
  }
}
 8000e0e:	bf00      	nop
 8000e10:	3798      	adds	r7, #152	; 0x98
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_SPI2_Init+0x74>)
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <MX_SPI2_Init+0x78>)
 8000e20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <MX_SPI2_Init+0x74>)
 8000e24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_SPI2_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_SPI2_Init+0x74>)
 8000e32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e36:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_SPI2_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_SPI2_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_SPI2_Init+0x74>)
 8000e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_SPI2_Init+0x74>)
 8000e4e:	2208      	movs	r2, #8
 8000e50:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_SPI2_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_SPI2_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_SPI2_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_SPI2_Init+0x74>)
 8000e66:	2207      	movs	r2, #7
 8000e68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_SPI2_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_SPI2_Init+0x74>)
 8000e72:	2208      	movs	r2, #8
 8000e74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_SPI2_Init+0x74>)
 8000e78:	f002 f976 	bl	8003168 <HAL_SPI_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e82:	f000 f8fb 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000048 	.word	0x20000048
 8000e90:	40003800 	.word	0x40003800

08000e94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <MX_TIM1_Init+0xa0>)
 8000eb4:	4a20      	ldr	r2, [pc, #128]	; (8000f38 <MX_TIM1_Init+0xa4>)
 8000eb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_TIM1_Init+0xa0>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <MX_TIM1_Init+0xa0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 36000;
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <MX_TIM1_Init+0xa0>)
 8000ec6:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8000eca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_TIM1_Init+0xa0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_TIM1_Init+0xa0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_TIM1_Init+0xa0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ede:	4815      	ldr	r0, [pc, #84]	; (8000f34 <MX_TIM1_Init+0xa0>)
 8000ee0:	f003 f85a 	bl	8003f98 <HAL_TIM_Base_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000eea:	f000 f8c7 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480e      	ldr	r0, [pc, #56]	; (8000f34 <MX_TIM1_Init+0xa0>)
 8000efc:	f003 fa33 	bl	8004366 <HAL_TIM_ConfigClockSource>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f06:	f000 f8b9 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <MX_TIM1_Init+0xa0>)
 8000f1c:	f003 fc56 	bl	80047cc <HAL_TIMEx_MasterConfigSynchronization>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f26:	f000 f8a9 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200000ac 	.word	0x200000ac
 8000f38:	40012c00 	.word	0x40012c00

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	4b48      	ldr	r3, [pc, #288]	; (8001074 <MX_GPIO_Init+0x138>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a47      	ldr	r2, [pc, #284]	; (8001074 <MX_GPIO_Init+0x138>)
 8000f58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b45      	ldr	r3, [pc, #276]	; (8001074 <MX_GPIO_Init+0x138>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f6a:	4b42      	ldr	r3, [pc, #264]	; (8001074 <MX_GPIO_Init+0x138>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	4a41      	ldr	r2, [pc, #260]	; (8001074 <MX_GPIO_Init+0x138>)
 8000f70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f74:	6153      	str	r3, [r2, #20]
 8000f76:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <MX_GPIO_Init+0x138>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	4b3c      	ldr	r3, [pc, #240]	; (8001074 <MX_GPIO_Init+0x138>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	4a3b      	ldr	r2, [pc, #236]	; (8001074 <MX_GPIO_Init+0x138>)
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8c:	6153      	str	r3, [r2, #20]
 8000f8e:	4b39      	ldr	r3, [pc, #228]	; (8001074 <MX_GPIO_Init+0x138>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	4b36      	ldr	r3, [pc, #216]	; (8001074 <MX_GPIO_Init+0x138>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	4a35      	ldr	r2, [pc, #212]	; (8001074 <MX_GPIO_Init+0x138>)
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa4:	6153      	str	r3, [r2, #20]
 8000fa6:	4b33      	ldr	r3, [pc, #204]	; (8001074 <MX_GPIO_Init+0x138>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fba:	f000 fc65 	bl	8001888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fc4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4828      	ldr	r0, [pc, #160]	; (8001078 <MX_GPIO_Init+0x13c>)
 8000fd6:	f000 facd 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fda:	230c      	movs	r3, #12
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fea:	2307      	movs	r3, #7
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff8:	f000 fabc 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ffc:	2320      	movs	r3, #32
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f000 faad 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Interrupt_Pin */
  GPIO_InitStruct.Pin = DIO0_Interrupt_Pin;
 800101a:	2340      	movs	r3, #64	; 0x40
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800101e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	4812      	ldr	r0, [pc, #72]	; (8001078 <MX_GPIO_Init+0x13c>)
 8001030:	f000 faa0 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : CUSTOMNAME_Pin */
  GPIO_InitStruct.Pin = CUSTOMNAME_Pin;
 8001034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CUSTOMNAME_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <MX_GPIO_Init+0x13c>)
 800104a:	f000 fa93 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor0_Pin Sensor1_Pin Sensor2_Pin Sensor3_Pin */
  GPIO_InitStruct.Pin = Sensor0_Pin|Sensor1_Pin|Sensor2_Pin|Sensor3_Pin;
 800104e:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f000 fa85 	bl	8001574 <HAL_GPIO_Init>

}
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	48000800 	.word	0x48000800

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x8>
	...

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_MspInit+0x44>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_MspInit+0x44>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6193      	str	r3, [r2, #24]
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_MspInit+0x44>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_MspInit+0x44>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a08      	ldr	r2, [pc, #32]	; (80010cc <HAL_MspInit+0x44>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	61d3      	str	r3, [r2, #28]
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_MspInit+0x44>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010be:	2007      	movs	r0, #7
 80010c0:	f000 fa16 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_SPI_MspInit+0x7c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d128      	bne.n	8001144 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <HAL_SPI_MspInit+0x80>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a16      	ldr	r2, [pc, #88]	; (8001150 <HAL_SPI_MspInit+0x80>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_SPI_MspInit+0x80>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_SPI_MspInit+0x80>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <HAL_SPI_MspInit+0x80>)
 8001110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001114:	6153      	str	r3, [r2, #20]
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_SPI_MspInit+0x80>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8001122:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001134:	2305      	movs	r3, #5
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_SPI_MspInit+0x84>)
 8001140:	f000 fa18 	bl	8001574 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	; 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40003800 	.word	0x40003800
 8001150:	40021000 	.word	0x40021000
 8001154:	48000400 	.word	0x48000400

08001158 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <HAL_TIM_Base_MspInit+0x44>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d113      	bne.n	8001192 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_TIM_Base_MspInit+0x48>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <HAL_TIM_Base_MspInit+0x48>)
 8001170:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001174:	6193      	str	r3, [r2, #24]
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_TIM_Base_MspInit+0x48>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	201b      	movs	r0, #27
 8001188:	f000 f9bd 	bl	8001506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800118c:	201b      	movs	r0, #27
 800118e:	f000 f9d6 	bl	800153e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40012c00 	.word	0x40012c00
 80011a0:	40021000 	.word	0x40021000

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler+0x4>

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MemManage_Handler+0x4>

080011b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f0:	f000 f88e 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <TIM1_CC_IRQHandler+0x10>)
 80011fe:	f002 ff93 	bl	8004128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200000ac 	.word	0x200000ac

0800120c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <SystemInit+0x20>)
 8001212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <SystemInit+0x20>)
 8001218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800121c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001268 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <LoopForever+0x6>)
  ldr r1, =_edata
 8001236:	490e      	ldr	r1, [pc, #56]	; (8001270 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001238:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <LoopForever+0xe>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <LoopForever+0x12>)
  ldr r4, =_ebss
 800124c:	4c0b      	ldr	r4, [pc, #44]	; (800127c <LoopForever+0x16>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800125a:	f7ff ffd7 	bl	800120c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125e:	f003 fb5f 	bl	8004920 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001262:	f7ff fcb3 	bl	8000bcc <main>

08001266 <LoopForever>:

LoopForever:
    b LoopForever
 8001266:	e7fe      	b.n	8001266 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001268:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001270:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001274:	08004aa0 	.word	0x08004aa0
  ldr r2, =_sbss
 8001278:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800127c:	2000011c 	.word	0x2000011c

08001280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC1_2_IRQHandler>
	...

08001284 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_Init+0x28>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_Init+0x28>)
 800128e:	f043 0310 	orr.w	r3, r3, #16
 8001292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001294:	2003      	movs	r0, #3
 8001296:	f000 f92b 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129a:	2000      	movs	r0, #0
 800129c:	f000 f808 	bl	80012b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a0:	f7ff fef2 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40022000 	.word	0x40022000

080012b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_InitTick+0x54>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x58>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f943 	bl	800155a <HAL_SYSTICK_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e00e      	b.n	80012fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d80a      	bhi.n	80012fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f000 f90b 	bl	8001506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_InitTick+0x5c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000004 	.word	0x20000004
 8001308:	2000000c 	.word	0x2000000c
 800130c:	20000008 	.word	0x20000008

08001310 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x20>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x24>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_IncTick+0x24>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	2000000c 	.word	0x2000000c
 8001334:	20000118 	.word	0x20000118

08001338 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;  
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_GetTick+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000118 	.word	0x20000118

08001350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	; (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <__NVIC_GetPriorityGrouping+0x18>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	f003 0307 	and.w	r3, r3, #7
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db0b      	blt.n	80013de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	4907      	ldr	r1, [pc, #28]	; (80013ec <__NVIC_EnableIRQ+0x38>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	2001      	movs	r0, #1
 80013d6:	fa00 f202 	lsl.w	r2, r0, r2
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	; (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f7ff ff8e 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff29 	bl	8001350 <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001518:	f7ff ff3e 	bl	8001398 <__NVIC_GetPriorityGrouping>
 800151c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff ff8e 	bl	8001444 <NVIC_EncodePriority>
 8001528:	4602      	mov	r2, r0
 800152a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff5d 	bl	80013f0 <__NVIC_SetPriority>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff31 	bl	80013b4 <__NVIC_EnableIRQ>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ffa2 	bl	80014ac <SysTick_Config>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001582:	e160      	b.n	8001846 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	2101      	movs	r1, #1
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	4013      	ands	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 8152 	beq.w	8001840 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d005      	beq.n	80015b4 <HAL_GPIO_Init+0x40>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d130      	bne.n	8001616 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ea:	2201      	movs	r2, #1
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	f003 0201 	and.w	r2, r3, #1
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	2b03      	cmp	r3, #3
 8001620:	d017      	beq.n	8001652 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	2203      	movs	r2, #3
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d123      	bne.n	80016a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	08da      	lsrs	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3208      	adds	r2, #8
 8001666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	220f      	movs	r2, #15
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	691a      	ldr	r2, [r3, #16]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	08da      	lsrs	r2, r3, #3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3208      	adds	r2, #8
 80016a0:	6939      	ldr	r1, [r7, #16]
 80016a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 0203 	and.w	r2, r3, #3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 80ac 	beq.w	8001840 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e8:	4b5e      	ldr	r3, [pc, #376]	; (8001864 <HAL_GPIO_Init+0x2f0>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a5d      	ldr	r2, [pc, #372]	; (8001864 <HAL_GPIO_Init+0x2f0>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b5b      	ldr	r3, [pc, #364]	; (8001864 <HAL_GPIO_Init+0x2f0>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001700:	4a59      	ldr	r2, [pc, #356]	; (8001868 <HAL_GPIO_Init+0x2f4>)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	3302      	adds	r3, #2
 8001708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	220f      	movs	r2, #15
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800172a:	d025      	beq.n	8001778 <HAL_GPIO_Init+0x204>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a4f      	ldr	r2, [pc, #316]	; (800186c <HAL_GPIO_Init+0x2f8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d01f      	beq.n	8001774 <HAL_GPIO_Init+0x200>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a4e      	ldr	r2, [pc, #312]	; (8001870 <HAL_GPIO_Init+0x2fc>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d019      	beq.n	8001770 <HAL_GPIO_Init+0x1fc>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a4d      	ldr	r2, [pc, #308]	; (8001874 <HAL_GPIO_Init+0x300>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d013      	beq.n	800176c <HAL_GPIO_Init+0x1f8>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a4c      	ldr	r2, [pc, #304]	; (8001878 <HAL_GPIO_Init+0x304>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d00d      	beq.n	8001768 <HAL_GPIO_Init+0x1f4>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a4b      	ldr	r2, [pc, #300]	; (800187c <HAL_GPIO_Init+0x308>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d007      	beq.n	8001764 <HAL_GPIO_Init+0x1f0>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a4a      	ldr	r2, [pc, #296]	; (8001880 <HAL_GPIO_Init+0x30c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d101      	bne.n	8001760 <HAL_GPIO_Init+0x1ec>
 800175c:	2306      	movs	r3, #6
 800175e:	e00c      	b.n	800177a <HAL_GPIO_Init+0x206>
 8001760:	2307      	movs	r3, #7
 8001762:	e00a      	b.n	800177a <HAL_GPIO_Init+0x206>
 8001764:	2305      	movs	r3, #5
 8001766:	e008      	b.n	800177a <HAL_GPIO_Init+0x206>
 8001768:	2304      	movs	r3, #4
 800176a:	e006      	b.n	800177a <HAL_GPIO_Init+0x206>
 800176c:	2303      	movs	r3, #3
 800176e:	e004      	b.n	800177a <HAL_GPIO_Init+0x206>
 8001770:	2302      	movs	r3, #2
 8001772:	e002      	b.n	800177a <HAL_GPIO_Init+0x206>
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <HAL_GPIO_Init+0x206>
 8001778:	2300      	movs	r3, #0
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	f002 0203 	and.w	r2, r2, #3
 8001780:	0092      	lsls	r2, r2, #2
 8001782:	4093      	lsls	r3, r2
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800178a:	4937      	ldr	r1, [pc, #220]	; (8001868 <HAL_GPIO_Init+0x2f4>)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	3302      	adds	r3, #2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001798:	4b3a      	ldr	r3, [pc, #232]	; (8001884 <HAL_GPIO_Init+0x310>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017bc:	4a31      	ldr	r2, [pc, #196]	; (8001884 <HAL_GPIO_Init+0x310>)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017c2:	4b30      	ldr	r3, [pc, #192]	; (8001884 <HAL_GPIO_Init+0x310>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017e6:	4a27      	ldr	r2, [pc, #156]	; (8001884 <HAL_GPIO_Init+0x310>)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <HAL_GPIO_Init+0x310>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001810:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <HAL_GPIO_Init+0x310>)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_GPIO_Init+0x310>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <HAL_GPIO_Init+0x310>)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3301      	adds	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	f47f ae97 	bne.w	8001584 <HAL_GPIO_Init+0x10>
  }
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	371c      	adds	r7, #28
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40021000 	.word	0x40021000
 8001868:	40010000 	.word	0x40010000
 800186c:	48000400 	.word	0x48000400
 8001870:	48000800 	.word	0x48000800
 8001874:	48000c00 	.word	0x48000c00
 8001878:	48001000 	.word	0x48001000
 800187c:	48001400 	.word	0x48001400
 8001880:	48001800 	.word	0x48001800
 8001884:	40010400 	.word	0x40010400

08001888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
 8001894:	4613      	mov	r3, r2
 8001896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001898:	787b      	ldrb	r3, [r7, #1]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80018be:	af00      	add	r7, sp, #0
 80018c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	f001 b83a 	b.w	8002952 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 816f 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018f4:	4bb5      	ldr	r3, [pc, #724]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d00c      	beq.n	800191a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001900:	4bb2      	ldr	r3, [pc, #712]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	d15c      	bne.n	80019c6 <HAL_RCC_OscConfig+0x10e>
 800190c:	4baf      	ldr	r3, [pc, #700]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001918:	d155      	bne.n	80019c6 <HAL_RCC_OscConfig+0x10e>
 800191a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800191e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800192e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	095b      	lsrs	r3, r3, #5
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d102      	bne.n	800194c <HAL_RCC_OscConfig+0x94>
 8001946:	4ba1      	ldr	r3, [pc, #644]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	e015      	b.n	8001978 <HAL_RCC_OscConfig+0xc0>
 800194c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001950:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001964:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001968:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001974:	4b95      	ldr	r3, [pc, #596]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800197c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001980:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001984:	fa92 f2a2 	rbit	r2, r2
 8001988:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800198c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001990:	fab2 f282 	clz	r2, r2
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	f042 0220 	orr.w	r2, r2, #32
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	f002 021f 	and.w	r2, r2, #31
 80019a0:	2101      	movs	r1, #1
 80019a2:	fa01 f202 	lsl.w	r2, r1, r2
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 8111 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x318>
 80019ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f040 8108 	bne.w	8001bd0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f000 bfc6 	b.w	8002952 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x12e>
 80019d8:	4b7c      	ldr	r3, [pc, #496]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a7b      	ldr	r2, [pc, #492]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 80019de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e036      	b.n	8001a54 <HAL_RCC_OscConfig+0x19c>
 80019e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x158>
 80019f6:	4b75      	ldr	r3, [pc, #468]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a74      	ldr	r2, [pc, #464]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 80019fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b72      	ldr	r3, [pc, #456]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a71      	ldr	r2, [pc, #452]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e021      	b.n	8001a54 <HAL_RCC_OscConfig+0x19c>
 8001a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x184>
 8001a22:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a69      	ldr	r2, [pc, #420]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a66      	ldr	r2, [pc, #408]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0x19c>
 8001a3c:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a62      	ldr	r2, [pc, #392]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b60      	ldr	r3, [pc, #384]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a5f      	ldr	r2, [pc, #380]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d059      	beq.n	8001b18 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fc68 	bl	8001338 <HAL_GetTick>
 8001a68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6c:	e00a      	b.n	8001a84 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6e:	f7ff fc63 	bl	8001338 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d902      	bls.n	8001a84 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	f000 bf67 	b.w	8002952 <HAL_RCC_OscConfig+0x109a>
 8001a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a88:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001a98:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9c:	fab3 f383 	clz	r3, r3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d102      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x1fe>
 8001ab0:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	e015      	b.n	8001ae2 <HAL_RCC_OscConfig+0x22a>
 8001ab6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ace:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ad2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ae6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001aea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001aee:	fa92 f2a2 	rbit	r2, r2
 8001af2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001af6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001afa:	fab2 f282 	clz	r2, r2
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f042 0220 	orr.w	r2, r2, #32
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	f002 021f 	and.w	r2, r2, #31
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0ab      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1b6>
 8001b16:	e05c      	b.n	8001bd2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7ff fc0e 	bl	8001338 <HAL_GetTick>
 8001b1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b20:	e00a      	b.n	8001b38 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b22:	f7ff fc09 	bl	8001338 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d902      	bls.n	8001b38 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	f000 bf0d 	b.w	8002952 <HAL_RCC_OscConfig+0x109a>
 8001b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001b4c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d102      	bne.n	8001b6a <HAL_RCC_OscConfig+0x2b2>
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	e015      	b.n	8001b96 <HAL_RCC_OscConfig+0x2de>
 8001b6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b6e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b82:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b86:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001b8a:	fa93 f3a3 	rbit	r3, r3
 8001b8e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_RCC_OscConfig+0x314>)
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b9a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001b9e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001ba2:	fa92 f2a2 	rbit	r2, r2
 8001ba6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001baa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001bae:	fab2 f282 	clz	r2, r2
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	f042 0220 	orr.w	r2, r2, #32
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	f002 021f 	and.w	r2, r2, #31
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ab      	bne.n	8001b22 <HAL_RCC_OscConfig+0x26a>
 8001bca:	e002      	b.n	8001bd2 <HAL_RCC_OscConfig+0x31a>
 8001bcc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 817f 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001be8:	4ba7      	ldr	r3, [pc, #668]	; (8001e88 <HAL_RCC_OscConfig+0x5d0>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00c      	beq.n	8001c0e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bf4:	4ba4      	ldr	r3, [pc, #656]	; (8001e88 <HAL_RCC_OscConfig+0x5d0>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d173      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x430>
 8001c00:	4ba1      	ldr	r3, [pc, #644]	; (8001e88 <HAL_RCC_OscConfig+0x5d0>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c0c:	d16c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x430>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001c20:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d102      	bne.n	8001c3e <HAL_RCC_OscConfig+0x386>
 8001c38:	4b93      	ldr	r3, [pc, #588]	; (8001e88 <HAL_RCC_OscConfig+0x5d0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	e013      	b.n	8001c66 <HAL_RCC_OscConfig+0x3ae>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001c50:	2302      	movs	r3, #2
 8001c52:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c56:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c62:	4b89      	ldr	r3, [pc, #548]	; (8001e88 <HAL_RCC_OscConfig+0x5d0>)
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	2202      	movs	r2, #2
 8001c68:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001c6c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001c70:	fa92 f2a2 	rbit	r2, r2
 8001c74:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001c78:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c7c:	fab2 f282 	clz	r2, r2
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	f042 0220 	orr.w	r2, r2, #32
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f002 021f 	and.w	r2, r2, #31
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00a      	beq.n	8001cae <HAL_RCC_OscConfig+0x3f6>
 8001c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d002      	beq.n	8001cae <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f000 be52 	b.w	8002952 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cae:	4b76      	ldr	r3, [pc, #472]	; (8001e88 <HAL_RCC_OscConfig+0x5d0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	21f8      	movs	r1, #248	; 0xf8
 8001cc4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001ccc:	fa91 f1a1 	rbit	r1, r1
 8001cd0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001cd4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001cd8:	fab1 f181 	clz	r1, r1
 8001cdc:	b2c9      	uxtb	r1, r1
 8001cde:	408b      	lsls	r3, r1
 8001ce0:	4969      	ldr	r1, [pc, #420]	; (8001e88 <HAL_RCC_OscConfig+0x5d0>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce6:	e0fe      	b.n	8001ee6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 8088 	beq.w	8001e0a <HAL_RCC_OscConfig+0x552>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001d0c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	461a      	mov	r2, r3
 8001d22:	2301      	movs	r3, #1
 8001d24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7ff fb07 	bl	8001338 <HAL_GetTick>
 8001d2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d30:	f7ff fb02 	bl	8001338 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d902      	bls.n	8001d46 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	f000 be06 	b.w	8002952 <HAL_RCC_OscConfig+0x109a>
 8001d46:	2302      	movs	r3, #2
 8001d48:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001d58:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d102      	bne.n	8001d76 <HAL_RCC_OscConfig+0x4be>
 8001d70:	4b45      	ldr	r3, [pc, #276]	; (8001e88 <HAL_RCC_OscConfig+0x5d0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	e013      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e6>
 8001d76:	2302      	movs	r3, #2
 8001d78:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001d88:	2302      	movs	r3, #2
 8001d8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d8e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <HAL_RCC_OscConfig+0x5d0>)
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001da4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001da8:	fa92 f2a2 	rbit	r2, r2
 8001dac:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001db0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001db4:	fab2 f282 	clz	r2, r2
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	f042 0220 	orr.w	r2, r2, #32
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	f002 021f 	and.w	r2, r2, #31
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0af      	beq.n	8001d30 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_RCC_OscConfig+0x5d0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ddc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	21f8      	movs	r1, #248	; 0xf8
 8001de6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001dee:	fa91 f1a1 	rbit	r1, r1
 8001df2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001df6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001dfa:	fab1 f181 	clz	r1, r1
 8001dfe:	b2c9      	uxtb	r1, r1
 8001e00:	408b      	lsls	r3, r1
 8001e02:	4921      	ldr	r1, [pc, #132]	; (8001e88 <HAL_RCC_OscConfig+0x5d0>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]
 8001e08:	e06d      	b.n	8001ee6 <HAL_RCC_OscConfig+0x62e>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001e1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	461a      	mov	r2, r3
 8001e32:	2300      	movs	r3, #0
 8001e34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7ff fa7f 	bl	8001338 <HAL_GetTick>
 8001e3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e40:	f7ff fa7a 	bl	8001338 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d902      	bls.n	8001e56 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	f000 bd7e 	b.w	8002952 <HAL_RCC_OscConfig+0x109a>
 8001e56:	2302      	movs	r3, #2
 8001e58:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001e68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d105      	bne.n	8001e8c <HAL_RCC_OscConfig+0x5d4>
 8001e80:	4b01      	ldr	r3, [pc, #4]	; (8001e88 <HAL_RCC_OscConfig+0x5d0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	e016      	b.n	8001eb4 <HAL_RCC_OscConfig+0x5fc>
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ea4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001eb0:	4bbf      	ldr	r3, [pc, #764]	; (80021b0 <HAL_RCC_OscConfig+0x8f8>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001eba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001ebe:	fa92 f2a2 	rbit	r2, r2
 8001ec2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001ec6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001eca:	fab2 f282 	clz	r2, r2
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f042 0220 	orr.w	r2, r2, #32
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	f002 021f 	and.w	r2, r2, #31
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ac      	bne.n	8001e40 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8113 	beq.w	8002122 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d07c      	beq.n	8002006 <HAL_RCC_OscConfig+0x74e>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001f1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4ba2      	ldr	r3, [pc, #648]	; (80021b4 <HAL_RCC_OscConfig+0x8fc>)
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	461a      	mov	r2, r3
 8001f32:	2301      	movs	r3, #1
 8001f34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f36:	f7ff f9ff 	bl	8001338 <HAL_GetTick>
 8001f3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f40:	f7ff f9fa 	bl	8001338 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d902      	bls.n	8001f56 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	f000 bcfe 	b.w	8002952 <HAL_RCC_OscConfig+0x109a>
 8001f56:	2302      	movs	r3, #2
 8001f58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f68:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f76:	2202      	movs	r2, #2
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	fa93 f2a3 	rbit	r2, r3
 8001f88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	fa93 f2a3 	rbit	r2, r3
 8001fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fb4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb6:	4b7e      	ldr	r3, [pc, #504]	; (80021b0 <HAL_RCC_OscConfig+0x8f8>)
 8001fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	6019      	str	r1, [r3, #0]
 8001fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	fa93 f1a3 	rbit	r1, r3
 8001fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fdc:	6019      	str	r1, [r3, #0]
  return result;
 8001fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d09d      	beq.n	8001f40 <HAL_RCC_OscConfig+0x688>
 8002004:	e08d      	b.n	8002122 <HAL_RCC_OscConfig+0x86a>
 8002006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002016:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	fa93 f2a3 	rbit	r2, r3
 8002020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002024:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002028:	601a      	str	r2, [r3, #0]
  return result;
 800202a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002032:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	4b5d      	ldr	r3, [pc, #372]	; (80021b4 <HAL_RCC_OscConfig+0x8fc>)
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	461a      	mov	r2, r3
 8002044:	2300      	movs	r3, #0
 8002046:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7ff f976 	bl	8001338 <HAL_GetTick>
 800204c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002050:	e00a      	b.n	8002068 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002052:	f7ff f971 	bl	8001338 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d902      	bls.n	8002068 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	f000 bc75 	b.w	8002952 <HAL_RCC_OscConfig+0x109a>
 8002068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002070:	2202      	movs	r2, #2
 8002072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002078:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	fa93 f2a3 	rbit	r2, r3
 8002082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002086:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002090:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002094:	2202      	movs	r2, #2
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	fa93 f2a3 	rbit	r2, r3
 80020a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80020b8:	2202      	movs	r2, #2
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	fa93 f2a3 	rbit	r2, r3
 80020ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <HAL_RCC_OscConfig+0x8f8>)
 80020d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020e0:	2102      	movs	r1, #2
 80020e2:	6019      	str	r1, [r3, #0]
 80020e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	fa93 f1a3 	rbit	r1, r3
 80020f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020fa:	6019      	str	r1, [r3, #0]
  return result;
 80020fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002100:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002110:	b2db      	uxtb	r3, r3
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	2101      	movs	r1, #1
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d197      	bne.n	8002052 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002126:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 81a5 	beq.w	8002482 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213e:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <HAL_RCC_OscConfig+0x8f8>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d116      	bne.n	8002178 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_RCC_OscConfig+0x8f8>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <HAL_RCC_OscConfig+0x8f8>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	61d3      	str	r3, [r2, #28]
 8002156:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <HAL_RCC_OscConfig+0x8f8>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800215e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800216c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002170:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002172:	2301      	movs	r3, #1
 8002174:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_RCC_OscConfig+0x900>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d121      	bne.n	80021c8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_RCC_OscConfig+0x900>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <HAL_RCC_OscConfig+0x900>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002190:	f7ff f8d2 	bl	8001338 <HAL_GetTick>
 8002194:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	e010      	b.n	80021bc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7ff f8cd 	bl	8001338 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d908      	bls.n	80021bc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e3d1      	b.n	8002952 <HAL_RCC_OscConfig+0x109a>
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	10908120 	.word	0x10908120
 80021b8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	4b8d      	ldr	r3, [pc, #564]	; (80023f4 <HAL_RCC_OscConfig+0xb3c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0e8      	beq.n	800219a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x92e>
 80021d8:	4b87      	ldr	r3, [pc, #540]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4a86      	ldr	r2, [pc, #536]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6213      	str	r3, [r2, #32]
 80021e4:	e035      	b.n	8002252 <HAL_RCC_OscConfig+0x99a>
 80021e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x958>
 80021f6:	4b80      	ldr	r3, [pc, #512]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a7f      	ldr	r2, [pc, #508]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6213      	str	r3, [r2, #32]
 8002202:	4b7d      	ldr	r3, [pc, #500]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4a7c      	ldr	r2, [pc, #496]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	6213      	str	r3, [r2, #32]
 800220e:	e020      	b.n	8002252 <HAL_RCC_OscConfig+0x99a>
 8002210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002214:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b05      	cmp	r3, #5
 800221e:	d10c      	bne.n	800223a <HAL_RCC_OscConfig+0x982>
 8002220:	4b75      	ldr	r3, [pc, #468]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4a74      	ldr	r2, [pc, #464]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6213      	str	r3, [r2, #32]
 800222c:	4b72      	ldr	r3, [pc, #456]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4a71      	ldr	r2, [pc, #452]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6213      	str	r3, [r2, #32]
 8002238:	e00b      	b.n	8002252 <HAL_RCC_OscConfig+0x99a>
 800223a:	4b6f      	ldr	r3, [pc, #444]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4a6e      	ldr	r2, [pc, #440]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	6213      	str	r3, [r2, #32]
 8002246:	4b6c      	ldr	r3, [pc, #432]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a6b      	ldr	r2, [pc, #428]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 800224c:	f023 0304 	bic.w	r3, r3, #4
 8002250:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002256:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 8081 	beq.w	8002366 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002264:	f7ff f868 	bl	8001338 <HAL_GetTick>
 8002268:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226c:	e00b      	b.n	8002286 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226e:	f7ff f863 	bl	8001338 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e365      	b.n	8002952 <HAL_RCC_OscConfig+0x109a>
 8002286:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800228e:	2202      	movs	r2, #2
 8002290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002296:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	fa93 f2a3 	rbit	r2, r3
 80022a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022b2:	2202      	movs	r2, #2
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	fa93 f2a3 	rbit	r2, r3
 80022c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022cc:	601a      	str	r2, [r3, #0]
  return result;
 80022ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f043 0302 	orr.w	r3, r3, #2
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d102      	bne.n	80022f2 <HAL_RCC_OscConfig+0xa3a>
 80022ec:	4b42      	ldr	r3, [pc, #264]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	e013      	b.n	800231a <HAL_RCC_OscConfig+0xa62>
 80022f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80022fa:	2202      	movs	r2, #2
 80022fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002302:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	fa93 f2a3 	rbit	r2, r3
 800230c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002310:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	4b38      	ldr	r3, [pc, #224]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800231e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002322:	2102      	movs	r1, #2
 8002324:	6011      	str	r1, [r2, #0]
 8002326:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800232a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	fa92 f1a2 	rbit	r1, r2
 8002334:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002338:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800233c:	6011      	str	r1, [r2, #0]
  return result;
 800233e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002342:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	fab2 f282 	clz	r2, r2
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	f002 021f 	and.w	r2, r2, #31
 8002358:	2101      	movs	r1, #1
 800235a:	fa01 f202 	lsl.w	r2, r1, r2
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d084      	beq.n	800226e <HAL_RCC_OscConfig+0x9b6>
 8002364:	e083      	b.n	800246e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7fe ffe7 	bl	8001338 <HAL_GetTick>
 800236a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236e:	e00b      	b.n	8002388 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7fe ffe2 	bl	8001338 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e2e4      	b.n	8002952 <HAL_RCC_OscConfig+0x109a>
 8002388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002390:	2202      	movs	r2, #2
 8002392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002398:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	fa93 f2a3 	rbit	r2, r3
 80023a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023b4:	2202      	movs	r2, #2
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023ce:	601a      	str	r2, [r3, #0]
  return result;
 80023d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d106      	bne.n	80023fc <HAL_RCC_OscConfig+0xb44>
 80023ee:	4b02      	ldr	r3, [pc, #8]	; (80023f8 <HAL_RCC_OscConfig+0xb40>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	e017      	b.n	8002424 <HAL_RCC_OscConfig+0xb6c>
 80023f4:	40007000 	.word	0x40007000
 80023f8:	40021000 	.word	0x40021000
 80023fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002400:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002404:	2202      	movs	r2, #2
 8002406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	fa93 f2a3 	rbit	r2, r3
 8002416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	4bb3      	ldr	r3, [pc, #716]	; (80026f0 <HAL_RCC_OscConfig+0xe38>)
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002428:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800242c:	2102      	movs	r1, #2
 800242e:	6011      	str	r1, [r2, #0]
 8002430:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002434:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	fa92 f1a2 	rbit	r1, r2
 800243e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002442:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002446:	6011      	str	r1, [r2, #0]
  return result;
 8002448:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800244c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	fab2 f282 	clz	r2, r2
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f002 021f 	and.w	r2, r2, #31
 8002462:	2101      	movs	r1, #1
 8002464:	fa01 f202 	lsl.w	r2, r1, r2
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d180      	bne.n	8002370 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800246e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002472:	2b01      	cmp	r3, #1
 8002474:	d105      	bne.n	8002482 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002476:	4b9e      	ldr	r3, [pc, #632]	; (80026f0 <HAL_RCC_OscConfig+0xe38>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	4a9d      	ldr	r2, [pc, #628]	; (80026f0 <HAL_RCC_OscConfig+0xe38>)
 800247c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002480:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002486:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 825e 	beq.w	8002950 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002494:	4b96      	ldr	r3, [pc, #600]	; (80026f0 <HAL_RCC_OscConfig+0xe38>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b08      	cmp	r3, #8
 800249e:	f000 821f 	beq.w	80028e0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	f040 8170 	bne.w	8002794 <HAL_RCC_OscConfig+0xedc>
 80024b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024d8:	601a      	str	r2, [r3, #0]
  return result;
 80024da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024de:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024e2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	461a      	mov	r2, r3
 80024f6:	2300      	movs	r3, #0
 80024f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7fe ff1d 	bl	8001338 <HAL_GetTick>
 80024fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002502:	e009      	b.n	8002518 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe ff18 	bl	8001338 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e21c      	b.n	8002952 <HAL_RCC_OscConfig+0x109a>
 8002518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002520:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800252a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	fa93 f2a3 	rbit	r2, r3
 8002534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002538:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800253c:	601a      	str	r2, [r3, #0]
  return result;
 800253e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002542:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002546:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	b2db      	uxtb	r3, r3
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d102      	bne.n	8002562 <HAL_RCC_OscConfig+0xcaa>
 800255c:	4b64      	ldr	r3, [pc, #400]	; (80026f0 <HAL_RCC_OscConfig+0xe38>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	e027      	b.n	80025b2 <HAL_RCC_OscConfig+0xcfa>
 8002562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002566:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800256a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800256e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002574:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fa93 f2a3 	rbit	r2, r3
 800257e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002582:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	fa93 f2a3 	rbit	r2, r3
 80025a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <HAL_RCC_OscConfig+0xe38>)
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025b6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025be:	6011      	str	r1, [r2, #0]
 80025c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025c4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	fa92 f1a2 	rbit	r1, r2
 80025ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025d2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80025d6:	6011      	str	r1, [r2, #0]
  return result;
 80025d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025dc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	fab2 f282 	clz	r2, r2
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	f042 0220 	orr.w	r2, r2, #32
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	f002 021f 	and.w	r2, r2, #31
 80025f2:	2101      	movs	r1, #1
 80025f4:	fa01 f202 	lsl.w	r2, r1, r2
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d182      	bne.n	8002504 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fe:	4b3c      	ldr	r3, [pc, #240]	; (80026f0 <HAL_RCC_OscConfig+0xe38>)
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	f023 020f 	bic.w	r2, r3, #15
 8002606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	4937      	ldr	r1, [pc, #220]	; (80026f0 <HAL_RCC_OscConfig+0xe38>)
 8002614:	4313      	orrs	r3, r2
 8002616:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002618:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <HAL_RCC_OscConfig+0xe38>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002624:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a19      	ldr	r1, [r3, #32]
 800262c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002630:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	430b      	orrs	r3, r1
 800263a:	492d      	ldr	r1, [pc, #180]	; (80026f0 <HAL_RCC_OscConfig+0xe38>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
 8002640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002644:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002648:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800264c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002652:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	fa93 f2a3 	rbit	r2, r3
 800265c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002660:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002664:	601a      	str	r2, [r3, #0]
  return result;
 8002666:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800266a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800266e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800267a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	461a      	mov	r2, r3
 8002682:	2301      	movs	r3, #1
 8002684:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7fe fe57 	bl	8001338 <HAL_GetTick>
 800268a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268e:	e009      	b.n	80026a4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002690:	f7fe fe52 	bl	8001338 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e156      	b.n	8002952 <HAL_RCC_OscConfig+0x109a>
 80026a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80026ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	fa93 f2a3 	rbit	r2, r3
 80026c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026c8:	601a      	str	r2, [r3, #0]
  return result;
 80026ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d105      	bne.n	80026f4 <HAL_RCC_OscConfig+0xe3c>
 80026e8:	4b01      	ldr	r3, [pc, #4]	; (80026f0 <HAL_RCC_OscConfig+0xe38>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	e02a      	b.n	8002744 <HAL_RCC_OscConfig+0xe8c>
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80026fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002706:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	fa93 f2a3 	rbit	r2, r3
 8002710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002714:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800271e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002722:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800272c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	fa93 f2a3 	rbit	r2, r3
 8002736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800273a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	4b86      	ldr	r3, [pc, #536]	; (800295c <HAL_RCC_OscConfig+0x10a4>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002748:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800274c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002750:	6011      	str	r1, [r2, #0]
 8002752:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002756:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	fa92 f1a2 	rbit	r1, r2
 8002760:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002764:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002768:	6011      	str	r1, [r2, #0]
  return result;
 800276a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800276e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	fab2 f282 	clz	r2, r2
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	f042 0220 	orr.w	r2, r2, #32
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	f002 021f 	and.w	r2, r2, #31
 8002784:	2101      	movs	r1, #1
 8002786:	fa01 f202 	lsl.w	r2, r1, r2
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	f43f af7f 	beq.w	8002690 <HAL_RCC_OscConfig+0xdd8>
 8002792:	e0dd      	b.n	8002950 <HAL_RCC_OscConfig+0x1098>
 8002794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002798:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800279c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	fa93 f2a3 	rbit	r2, r3
 80027b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027b8:	601a      	str	r2, [r3, #0]
  return result;
 80027ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027be:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027c2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	461a      	mov	r2, r3
 80027d6:	2300      	movs	r3, #0
 80027d8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027da:	f7fe fdad 	bl	8001338 <HAL_GetTick>
 80027de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e2:	e009      	b.n	80027f8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e4:	f7fe fda8 	bl	8001338 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0ac      	b.n	8002952 <HAL_RCC_OscConfig+0x109a>
 80027f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027fc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002800:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800280a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	fa93 f2a3 	rbit	r2, r3
 8002814:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002818:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800281c:	601a      	str	r2, [r3, #0]
  return result;
 800281e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002822:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002826:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	b2db      	uxtb	r3, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b01      	cmp	r3, #1
 800283a:	d102      	bne.n	8002842 <HAL_RCC_OscConfig+0xf8a>
 800283c:	4b47      	ldr	r3, [pc, #284]	; (800295c <HAL_RCC_OscConfig+0x10a4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	e027      	b.n	8002892 <HAL_RCC_OscConfig+0xfda>
 8002842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002846:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800284a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800284e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002854:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	fa93 f2a3 	rbit	r2, r3
 800285e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002862:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800286c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800287a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	fa93 f2a3 	rbit	r2, r3
 8002884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002888:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	4b33      	ldr	r3, [pc, #204]	; (800295c <HAL_RCC_OscConfig+0x10a4>)
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002896:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800289a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800289e:	6011      	str	r1, [r2, #0]
 80028a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028a4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	fa92 f1a2 	rbit	r1, r2
 80028ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028b2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80028b6:	6011      	str	r1, [r2, #0]
  return result;
 80028b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028bc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	fab2 f282 	clz	r2, r2
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	f042 0220 	orr.w	r2, r2, #32
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	f002 021f 	and.w	r2, r2, #31
 80028d2:	2101      	movs	r1, #1
 80028d4:	fa01 f202 	lsl.w	r2, r1, r2
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d182      	bne.n	80027e4 <HAL_RCC_OscConfig+0xf2c>
 80028de:	e037      	b.n	8002950 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e02e      	b.n	8002952 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028f4:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_RCC_OscConfig+0x10a4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80028fc:	4b17      	ldr	r3, [pc, #92]	; (800295c <HAL_RCC_OscConfig+0x10a4>)
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002904:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002908:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800290c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002910:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	429a      	cmp	r2, r3
 800291a:	d117      	bne.n	800294c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800291c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002920:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002928:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002930:	429a      	cmp	r2, r3
 8002932:	d10b      	bne.n	800294c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002934:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002938:	f003 020f 	and.w	r2, r3, #15
 800293c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002940:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000

08002960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b09e      	sub	sp, #120	; 0x78
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e162      	b.n	8002c3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002978:	4b90      	ldr	r3, [pc, #576]	; (8002bbc <HAL_RCC_ClockConfig+0x25c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d910      	bls.n	80029a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b8d      	ldr	r3, [pc, #564]	; (8002bbc <HAL_RCC_ClockConfig+0x25c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 0207 	bic.w	r2, r3, #7
 800298e:	498b      	ldr	r1, [pc, #556]	; (8002bbc <HAL_RCC_ClockConfig+0x25c>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b89      	ldr	r3, [pc, #548]	; (8002bbc <HAL_RCC_ClockConfig+0x25c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e14a      	b.n	8002c3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b4:	4b82      	ldr	r3, [pc, #520]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	497f      	ldr	r1, [pc, #508]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80dc 	beq.w	8002b8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d13c      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xf6>
 80029dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d102      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xa6>
 8002a00:	4b6f      	ldr	r3, [pc, #444]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	e00f      	b.n	8002a26 <HAL_RCC_ClockConfig+0xc6>
 8002a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	667b      	str	r3, [r7, #100]	; 0x64
 8002a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a18:	663b      	str	r3, [r7, #96]	; 0x60
 8002a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a22:	4b67      	ldr	r3, [pc, #412]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a2e:	fa92 f2a2 	rbit	r2, r2
 8002a32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a36:	fab2 f282 	clz	r2, r2
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	f042 0220 	orr.w	r2, r2, #32
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	f002 021f 	and.w	r2, r2, #31
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d17b      	bne.n	8002b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e0f3      	b.n	8002c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d13c      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x178>
 8002a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d102      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x128>
 8002a82:	4b4f      	ldr	r3, [pc, #316]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	e00f      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x148>
 8002a88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	647b      	str	r3, [r7, #68]	; 0x44
 8002a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa4:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aac:	63ba      	str	r2, [r7, #56]	; 0x38
 8002aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ab0:	fa92 f2a2 	rbit	r2, r2
 8002ab4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ab8:	fab2 f282 	clz	r2, r2
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	f042 0220 	orr.w	r2, r2, #32
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	f002 021f 	and.w	r2, r2, #31
 8002ac8:	2101      	movs	r1, #1
 8002aca:	fa01 f202 	lsl.w	r2, r1, r2
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d13a      	bne.n	8002b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0b2      	b.n	8002c3e <HAL_RCC_ClockConfig+0x2de>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d102      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x1a0>
 8002afa:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	e00d      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1bc>
 8002b00:	2302      	movs	r3, #2
 8002b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	623b      	str	r3, [r7, #32]
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	61ba      	str	r2, [r7, #24]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	fa92 f2a2 	rbit	r2, r2
 8002b26:	617a      	str	r2, [r7, #20]
  return result;
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	fab2 f282 	clz	r2, r2
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	f042 0220 	orr.w	r2, r2, #32
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	f002 021f 	and.w	r2, r2, #31
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e079      	b.n	8002c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f023 0203 	bic.w	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	491a      	ldr	r1, [pc, #104]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b5c:	f7fe fbec 	bl	8001338 <HAL_GetTick>
 8002b60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b64:	f7fe fbe8 	bl	8001338 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e061      	b.n	8002c3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 020c 	and.w	r2, r3, #12
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d1eb      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_ClockConfig+0x25c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d214      	bcs.n	8002bc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_RCC_ClockConfig+0x25c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 0207 	bic.w	r2, r3, #7
 8002ba2:	4906      	ldr	r1, [pc, #24]	; (8002bbc <HAL_RCC_ClockConfig+0x25c>)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <HAL_RCC_ClockConfig+0x25c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e040      	b.n	8002c3e <HAL_RCC_ClockConfig+0x2de>
 8002bbc:	40022000 	.word	0x40022000
 8002bc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd0:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_RCC_ClockConfig+0x2e8>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	491a      	ldr	r1, [pc, #104]	; (8002c48 <HAL_RCC_ClockConfig+0x2e8>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bee:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <HAL_RCC_ClockConfig+0x2e8>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4912      	ldr	r1, [pc, #72]	; (8002c48 <HAL_RCC_ClockConfig+0x2e8>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c02:	f000 f829 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c06:	4601      	mov	r1, r0
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <HAL_RCC_ClockConfig+0x2e8>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c10:	22f0      	movs	r2, #240	; 0xf0
 8002c12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	fa92 f2a2 	rbit	r2, r2
 8002c1a:	60fa      	str	r2, [r7, #12]
  return result;
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	fab2 f282 	clz	r2, r2
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	40d3      	lsrs	r3, r2
 8002c26:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <HAL_RCC_ClockConfig+0x2ec>)
 8002c28:	5cd3      	ldrb	r3, [r2, r3]
 8002c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c2e:	4a08      	ldr	r2, [pc, #32]	; (8002c50 <HAL_RCC_ClockConfig+0x2f0>)
 8002c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <HAL_RCC_ClockConfig+0x2f4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fb3a 	bl	80012b0 <HAL_InitTick>
  
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3778      	adds	r7, #120	; 0x78
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	08004a68 	.word	0x08004a68
 8002c50:	20000004 	.word	0x20000004
 8002c54:	20000008 	.word	0x20000008

08002c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b08b      	sub	sp, #44	; 0x2c
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	2300      	movs	r3, #0
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c72:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d002      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x30>
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d003      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0x36>
 8002c86:	e03f      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c88:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c8a:	623b      	str	r3, [r7, #32]
      break;
 8002c8c:	e03f      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	fa92 f2a2 	rbit	r2, r2
 8002ca0:	607a      	str	r2, [r7, #4]
  return result;
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	fab2 f282 	clz	r2, r2
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	40d3      	lsrs	r3, r2
 8002cac:	4a1d      	ldr	r2, [pc, #116]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cae:	5cd3      	ldrb	r3, [r2, r3]
 8002cb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	220f      	movs	r2, #15
 8002cbc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	fa92 f2a2 	rbit	r2, r2
 8002cc4:	60fa      	str	r2, [r7, #12]
  return result;
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	fab2 f282 	clz	r2, r2
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	40d3      	lsrs	r3, r2
 8002cd0:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cd2:	5cd3      	ldrb	r3, [r2, r3]
 8002cd4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf0:	e007      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cf2:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	fb02 f303 	mul.w	r3, r2, r3
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	623b      	str	r3, [r7, #32]
      break;
 8002d06:	e002      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d0a:	623b      	str	r3, [r7, #32]
      break;
 8002d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	372c      	adds	r7, #44	; 0x2c
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	007a1200 	.word	0x007a1200
 8002d24:	08004a78 	.word	0x08004a78
 8002d28:	08004a88 	.word	0x08004a88

08002d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b092      	sub	sp, #72	; 0x48
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 80d4 	beq.w	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d50:	4b4e      	ldr	r3, [pc, #312]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10e      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5c:	4b4b      	ldr	r3, [pc, #300]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	4a4a      	ldr	r2, [pc, #296]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d66:	61d3      	str	r3, [r2, #28]
 8002d68:	4b48      	ldr	r3, [pc, #288]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7a:	4b45      	ldr	r3, [pc, #276]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d118      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d86:	4b42      	ldr	r3, [pc, #264]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a41      	ldr	r2, [pc, #260]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d92:	f7fe fad1 	bl	8001338 <HAL_GetTick>
 8002d96:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	e008      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9a:	f7fe facd 	bl	8001338 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b64      	cmp	r3, #100	; 0x64
 8002da6:	d901      	bls.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e1d6      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	4b38      	ldr	r3, [pc, #224]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002db8:	4b34      	ldr	r3, [pc, #208]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8084 	beq.w	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d07c      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dd8:	4b2c      	ldr	r3, [pc, #176]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002de6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b26      	ldr	r3, [pc, #152]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	461a      	mov	r2, r3
 8002e02:	2301      	movs	r3, #1
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b1d      	ldr	r3, [pc, #116]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	461a      	mov	r2, r3
 8002e26:	2300      	movs	r3, #0
 8002e28:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e2a:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e2e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d04b      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fa7d 	bl	8001338 <HAL_GetTick>
 8002e3e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	e00a      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e42:	f7fe fa79 	bl	8001338 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e180      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
 8002e64:	2302      	movs	r3, #2
 8002e66:	623b      	str	r3, [r7, #32]
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	61fb      	str	r3, [r7, #28]
  return result;
 8002e70:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	095b      	lsrs	r3, r3, #5
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f043 0302 	orr.w	r3, r3, #2
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d108      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e86:	4b01      	ldr	r3, [pc, #4]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	e00d      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40007000 	.word	0x40007000
 8002e94:	10908100 	.word	0x10908100
 8002e98:	2302      	movs	r3, #2
 8002e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	4b9a      	ldr	r3, [pc, #616]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	613a      	str	r2, [r7, #16]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	fa92 f2a2 	rbit	r2, r2
 8002eb2:	60fa      	str	r2, [r7, #12]
  return result;
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	fab2 f282 	clz	r2, r2
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	f002 021f 	and.w	r2, r2, #31
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0b7      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ed2:	4b8f      	ldr	r3, [pc, #572]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	498c      	ldr	r1, [pc, #560]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ee4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eec:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	4a87      	ldr	r2, [pc, #540]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f04:	4b82      	ldr	r3, [pc, #520]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	f023 0203 	bic.w	r2, r3, #3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	497f      	ldr	r1, [pc, #508]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f22:	4b7b      	ldr	r3, [pc, #492]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	4978      	ldr	r1, [pc, #480]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f40:	4b73      	ldr	r3, [pc, #460]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	4970      	ldr	r1, [pc, #448]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f5e:	4b6c      	ldr	r3, [pc, #432]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f023 0210 	bic.w	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4969      	ldr	r1, [pc, #420]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f7c:	4b64      	ldr	r3, [pc, #400]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	4961      	ldr	r1, [pc, #388]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f9a:	4b5d      	ldr	r3, [pc, #372]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f023 0220 	bic.w	r2, r3, #32
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	495a      	ldr	r1, [pc, #360]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fb8:	4b55      	ldr	r3, [pc, #340]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	4952      	ldr	r1, [pc, #328]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fd6:	4b4e      	ldr	r3, [pc, #312]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	494b      	ldr	r1, [pc, #300]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ff4:	4b46      	ldr	r3, [pc, #280]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	4943      	ldr	r1, [pc, #268]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003012:	4b3f      	ldr	r3, [pc, #252]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	493c      	ldr	r1, [pc, #240]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003030:	4b37      	ldr	r3, [pc, #220]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	4934      	ldr	r1, [pc, #208]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800304e:	4b30      	ldr	r3, [pc, #192]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	492d      	ldr	r1, [pc, #180]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800305c:	4313      	orrs	r3, r2
 800305e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800306c:	4b28      	ldr	r3, [pc, #160]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003078:	4925      	ldr	r1, [pc, #148]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800307a:	4313      	orrs	r3, r2
 800307c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800308a:	4b21      	ldr	r3, [pc, #132]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	491e      	ldr	r1, [pc, #120]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003098:	4313      	orrs	r3, r2
 800309a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80030a8:	4b19      	ldr	r3, [pc, #100]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	4916      	ldr	r1, [pc, #88]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d008      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d2:	490f      	ldr	r1, [pc, #60]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	4907      	ldr	r1, [pc, #28]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00c      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003102:	4b03      	ldr	r3, [pc, #12]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	e002      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000
 8003114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003116:	4913      	ldr	r1, [pc, #76]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003118:	4313      	orrs	r3, r2
 800311a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003128:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003134:	490b      	ldr	r1, [pc, #44]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003136:	4313      	orrs	r3, r2
 8003138:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003146:	4b07      	ldr	r3, [pc, #28]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003152:	4904      	ldr	r1, [pc, #16]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003154:	4313      	orrs	r3, r2
 8003156:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3748      	adds	r7, #72	; 0x48
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000

08003168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e09d      	b.n	80032b6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2b00      	cmp	r3, #0
 8003180:	d108      	bne.n	8003194 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800318a:	d009      	beq.n	80031a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	61da      	str	r2, [r3, #28]
 8003192:	e005      	b.n	80031a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fd ff88 	bl	80010d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031e0:	d902      	bls.n	80031e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	e002      	b.n	80031ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80031f6:	d007      	beq.n	8003208 <HAL_SPI_Init+0xa0>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003200:	d002      	beq.n	8003208 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324a:	ea42 0103 	orr.w	r1, r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	0c1b      	lsrs	r3, r3, #16
 8003264:	f003 0204 	and.w	r2, r3, #4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003284:	ea42 0103 	orr.w	r1, r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b088      	sub	sp, #32
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	4613      	mov	r3, r2
 80032cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_SPI_Transmit+0x22>
 80032dc:	2302      	movs	r3, #2
 80032de:	e158      	b.n	8003592 <HAL_SPI_Transmit+0x2d4>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032e8:	f7fe f826 	bl	8001338 <HAL_GetTick>
 80032ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d002      	beq.n	8003304 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
 8003300:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003302:	e13d      	b.n	8003580 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_SPI_Transmit+0x52>
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003314:	e134      	b.n	8003580 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2203      	movs	r2, #3
 800331a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	88fa      	ldrh	r2, [r7, #6]
 800332e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	88fa      	ldrh	r2, [r7, #6]
 8003334:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003360:	d10f      	bne.n	8003382 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003370:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003380:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d007      	beq.n	80033a0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800339e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033a8:	d94b      	bls.n	8003442 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_SPI_Transmit+0xfa>
 80033b2:	8afb      	ldrh	r3, [r7, #22]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d13e      	bne.n	8003436 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	881a      	ldrh	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	1c9a      	adds	r2, r3, #2
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033dc:	e02b      	b.n	8003436 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d112      	bne.n	8003412 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	881a      	ldrh	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	1c9a      	adds	r2, r3, #2
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003410:	e011      	b.n	8003436 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003412:	f7fd ff91 	bl	8001338 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d803      	bhi.n	800342a <HAL_SPI_Transmit+0x16c>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d102      	bne.n	8003430 <HAL_SPI_Transmit+0x172>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003434:	e0a4      	b.n	8003580 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ce      	bne.n	80033de <HAL_SPI_Transmit+0x120>
 8003440:	e07c      	b.n	800353c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_SPI_Transmit+0x192>
 800344a:	8afb      	ldrh	r3, [r7, #22]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d170      	bne.n	8003532 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d912      	bls.n	8003480 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	881a      	ldrh	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	1c9a      	adds	r2, r3, #2
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b02      	subs	r3, #2
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800347e:	e058      	b.n	8003532 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	7812      	ldrb	r2, [r2, #0]
 800348c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80034a6:	e044      	b.n	8003532 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d12b      	bne.n	800350e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d912      	bls.n	80034e6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	881a      	ldrh	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	1c9a      	adds	r2, r3, #2
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b02      	subs	r3, #2
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034e4:	e025      	b.n	8003532 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	330c      	adds	r3, #12
 80034f0:	7812      	ldrb	r2, [r2, #0]
 80034f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800350c:	e011      	b.n	8003532 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800350e:	f7fd ff13 	bl	8001338 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d803      	bhi.n	8003526 <HAL_SPI_Transmit+0x268>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d102      	bne.n	800352c <HAL_SPI_Transmit+0x26e>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003530:	e026      	b.n	8003580 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1b5      	bne.n	80034a8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	6839      	ldr	r1, [r7, #0]
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 fce3 	bl	8003f0c <SPI_EndRxTxTransaction>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	e000      	b.n	8003580 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800357e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003590:	7ffb      	ldrb	r3, [r7, #31]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b088      	sub	sp, #32
 800359e:	af02      	add	r7, sp, #8
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035b6:	d112      	bne.n	80035de <HAL_SPI_Receive+0x44>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10e      	bne.n	80035de <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2204      	movs	r2, #4
 80035c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80035c8:	88fa      	ldrh	r2, [r7, #6]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	4613      	mov	r3, r2
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f910 	bl	80037fa <HAL_SPI_TransmitReceive>
 80035da:	4603      	mov	r3, r0
 80035dc:	e109      	b.n	80037f2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_SPI_Receive+0x52>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e102      	b.n	80037f2 <HAL_SPI_Receive+0x258>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035f4:	f7fd fea0 	bl	8001338 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b01      	cmp	r3, #1
 8003604:	d002      	beq.n	800360c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003606:	2302      	movs	r3, #2
 8003608:	75fb      	strb	r3, [r7, #23]
    goto error;
 800360a:	e0e9      	b.n	80037e0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_SPI_Receive+0x7e>
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800361c:	e0e0      	b.n	80037e0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2204      	movs	r2, #4
 8003622:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	88fa      	ldrh	r2, [r7, #6]
 8003636:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	88fa      	ldrh	r2, [r7, #6]
 800363e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003668:	d908      	bls.n	800367c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	e007      	b.n	800368c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800368a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003694:	d10f      	bne.n	80036b6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d007      	beq.n	80036d4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036dc:	d867      	bhi.n	80037ae <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80036de:	e030      	b.n	8003742 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d117      	bne.n	800371e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f103 020c 	add.w	r2, r3, #12
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	7812      	ldrb	r2, [r2, #0]
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800371c:	e011      	b.n	8003742 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800371e:	f7fd fe0b 	bl	8001338 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d803      	bhi.n	8003736 <HAL_SPI_Receive+0x19c>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d102      	bne.n	800373c <HAL_SPI_Receive+0x1a2>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003740:	e04e      	b.n	80037e0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1c8      	bne.n	80036e0 <HAL_SPI_Receive+0x146>
 800374e:	e034      	b.n	80037ba <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b01      	cmp	r3, #1
 800375c:	d115      	bne.n	800378a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	b292      	uxth	r2, r2
 800376a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	1c9a      	adds	r2, r3, #2
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003788:	e011      	b.n	80037ae <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800378a:	f7fd fdd5 	bl	8001338 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d803      	bhi.n	80037a2 <HAL_SPI_Receive+0x208>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d102      	bne.n	80037a8 <HAL_SPI_Receive+0x20e>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d102      	bne.n	80037ae <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80037ac:	e018      	b.n	80037e0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1ca      	bne.n	8003750 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	6839      	ldr	r1, [r7, #0]
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fb4c 	bl	8003e5c <SPI_EndRxTransaction>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	75fb      	strb	r3, [r7, #23]
 80037dc:	e000      	b.n	80037e0 <HAL_SPI_Receive+0x246>
  }

error :
 80037de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b08a      	sub	sp, #40	; 0x28
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003808:	2301      	movs	r3, #1
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x26>
 800381c:	2302      	movs	r3, #2
 800381e:	e1fb      	b.n	8003c18 <HAL_SPI_TransmitReceive+0x41e>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003828:	f7fd fd86 	bl	8001338 <HAL_GetTick>
 800382c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003834:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800383c:	887b      	ldrh	r3, [r7, #2]
 800383e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003840:	887b      	ldrh	r3, [r7, #2]
 8003842:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003844:	7efb      	ldrb	r3, [r7, #27]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d00e      	beq.n	8003868 <HAL_SPI_TransmitReceive+0x6e>
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003850:	d106      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d102      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x66>
 800385a:	7efb      	ldrb	r3, [r7, #27]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d003      	beq.n	8003868 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003860:	2302      	movs	r3, #2
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003866:	e1cd      	b.n	8003c04 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_SPI_TransmitReceive+0x80>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_SPI_TransmitReceive+0x80>
 8003874:	887b      	ldrh	r3, [r7, #2]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003880:	e1c0      	b.n	8003c04 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b04      	cmp	r3, #4
 800388c:	d003      	beq.n	8003896 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2205      	movs	r2, #5
 8003892:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	887a      	ldrh	r2, [r7, #2]
 80038a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	887a      	ldrh	r2, [r7, #2]
 80038ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	887a      	ldrh	r2, [r7, #2]
 80038c2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038d8:	d802      	bhi.n	80038e0 <HAL_SPI_TransmitReceive+0xe6>
 80038da:	8a3b      	ldrh	r3, [r7, #16]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d908      	bls.n	80038f2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038ee:	605a      	str	r2, [r3, #4]
 80038f0:	e007      	b.n	8003902 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003900:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b40      	cmp	r3, #64	; 0x40
 800390e:	d007      	beq.n	8003920 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800391e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003928:	d97c      	bls.n	8003a24 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_SPI_TransmitReceive+0x13e>
 8003932:	8a7b      	ldrh	r3, [r7, #18]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d169      	bne.n	8003a0c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	881a      	ldrh	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	1c9a      	adds	r2, r3, #2
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800395c:	e056      	b.n	8003a0c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b02      	cmp	r3, #2
 800396a:	d11b      	bne.n	80039a4 <HAL_SPI_TransmitReceive+0x1aa>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d016      	beq.n	80039a4 <HAL_SPI_TransmitReceive+0x1aa>
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	2b01      	cmp	r3, #1
 800397a:	d113      	bne.n	80039a4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	881a      	ldrh	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	1c9a      	adds	r2, r3, #2
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d11c      	bne.n	80039ec <HAL_SPI_TransmitReceive+0x1f2>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d016      	beq.n	80039ec <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	b292      	uxth	r2, r2
 80039ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	1c9a      	adds	r2, r3, #2
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039e8:	2301      	movs	r3, #1
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039ec:	f7fd fca4 	bl	8001338 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d807      	bhi.n	8003a0c <HAL_SPI_TransmitReceive+0x212>
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	d003      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a0a:	e0fb      	b.n	8003c04 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1a3      	bne.n	800395e <HAL_SPI_TransmitReceive+0x164>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d19d      	bne.n	800395e <HAL_SPI_TransmitReceive+0x164>
 8003a22:	e0df      	b.n	8003be4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_SPI_TransmitReceive+0x23a>
 8003a2c:	8a7b      	ldrh	r3, [r7, #18]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	f040 80cb 	bne.w	8003bca <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d912      	bls.n	8003a64 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	881a      	ldrh	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	1c9a      	adds	r2, r3, #2
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b02      	subs	r3, #2
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a62:	e0b2      	b.n	8003bca <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	7812      	ldrb	r2, [r2, #0]
 8003a70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a8a:	e09e      	b.n	8003bca <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d134      	bne.n	8003b04 <HAL_SPI_TransmitReceive+0x30a>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d02f      	beq.n	8003b04 <HAL_SPI_TransmitReceive+0x30a>
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d12c      	bne.n	8003b04 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d912      	bls.n	8003ada <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	881a      	ldrh	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	1c9a      	adds	r2, r3, #2
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b02      	subs	r3, #2
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ad8:	e012      	b.n	8003b00 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	7812      	ldrb	r2, [r2, #0]
 8003ae6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d148      	bne.n	8003ba4 <HAL_SPI_TransmitReceive+0x3aa>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d042      	beq.n	8003ba4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d923      	bls.n	8003b72 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	b292      	uxth	r2, r2
 8003b36:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b02      	subs	r3, #2
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d81f      	bhi.n	8003ba0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b6e:	605a      	str	r2, [r3, #4]
 8003b70:	e016      	b.n	8003ba0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f103 020c 	add.w	r2, r3, #12
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	7812      	ldrb	r2, [r2, #0]
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ba4:	f7fd fbc8 	bl	8001338 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d803      	bhi.n	8003bbc <HAL_SPI_TransmitReceive+0x3c2>
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d102      	bne.n	8003bc2 <HAL_SPI_TransmitReceive+0x3c8>
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d103      	bne.n	8003bca <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003bc8:	e01c      	b.n	8003c04 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f47f af5b 	bne.w	8003a8c <HAL_SPI_TransmitReceive+0x292>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f47f af54 	bne.w	8003a8c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f98f 	bl	8003f0c <SPI_EndRxTxTransaction>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d006      	beq.n	8003c02 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	661a      	str	r2, [r3, #96]	; 0x60
 8003c00:	e000      	b.n	8003c04 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003c02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3728      	adds	r7, #40	; 0x28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c30:	f7fd fb82 	bl	8001338 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c40:	f7fd fb7a 	bl	8001338 <HAL_GetTick>
 8003c44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c46:	4b39      	ldr	r3, [pc, #228]	; (8003d2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	015b      	lsls	r3, r3, #5
 8003c4c:	0d1b      	lsrs	r3, r3, #20
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c56:	e054      	b.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5e:	d050      	beq.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c60:	f7fd fb6a 	bl	8001338 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d902      	bls.n	8003c76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d13d      	bne.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c8e:	d111      	bne.n	8003cb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c98:	d004      	beq.n	8003ca4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca2:	d107      	bne.n	8003cb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cbc:	d10f      	bne.n	8003cde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e017      	b.n	8003d22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	bf0c      	ite	eq
 8003d12:	2301      	moveq	r3, #1
 8003d14:	2300      	movne	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	461a      	mov	r2, r3
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d19b      	bne.n	8003c58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000004 	.word	0x20000004

08003d30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	; 0x28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d42:	f7fd faf9 	bl	8001338 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	4413      	add	r3, r2
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d52:	f7fd faf1 	bl	8001338 <HAL_GetTick>
 8003d56:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d60:	4b3d      	ldr	r3, [pc, #244]	; (8003e58 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	00da      	lsls	r2, r3, #3
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	0d1b      	lsrs	r3, r3, #20
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d78:	e060      	b.n	8003e3c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d80:	d107      	bne.n	8003d92 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d98:	d050      	beq.n	8003e3c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d9a:	f7fd facd 	bl	8001338 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d902      	bls.n	8003db0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d13d      	bne.n	8003e2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc8:	d111      	bne.n	8003dee <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd2:	d004      	beq.n	8003dde <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ddc:	d107      	bne.n	8003dee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df6:	d10f      	bne.n	8003e18 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e010      	b.n	8003e4e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d196      	bne.n	8003d7a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3728      	adds	r7, #40	; 0x28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000004 	.word	0x20000004

08003e5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e70:	d111      	bne.n	8003e96 <SPI_EndRxTransaction+0x3a>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e7a:	d004      	beq.n	8003e86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e84:	d107      	bne.n	8003e96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e94:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2180      	movs	r1, #128	; 0x80
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff febd 	bl	8003c20 <SPI_WaitFlagStateUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d007      	beq.n	8003ebc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb0:	f043 0220 	orr.w	r2, r3, #32
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e023      	b.n	8003f04 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ec4:	d11d      	bne.n	8003f02 <SPI_EndRxTransaction+0xa6>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ece:	d004      	beq.n	8003eda <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed8:	d113      	bne.n	8003f02 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f7ff ff22 	bl	8003d30 <SPI_WaitFifoStateUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d007      	beq.n	8003f02 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef6:	f043 0220 	orr.w	r2, r3, #32
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e000      	b.n	8003f04 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff ff03 	bl	8003d30 <SPI_WaitFifoStateUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e027      	b.n	8003f90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2200      	movs	r2, #0
 8003f48:	2180      	movs	r1, #128	; 0x80
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff fe68 	bl	8003c20 <SPI_WaitFlagStateUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5a:	f043 0220 	orr.w	r2, r3, #32
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e014      	b.n	8003f90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f7ff fedc 	bl	8003d30 <SPI_WaitFifoStateUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f82:	f043 0220 	orr.w	r2, r3, #32
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e000      	b.n	8003f90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e049      	b.n	800403e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fd f8ca 	bl	8001158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	f000 fac0 	bl	800455c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	d001      	beq.n	8004060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e04f      	b.n	8004100 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a23      	ldr	r2, [pc, #140]	; (800410c <HAL_TIM_Base_Start_IT+0xc4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d01d      	beq.n	80040be <HAL_TIM_Base_Start_IT+0x76>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408a:	d018      	beq.n	80040be <HAL_TIM_Base_Start_IT+0x76>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <HAL_TIM_Base_Start_IT+0xc8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <HAL_TIM_Base_Start_IT+0x76>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1e      	ldr	r2, [pc, #120]	; (8004114 <HAL_TIM_Base_Start_IT+0xcc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00e      	beq.n	80040be <HAL_TIM_Base_Start_IT+0x76>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <HAL_TIM_Base_Start_IT+0xd0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d009      	beq.n	80040be <HAL_TIM_Base_Start_IT+0x76>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1b      	ldr	r2, [pc, #108]	; (800411c <HAL_TIM_Base_Start_IT+0xd4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d004      	beq.n	80040be <HAL_TIM_Base_Start_IT+0x76>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a19      	ldr	r2, [pc, #100]	; (8004120 <HAL_TIM_Base_Start_IT+0xd8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d115      	bne.n	80040ea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	4b17      	ldr	r3, [pc, #92]	; (8004124 <HAL_TIM_Base_Start_IT+0xdc>)
 80040c6:	4013      	ands	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2b06      	cmp	r3, #6
 80040ce:	d015      	beq.n	80040fc <HAL_TIM_Base_Start_IT+0xb4>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d6:	d011      	beq.n	80040fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e8:	e008      	b.n	80040fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e000      	b.n	80040fe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40013400 	.word	0x40013400
 800411c:	40014000 	.word	0x40014000
 8004120:	40015000 	.word	0x40015000
 8004124:	00010007 	.word	0x00010007

08004128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b02      	cmp	r3, #2
 800413c:	d122      	bne.n	8004184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b02      	cmp	r3, #2
 800414a:	d11b      	bne.n	8004184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0202 	mvn.w	r2, #2
 8004154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f9d8 	bl	8004520 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f9ca 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f9db 	bl	8004534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b04      	cmp	r3, #4
 8004190:	d122      	bne.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b04      	cmp	r3, #4
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0204 	mvn.w	r2, #4
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f9ae 	bl	8004520 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f9a0 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f9b1 	bl	8004534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d122      	bne.n	800422c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d11b      	bne.n	800422c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0208 	mvn.w	r2, #8
 80041fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2204      	movs	r2, #4
 8004202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f984 	bl	8004520 <HAL_TIM_IC_CaptureCallback>
 8004218:	e005      	b.n	8004226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f976 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f987 	bl	8004534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b10      	cmp	r3, #16
 8004238:	d122      	bne.n	8004280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b10      	cmp	r3, #16
 8004246:	d11b      	bne.n	8004280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0210 	mvn.w	r2, #16
 8004250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2208      	movs	r2, #8
 8004256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f95a 	bl	8004520 <HAL_TIM_IC_CaptureCallback>
 800426c:	e005      	b.n	800427a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f94c 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f95d 	bl	8004534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b01      	cmp	r3, #1
 800428c:	d10e      	bne.n	80042ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b01      	cmp	r3, #1
 800429a:	d107      	bne.n	80042ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0201 	mvn.w	r2, #1
 80042a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f926 	bl	80044f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b6:	2b80      	cmp	r3, #128	; 0x80
 80042b8:	d10e      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c4:	2b80      	cmp	r3, #128	; 0x80
 80042c6:	d107      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fb10 	bl	80048f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e6:	d10e      	bne.n	8004306 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b80      	cmp	r3, #128	; 0x80
 80042f4:	d107      	bne.n	8004306 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fb03 	bl	800490c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d10e      	bne.n	8004332 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d107      	bne.n	8004332 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800432a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f90b 	bl	8004548 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b20      	cmp	r3, #32
 800433e:	d10e      	bne.n	800435e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b20      	cmp	r3, #32
 800434c:	d107      	bne.n	800435e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f06f 0220 	mvn.w	r2, #32
 8004356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fac3 	bl	80048e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_TIM_ConfigClockSource+0x1c>
 800437e:	2302      	movs	r3, #2
 8004380:	e0b6      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x18a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2202      	movs	r2, #2
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043be:	d03e      	beq.n	800443e <HAL_TIM_ConfigClockSource+0xd8>
 80043c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c4:	f200 8087 	bhi.w	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043cc:	f000 8086 	beq.w	80044dc <HAL_TIM_ConfigClockSource+0x176>
 80043d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d4:	d87f      	bhi.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 80043d6:	2b70      	cmp	r3, #112	; 0x70
 80043d8:	d01a      	beq.n	8004410 <HAL_TIM_ConfigClockSource+0xaa>
 80043da:	2b70      	cmp	r3, #112	; 0x70
 80043dc:	d87b      	bhi.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 80043de:	2b60      	cmp	r3, #96	; 0x60
 80043e0:	d050      	beq.n	8004484 <HAL_TIM_ConfigClockSource+0x11e>
 80043e2:	2b60      	cmp	r3, #96	; 0x60
 80043e4:	d877      	bhi.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 80043e6:	2b50      	cmp	r3, #80	; 0x50
 80043e8:	d03c      	beq.n	8004464 <HAL_TIM_ConfigClockSource+0xfe>
 80043ea:	2b50      	cmp	r3, #80	; 0x50
 80043ec:	d873      	bhi.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d058      	beq.n	80044a4 <HAL_TIM_ConfigClockSource+0x13e>
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	d86f      	bhi.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 80043f6:	2b30      	cmp	r3, #48	; 0x30
 80043f8:	d064      	beq.n	80044c4 <HAL_TIM_ConfigClockSource+0x15e>
 80043fa:	2b30      	cmp	r3, #48	; 0x30
 80043fc:	d86b      	bhi.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d060      	beq.n	80044c4 <HAL_TIM_ConfigClockSource+0x15e>
 8004402:	2b20      	cmp	r3, #32
 8004404:	d867      	bhi.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d05c      	beq.n	80044c4 <HAL_TIM_ConfigClockSource+0x15e>
 800440a:	2b10      	cmp	r3, #16
 800440c:	d05a      	beq.n	80044c4 <HAL_TIM_ConfigClockSource+0x15e>
 800440e:	e062      	b.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	6899      	ldr	r1, [r3, #8]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f000 f9b4 	bl	800478c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004432:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	609a      	str	r2, [r3, #8]
      break;
 800443c:	e04f      	b.n	80044de <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6899      	ldr	r1, [r3, #8]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f000 f99d 	bl	800478c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004460:	609a      	str	r2, [r3, #8]
      break;
 8004462:	e03c      	b.n	80044de <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6859      	ldr	r1, [r3, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	461a      	mov	r2, r3
 8004472:	f000 f911 	bl	8004698 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2150      	movs	r1, #80	; 0x50
 800447c:	4618      	mov	r0, r3
 800447e:	f000 f96a 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 8004482:	e02c      	b.n	80044de <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	6859      	ldr	r1, [r3, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	461a      	mov	r2, r3
 8004492:	f000 f930 	bl	80046f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2160      	movs	r1, #96	; 0x60
 800449c:	4618      	mov	r0, r3
 800449e:	f000 f95a 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 80044a2:	e01c      	b.n	80044de <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	461a      	mov	r2, r3
 80044b2:	f000 f8f1 	bl	8004698 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2140      	movs	r1, #64	; 0x40
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 f94a 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 80044c2:	e00c      	b.n	80044de <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4619      	mov	r1, r3
 80044ce:	4610      	mov	r0, r2
 80044d0:	f000 f941 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 80044d4:	e003      	b.n	80044de <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
      break;
 80044da:	e000      	b.n	80044de <HAL_TIM_ConfigClockSource+0x178>
      break;
 80044dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a42      	ldr	r2, [pc, #264]	; (8004678 <TIM_Base_SetConfig+0x11c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d013      	beq.n	800459c <TIM_Base_SetConfig+0x40>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457a:	d00f      	beq.n	800459c <TIM_Base_SetConfig+0x40>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a3f      	ldr	r2, [pc, #252]	; (800467c <TIM_Base_SetConfig+0x120>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00b      	beq.n	800459c <TIM_Base_SetConfig+0x40>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a3e      	ldr	r2, [pc, #248]	; (8004680 <TIM_Base_SetConfig+0x124>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d007      	beq.n	800459c <TIM_Base_SetConfig+0x40>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a3d      	ldr	r2, [pc, #244]	; (8004684 <TIM_Base_SetConfig+0x128>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d003      	beq.n	800459c <TIM_Base_SetConfig+0x40>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a3c      	ldr	r2, [pc, #240]	; (8004688 <TIM_Base_SetConfig+0x12c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d108      	bne.n	80045ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a31      	ldr	r2, [pc, #196]	; (8004678 <TIM_Base_SetConfig+0x11c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01f      	beq.n	80045f6 <TIM_Base_SetConfig+0x9a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045bc:	d01b      	beq.n	80045f6 <TIM_Base_SetConfig+0x9a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a2e      	ldr	r2, [pc, #184]	; (800467c <TIM_Base_SetConfig+0x120>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d017      	beq.n	80045f6 <TIM_Base_SetConfig+0x9a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a2d      	ldr	r2, [pc, #180]	; (8004680 <TIM_Base_SetConfig+0x124>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d013      	beq.n	80045f6 <TIM_Base_SetConfig+0x9a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a2c      	ldr	r2, [pc, #176]	; (8004684 <TIM_Base_SetConfig+0x128>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00f      	beq.n	80045f6 <TIM_Base_SetConfig+0x9a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a2c      	ldr	r2, [pc, #176]	; (800468c <TIM_Base_SetConfig+0x130>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00b      	beq.n	80045f6 <TIM_Base_SetConfig+0x9a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <TIM_Base_SetConfig+0x134>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d007      	beq.n	80045f6 <TIM_Base_SetConfig+0x9a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a2a      	ldr	r2, [pc, #168]	; (8004694 <TIM_Base_SetConfig+0x138>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d003      	beq.n	80045f6 <TIM_Base_SetConfig+0x9a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a25      	ldr	r2, [pc, #148]	; (8004688 <TIM_Base_SetConfig+0x12c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d108      	bne.n	8004608 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a12      	ldr	r2, [pc, #72]	; (8004678 <TIM_Base_SetConfig+0x11c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d013      	beq.n	800465c <TIM_Base_SetConfig+0x100>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a13      	ldr	r2, [pc, #76]	; (8004684 <TIM_Base_SetConfig+0x128>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00f      	beq.n	800465c <TIM_Base_SetConfig+0x100>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a13      	ldr	r2, [pc, #76]	; (800468c <TIM_Base_SetConfig+0x130>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00b      	beq.n	800465c <TIM_Base_SetConfig+0x100>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a12      	ldr	r2, [pc, #72]	; (8004690 <TIM_Base_SetConfig+0x134>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d007      	beq.n	800465c <TIM_Base_SetConfig+0x100>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a11      	ldr	r2, [pc, #68]	; (8004694 <TIM_Base_SetConfig+0x138>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d003      	beq.n	800465c <TIM_Base_SetConfig+0x100>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a0c      	ldr	r2, [pc, #48]	; (8004688 <TIM_Base_SetConfig+0x12c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d103      	bne.n	8004664 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	615a      	str	r2, [r3, #20]
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40012c00 	.word	0x40012c00
 800467c:	40000400 	.word	0x40000400
 8004680:	40000800 	.word	0x40000800
 8004684:	40013400 	.word	0x40013400
 8004688:	40015000 	.word	0x40015000
 800468c:	40014000 	.word	0x40014000
 8004690:	40014400 	.word	0x40014400
 8004694:	40014800 	.word	0x40014800

08004698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f023 0201 	bic.w	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f023 030a 	bic.w	r3, r3, #10
 80046d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	621a      	str	r2, [r3, #32]
}
 80046ea:	bf00      	nop
 80046ec:	371c      	adds	r7, #28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b087      	sub	sp, #28
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	f023 0210 	bic.w	r2, r3, #16
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	031b      	lsls	r3, r3, #12
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004732:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	621a      	str	r2, [r3, #32]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004756:	b480      	push	{r7}
 8004758:	b085      	sub	sp, #20
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	f043 0307 	orr.w	r3, r3, #7
 8004778:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	609a      	str	r2, [r3, #8]
}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	021a      	lsls	r2, r3, #8
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	609a      	str	r2, [r3, #8]
}
 80047c0:	bf00      	nop
 80047c2:	371c      	adds	r7, #28
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e06d      	b.n	80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a30      	ldr	r2, [pc, #192]	; (80048cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d009      	beq.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a2f      	ldr	r2, [pc, #188]	; (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d004      	beq.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a2d      	ldr	r2, [pc, #180]	; (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d108      	bne.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004828:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1e      	ldr	r2, [pc, #120]	; (80048cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d01d      	beq.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004860:	d018      	beq.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1c      	ldr	r2, [pc, #112]	; (80048d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d013      	beq.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1a      	ldr	r2, [pc, #104]	; (80048dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00e      	beq.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a15      	ldr	r2, [pc, #84]	; (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d009      	beq.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a16      	ldr	r2, [pc, #88]	; (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d004      	beq.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a11      	ldr	r2, [pc, #68]	; (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d10c      	bne.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800489a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	40012c00 	.word	0x40012c00
 80048d0:	40013400 	.word	0x40013400
 80048d4:	40015000 	.word	0x40015000
 80048d8:	40000400 	.word	0x40000400
 80048dc:	40000800 	.word	0x40000800
 80048e0:	40014000 	.word	0x40014000

080048e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <__libc_init_array>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	4d0d      	ldr	r5, [pc, #52]	; (8004958 <__libc_init_array+0x38>)
 8004924:	4c0d      	ldr	r4, [pc, #52]	; (800495c <__libc_init_array+0x3c>)
 8004926:	1b64      	subs	r4, r4, r5
 8004928:	10a4      	asrs	r4, r4, #2
 800492a:	2600      	movs	r6, #0
 800492c:	42a6      	cmp	r6, r4
 800492e:	d109      	bne.n	8004944 <__libc_init_array+0x24>
 8004930:	4d0b      	ldr	r5, [pc, #44]	; (8004960 <__libc_init_array+0x40>)
 8004932:	4c0c      	ldr	r4, [pc, #48]	; (8004964 <__libc_init_array+0x44>)
 8004934:	f000 f82e 	bl	8004994 <_init>
 8004938:	1b64      	subs	r4, r4, r5
 800493a:	10a4      	asrs	r4, r4, #2
 800493c:	2600      	movs	r6, #0
 800493e:	42a6      	cmp	r6, r4
 8004940:	d105      	bne.n	800494e <__libc_init_array+0x2e>
 8004942:	bd70      	pop	{r4, r5, r6, pc}
 8004944:	f855 3b04 	ldr.w	r3, [r5], #4
 8004948:	4798      	blx	r3
 800494a:	3601      	adds	r6, #1
 800494c:	e7ee      	b.n	800492c <__libc_init_array+0xc>
 800494e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004952:	4798      	blx	r3
 8004954:	3601      	adds	r6, #1
 8004956:	e7f2      	b.n	800493e <__libc_init_array+0x1e>
 8004958:	08004a98 	.word	0x08004a98
 800495c:	08004a98 	.word	0x08004a98
 8004960:	08004a98 	.word	0x08004a98
 8004964:	08004a9c 	.word	0x08004a9c

08004968 <memcpy>:
 8004968:	440a      	add	r2, r1
 800496a:	4291      	cmp	r1, r2
 800496c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004970:	d100      	bne.n	8004974 <memcpy+0xc>
 8004972:	4770      	bx	lr
 8004974:	b510      	push	{r4, lr}
 8004976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800497a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800497e:	4291      	cmp	r1, r2
 8004980:	d1f9      	bne.n	8004976 <memcpy+0xe>
 8004982:	bd10      	pop	{r4, pc}

08004984 <memset>:
 8004984:	4402      	add	r2, r0
 8004986:	4603      	mov	r3, r0
 8004988:	4293      	cmp	r3, r2
 800498a:	d100      	bne.n	800498e <memset+0xa>
 800498c:	4770      	bx	lr
 800498e:	f803 1b01 	strb.w	r1, [r3], #1
 8004992:	e7f9      	b.n	8004988 <memset+0x4>

08004994 <_init>:
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	bf00      	nop
 8004998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499a:	bc08      	pop	{r3}
 800499c:	469e      	mov	lr, r3
 800499e:	4770      	bx	lr

080049a0 <_fini>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	bf00      	nop
 80049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a6:	bc08      	pop	{r3}
 80049a8:	469e      	mov	lr, r3
 80049aa:	4770      	bx	lr
