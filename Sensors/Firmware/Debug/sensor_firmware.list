
sensor_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e2c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ff0  08003ff0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003ff0  08003ff0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ff0  08003ff0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ff0  08003ff0  00013ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000000e0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d7c5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000218c  00000000  00000000  0002d805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  0002f998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c58  00000000  00000000  000306f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002214c  00000000  00000000  00031350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff5d  00000000  00000000  0005349c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc266  00000000  00000000  000633f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f65f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003728  00000000  00000000  0012f6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003fa8 	.word	0x08003fa8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003fa8 	.word	0x08003fa8

080001d4 <RFM69_initialize>:
// internal
static void RFM69_sendFrame(uint8_t toAddress, const void* buffer, uint8_t size, bool requestACK, bool sendACK);


bool RFM69_initialize(uint8_t freqBand, uint8_t nodeID, uint16_t networkID)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08e      	sub	sp, #56	; 0x38
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	80bb      	strh	r3, [r7, #4]
  const uint8_t CONFIG[][2] =
 80001e6:	f240 4301 	movw	r3, #1025	; 0x401
 80001ea:	813b      	strh	r3, [r7, #8]
 80001ec:	2302      	movs	r3, #2
 80001ee:	817b      	strh	r3, [r7, #10]
 80001f0:	f240 2303 	movw	r3, #515	; 0x203
 80001f4:	81bb      	strh	r3, [r7, #12]
 80001f6:	f244 0304 	movw	r3, #16388	; 0x4004
 80001fa:	81fb      	strh	r3, [r7, #14]
 80001fc:	f240 3305 	movw	r3, #773	; 0x305
 8000200:	823b      	strh	r3, [r7, #16]
 8000202:	f243 3306 	movw	r3, #13062	; 0x3306
 8000206:	827b      	strh	r3, [r7, #18]
 8000208:	2307      	movs	r3, #7
 800020a:	753b      	strb	r3, [r7, #20]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	2b1f      	cmp	r3, #31
 8000210:	d00b      	beq.n	800022a <RFM69_initialize+0x56>
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	2b2b      	cmp	r3, #43	; 0x2b
 8000216:	d006      	beq.n	8000226 <RFM69_initialize+0x52>
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	2b56      	cmp	r3, #86	; 0x56
 800021c:	d101      	bne.n	8000222 <RFM69_initialize+0x4e>
 800021e:	23d9      	movs	r3, #217	; 0xd9
 8000220:	e004      	b.n	800022c <RFM69_initialize+0x58>
 8000222:	23e4      	movs	r3, #228	; 0xe4
 8000224:	e002      	b.n	800022c <RFM69_initialize+0x58>
 8000226:	236c      	movs	r3, #108	; 0x6c
 8000228:	e000      	b.n	800022c <RFM69_initialize+0x58>
 800022a:	234e      	movs	r3, #78	; 0x4e
  const uint8_t CONFIG[][2] =
 800022c:	757b      	strb	r3, [r7, #21]
 800022e:	2308      	movs	r3, #8
 8000230:	75bb      	strb	r3, [r7, #22]
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b1f      	cmp	r3, #31
 8000236:	d00b      	beq.n	8000250 <RFM69_initialize+0x7c>
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	2b2b      	cmp	r3, #43	; 0x2b
 800023c:	d006      	beq.n	800024c <RFM69_initialize+0x78>
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	2b56      	cmp	r3, #86	; 0x56
 8000242:	d101      	bne.n	8000248 <RFM69_initialize+0x74>
 8000244:	2300      	movs	r3, #0
 8000246:	e004      	b.n	8000252 <RFM69_initialize+0x7e>
 8000248:	23c0      	movs	r3, #192	; 0xc0
 800024a:	e002      	b.n	8000252 <RFM69_initialize+0x7e>
 800024c:	2340      	movs	r3, #64	; 0x40
 800024e:	e000      	b.n	8000252 <RFM69_initialize+0x7e>
 8000250:	23c0      	movs	r3, #192	; 0xc0
  const uint8_t CONFIG[][2] =
 8000252:	75fb      	strb	r3, [r7, #23]
 8000254:	2309      	movs	r3, #9
 8000256:	833b      	strh	r3, [r7, #24]
 8000258:	f244 2319 	movw	r3, #16921	; 0x4219
 800025c:	837b      	strh	r3, [r7, #26]
 800025e:	f244 0325 	movw	r3, #16421	; 0x4025
 8000262:	83bb      	strh	r3, [r7, #28]
 8000264:	f240 7326 	movw	r3, #1830	; 0x726
 8000268:	83fb      	strh	r3, [r7, #30]
 800026a:	f241 0328 	movw	r3, #4136	; 0x1028
 800026e:	843b      	strh	r3, [r7, #32]
 8000270:	f64d 4329 	movw	r3, #56361	; 0xdc29
 8000274:	847b      	strh	r3, [r7, #34]	; 0x22
 8000276:	f648 032e 	movw	r3, #34862	; 0x882e
 800027a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800027c:	232f      	movs	r3, #47	; 0x2f
 800027e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* 0x26 */ { REG_DIOMAPPING2, RF_DIOMAPPING2_CLKOUT_OFF }, // DIO5 ClkOut disable for power saving
    /* 0x28 */ { REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN }, // writing to this bit ensures that the FIFO & status flags are reset
    /* 0x29 */ { REG_RSSITHRESH, 220 }, // must be set to dBm = (-Sensitivity / 2), default is 0xE4 = 228 so -114dBm
    ///* 0x2D */ { REG_PREAMBLELSB, RF_PREAMBLESIZE_LSB_VALUE } // default 3 preamble bytes 0xAAAAAA
    /* 0x2E */ { REG_SYNCCONFIG, RF_SYNC_ON | RF_SYNC_FIFOFILL_AUTO | RF_SYNC_SIZE_2 | RF_SYNC_TOL_0 },
    /* 0x2F */ { REG_SYNCVALUE1, (uint8_t)(networkID & 0x00FF) },  // NETWORK ID lower 8 bits
 8000282:	88bb      	ldrh	r3, [r7, #4]
 8000284:	b2db      	uxtb	r3, r3
  const uint8_t CONFIG[][2] =
 8000286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800028a:	2330      	movs	r3, #48	; 0x30
 800028c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    /* 0x30 */ { REG_SYNCVALUE2, (uint8_t)(networkID >> 8) },      // NETWORK ID higher 8 bits
 8000290:	88bb      	ldrh	r3, [r7, #4]
 8000292:	0a1b      	lsrs	r3, r3, #8
 8000294:	b29b      	uxth	r3, r3
 8000296:	b2db      	uxtb	r3, r3
  const uint8_t CONFIG[][2] =
 8000298:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800029c:	f249 0337 	movw	r3, #36919	; 0x9037
 80002a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80002a2:	f244 2338 	movw	r3, #16952	; 0x4238
 80002a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80002a8:	f648 733c 	movw	r3, #36668	; 0x8f3c
 80002ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80002ae:	f241 233d 	movw	r3, #4669	; 0x123d
 80002b2:	863b      	strh	r3, [r7, #48]	; 0x30
 80002b4:	f243 036f 	movw	r3, #12399	; 0x306f
 80002b8:	867b      	strh	r3, [r7, #50]	; 0x32
 80002ba:	23ff      	movs	r3, #255	; 0xff
 80002bc:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode for Fading Margin Improvement, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
  uint8_t i;

  RFM69_SetCSPin(HIGH);
 80002be:	2001      	movs	r0, #1
 80002c0:	f000 fad8 	bl	8000874 <RFM69_SetCSPin>
  {
    RFM69_writeReg(REG_SYNCVALUE1, 0x55);
  }
  while (RFM69_readReg(REG_SYNCVALUE1) != 0x55 && !Timeout_IsTimeout1());
*/
  for (i = 0; CONFIG[i][0] != 255; i++)
 80002c4:	2300      	movs	r3, #0
 80002c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80002ca:	e016      	b.n	80002fa <RFM69_initialize+0x126>
  {
    RFM69_writeReg(CONFIG[i][0], CONFIG[i][1]);
 80002cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	3338      	adds	r3, #56	; 0x38
 80002d4:	443b      	add	r3, r7
 80002d6:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 80002da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	3338      	adds	r3, #56	; 0x38
 80002e2:	443b      	add	r3, r7
 80002e4:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 80002e8:	4619      	mov	r1, r3
 80002ea:	4610      	mov	r0, r2
 80002ec:	f000 fa04 	bl	80006f8 <RFM69_writeReg>
  for (i = 0; CONFIG[i][0] != 255; i++)
 80002f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002f4:	3301      	adds	r3, #1
 80002f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80002fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	3338      	adds	r3, #56	; 0x38
 8000302:	443b      	add	r3, r7
 8000304:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8000308:	2bff      	cmp	r3, #255	; 0xff
 800030a:	d1df      	bne.n	80002cc <RFM69_initialize+0xf8>

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  //encrypt(0);

  RFM69_setHighPower(ISRFM69HW); // called regardless if it's a RFM69W or RFM69HW
 800030c:	2001      	movs	r0, #1
 800030e:	f000 f99f 	bl	8000650 <RFM69_setHighPower>
  RFM69_setMode(RF69_MODE_STANDBY);
 8000312:	2001      	movs	r0, #1
 8000314:	f000 f824 	bl	8000360 <RFM69_setMode>
  Timeout_SetTimeout1(50);
 8000318:	2032      	movs	r0, #50	; 0x32
 800031a:	f000 fadb 	bl	80008d4 <Timeout_SetTimeout1>
  while (((RFM69_readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && !Timeout_IsTimeout1()); // wait for ModeReady
 800031e:	bf00      	nop
 8000320:	2027      	movs	r0, #39	; 0x27
 8000322:	f000 f9cf 	bl	80006c4 <RFM69_readReg>
 8000326:	4603      	mov	r3, r0
 8000328:	b25b      	sxtb	r3, r3
 800032a:	2b00      	cmp	r3, #0
 800032c:	db07      	blt.n	800033e <RFM69_initialize+0x16a>
 800032e:	f000 fac1 	bl	80008b4 <Timeout_IsTimeout1>
 8000332:	4603      	mov	r3, r0
 8000334:	f083 0301 	eor.w	r3, r3, #1
 8000338:	b2db      	uxtb	r3, r3
 800033a:	2b00      	cmp	r3, #0
 800033c:	d1f0      	bne.n	8000320 <RFM69_initialize+0x14c>
  if (Timeout_IsTimeout1())
 800033e:	f000 fab9 	bl	80008b4 <Timeout_IsTimeout1>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <RFM69_initialize+0x178>
  {
    return false;
 8000348:	2300      	movs	r3, #0
 800034a:	e003      	b.n	8000354 <RFM69_initialize+0x180>
  }

  _address = nodeID;
 800034c:	4a03      	ldr	r2, [pc, #12]	; (800035c <RFM69_initialize+0x188>)
 800034e:	79bb      	ldrb	r3, [r7, #6]
 8000350:	7013      	strb	r3, [r2, #0]
  return true;
 8000352:	2301      	movs	r3, #1
}
 8000354:	4618      	mov	r0, r3
 8000356:	3738      	adds	r7, #56	; 0x38
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000034 	.word	0x20000034

08000360 <RFM69_setMode>:
  }
  RFM69_setMode(oldMode);
}

void RFM69_setMode(uint8_t newMode)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
  if (newMode == _mode)
 800036a:	4b42      	ldr	r3, [pc, #264]	; (8000474 <RFM69_setMode+0x114>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	b2db      	uxtb	r3, r3
 8000370:	79fa      	ldrb	r2, [r7, #7]
 8000372:	429a      	cmp	r2, r3
 8000374:	d077      	beq.n	8000466 <RFM69_setMode+0x106>
    return;

  switch (newMode) {
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b04      	cmp	r3, #4
 800037a:	d876      	bhi.n	800046a <RFM69_setMode+0x10a>
 800037c:	a201      	add	r2, pc, #4	; (adr r2, 8000384 <RFM69_setMode+0x24>)
 800037e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000382:	bf00      	nop
 8000384:	0800042d 	.word	0x0800042d
 8000388:	0800040b 	.word	0x0800040b
 800038c:	080003e9 	.word	0x080003e9
 8000390:	080003c1 	.word	0x080003c1
 8000394:	08000399 	.word	0x08000399
    case RF69_MODE_TX:
      RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
 8000398:	2001      	movs	r0, #1
 800039a:	f000 f993 	bl	80006c4 <RFM69_readReg>
 800039e:	4603      	mov	r3, r0
 80003a0:	b25b      	sxtb	r3, r3
 80003a2:	f023 031c 	bic.w	r3, r3, #28
 80003a6:	b25b      	sxtb	r3, r3
 80003a8:	f043 030c 	orr.w	r3, r3, #12
 80003ac:	b25b      	sxtb	r3, r3
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	4619      	mov	r1, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	f000 f9a0 	bl	80006f8 <RFM69_writeReg>
      if (ISRFM69HW) RFM69_setHighPowerRegs(true);
 80003b8:	2001      	movs	r0, #1
 80003ba:	f000 f966 	bl	800068a <RFM69_setHighPowerRegs>
      break;
 80003be:	e041      	b.n	8000444 <RFM69_setMode+0xe4>
    case RF69_MODE_RX:
      RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
 80003c0:	2001      	movs	r0, #1
 80003c2:	f000 f97f 	bl	80006c4 <RFM69_readReg>
 80003c6:	4603      	mov	r3, r0
 80003c8:	b25b      	sxtb	r3, r3
 80003ca:	f023 031c 	bic.w	r3, r3, #28
 80003ce:	b25b      	sxtb	r3, r3
 80003d0:	f043 0310 	orr.w	r3, r3, #16
 80003d4:	b25b      	sxtb	r3, r3
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	4619      	mov	r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	f000 f98c 	bl	80006f8 <RFM69_writeReg>
      if (ISRFM69HW) RFM69_setHighPowerRegs(false);
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f952 	bl	800068a <RFM69_setHighPowerRegs>
      break;
 80003e6:	e02d      	b.n	8000444 <RFM69_setMode+0xe4>
    case RF69_MODE_SYNTH:
      RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
 80003e8:	2001      	movs	r0, #1
 80003ea:	f000 f96b 	bl	80006c4 <RFM69_readReg>
 80003ee:	4603      	mov	r3, r0
 80003f0:	b25b      	sxtb	r3, r3
 80003f2:	f023 031c 	bic.w	r3, r3, #28
 80003f6:	b25b      	sxtb	r3, r3
 80003f8:	f043 0308 	orr.w	r3, r3, #8
 80003fc:	b25b      	sxtb	r3, r3
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	4619      	mov	r1, r3
 8000402:	2001      	movs	r0, #1
 8000404:	f000 f978 	bl	80006f8 <RFM69_writeReg>
      break;
 8000408:	e01c      	b.n	8000444 <RFM69_setMode+0xe4>
    case RF69_MODE_STANDBY:
      RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
 800040a:	2001      	movs	r0, #1
 800040c:	f000 f95a 	bl	80006c4 <RFM69_readReg>
 8000410:	4603      	mov	r3, r0
 8000412:	b25b      	sxtb	r3, r3
 8000414:	f023 031c 	bic.w	r3, r3, #28
 8000418:	b25b      	sxtb	r3, r3
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	b25b      	sxtb	r3, r3
 8000420:	b2db      	uxtb	r3, r3
 8000422:	4619      	mov	r1, r3
 8000424:	2001      	movs	r0, #1
 8000426:	f000 f967 	bl	80006f8 <RFM69_writeReg>
      break;
 800042a:	e00b      	b.n	8000444 <RFM69_setMode+0xe4>
    case RF69_MODE_SLEEP:
      RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
 800042c:	2001      	movs	r0, #1
 800042e:	f000 f949 	bl	80006c4 <RFM69_readReg>
 8000432:	4603      	mov	r3, r0
 8000434:	f023 031c 	bic.w	r3, r3, #28
 8000438:	b2db      	uxtb	r3, r3
 800043a:	4619      	mov	r1, r3
 800043c:	2001      	movs	r0, #1
 800043e:	f000 f95b 	bl	80006f8 <RFM69_writeReg>
      break;
 8000442:	bf00      	nop
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (RFM69_readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
 8000444:	bf00      	nop
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <RFM69_setMode+0x114>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	b2db      	uxtb	r3, r3
 800044c:	2b00      	cmp	r3, #0
 800044e:	d106      	bne.n	800045e <RFM69_setMode+0xfe>
 8000450:	2027      	movs	r0, #39	; 0x27
 8000452:	f000 f937 	bl	80006c4 <RFM69_readReg>
 8000456:	4603      	mov	r3, r0
 8000458:	b25b      	sxtb	r3, r3
 800045a:	2b00      	cmp	r3, #0
 800045c:	daf3      	bge.n	8000446 <RFM69_setMode+0xe6>

  _mode = newMode;
 800045e:	4a05      	ldr	r2, [pc, #20]	; (8000474 <RFM69_setMode+0x114>)
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	7013      	strb	r3, [r2, #0]
 8000464:	e002      	b.n	800046c <RFM69_setMode+0x10c>
    return;
 8000466:	bf00      	nop
 8000468:	e000      	b.n	800046c <RFM69_setMode+0x10c>
      return;
 800046a:	bf00      	nop
}
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000000 	.word	0x20000000

08000478 <RFM69_receive>:
  //uint32_t now = millis();
  while (!RFM69_canSend() /*&& millis() - now < RF69_CSMA_LIMIT_MS*/) RFM69_receiveDone();
  RFM69_sendFrame(toAddress, buffer, bufferSize, requestACK, false);
}

bool RFM69_receive(uint8_t* buffer, uint8_t bufferSize){
 8000478:	b590      	push	{r4, r7, lr}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	460b      	mov	r3, r1
 8000482:	70fb      	strb	r3, [r7, #3]
	if (_mode == RF69_MODE_RX && (RFM69_readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
 8000484:	4b49      	ldr	r3, [pc, #292]	; (80005ac <RFM69_receive+0x134>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b03      	cmp	r3, #3
 800048c:	f040 808a 	bne.w	80005a4 <RFM69_receive+0x12c>
 8000490:	2028      	movs	r0, #40	; 0x28
 8000492:	f000 f917 	bl	80006c4 <RFM69_readReg>
 8000496:	4603      	mov	r3, r0
 8000498:	f003 0304 	and.w	r3, r3, #4
 800049c:	2b00      	cmp	r3, #0
 800049e:	f000 8081 	beq.w	80005a4 <RFM69_receive+0x12c>
	  {
	    uint8_t CTLbyte;
	    //rssi = RFM69_readRSSI(true);
	    RFM69_setMode(RF69_MODE_STANDBY);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f7ff ff5c 	bl	8000360 <RFM69_setMode>
	    RFM69_select();
 80004a8:	f000 f941 	bl	800072e <RFM69_select>
	    SPI_transfer8(REG_FIFO & 0x7F);
 80004ac:	2000      	movs	r0, #0
 80004ae:	f000 f9f3 	bl	8000898 <SPI_transfer8>
	    payloadLen = SPI_transfer8(0);
 80004b2:	2000      	movs	r0, #0
 80004b4:	f000 f9f0 	bl	8000898 <SPI_transfer8>
 80004b8:	4603      	mov	r3, r0
 80004ba:	461a      	mov	r2, r3
 80004bc:	4b3c      	ldr	r3, [pc, #240]	; (80005b0 <RFM69_receive+0x138>)
 80004be:	701a      	strb	r2, [r3, #0]
	    payloadLen = payloadLen > 66 ? 66 : payloadLen; // precaution
 80004c0:	4b3b      	ldr	r3, [pc, #236]	; (80005b0 <RFM69_receive+0x138>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	2b42      	cmp	r3, #66	; 0x42
 80004c8:	d803      	bhi.n	80004d2 <RFM69_receive+0x5a>
 80004ca:	4b39      	ldr	r3, [pc, #228]	; (80005b0 <RFM69_receive+0x138>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	e000      	b.n	80004d4 <RFM69_receive+0x5c>
 80004d2:	2342      	movs	r3, #66	; 0x42
 80004d4:	4a36      	ldr	r2, [pc, #216]	; (80005b0 <RFM69_receive+0x138>)
 80004d6:	7013      	strb	r3, [r2, #0]
	    targetID = SPI_transfer8(0);
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 f9dd 	bl	8000898 <SPI_transfer8>
 80004de:	4603      	mov	r3, r0
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b34      	ldr	r3, [pc, #208]	; (80005b4 <RFM69_receive+0x13c>)
 80004e4:	701a      	strb	r2, [r3, #0]
	    if(!(_promiscuousMode || targetID == _address || targetID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
 80004e6:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <RFM69_receive+0x140>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	f083 0301 	eor.w	r3, r3, #1
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d00b      	beq.n	800050c <RFM69_receive+0x94>
 80004f4:	4b2f      	ldr	r3, [pc, #188]	; (80005b4 <RFM69_receive+0x13c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	4b30      	ldr	r3, [pc, #192]	; (80005bc <RFM69_receive+0x144>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d004      	beq.n	800050c <RFM69_receive+0x94>
 8000502:	4b2c      	ldr	r3, [pc, #176]	; (80005b4 <RFM69_receive+0x13c>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	b2db      	uxtb	r3, r3
 8000508:	2bff      	cmp	r3, #255	; 0xff
 800050a:	d104      	bne.n	8000516 <RFM69_receive+0x9e>
	       || payloadLen < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
 800050c:	4b28      	ldr	r3, [pc, #160]	; (80005b0 <RFM69_receive+0x138>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	2b02      	cmp	r3, #2
 8000514:	d808      	bhi.n	8000528 <RFM69_receive+0xb0>
	    {
	      payloadLen = 0;
 8000516:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <RFM69_receive+0x138>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	      RFM69_unselect();
 800051c:	f000 f910 	bl	8000740 <RFM69_unselect>
	      RFM69_receiveBegin();
 8000520:	f000 f854 	bl	80005cc <RFM69_receiveBegin>
	      return false;
 8000524:	2300      	movs	r3, #0
 8000526:	e03d      	b.n	80005a4 <RFM69_receive+0x12c>
	    }

	    bufferSize = payloadLen - 3;
 8000528:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <RFM69_receive+0x138>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	3b03      	subs	r3, #3
 8000530:	70fb      	strb	r3, [r7, #3]
	    senderID = SPI_transfer8(0);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f9b0 	bl	8000898 <SPI_transfer8>
 8000538:	4603      	mov	r3, r0
 800053a:	461a      	mov	r2, r3
 800053c:	4b20      	ldr	r3, [pc, #128]	; (80005c0 <RFM69_receive+0x148>)
 800053e:	701a      	strb	r2, [r3, #0]
	    CTLbyte = SPI_transfer8(0);
 8000540:	2000      	movs	r0, #0
 8000542:	f000 f9a9 	bl	8000898 <SPI_transfer8>
 8000546:	4603      	mov	r3, r0
 8000548:	73bb      	strb	r3, [r7, #14]

	    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
 800054a:	7bbb      	ldrb	r3, [r7, #14]
 800054c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <RFM69_receive+0x14c>)
 8000554:	701a      	strb	r2, [r3, #0]
	    ACK_Requested = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
 8000556:	7bbb      	ldrb	r3, [r7, #14]
 8000558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <RFM69_receive+0x150>)
 8000560:	701a      	strb	r2, [r3, #0]

	    //interruptHook(CTLbyte);     // TWS: hook to derived class interrupt function

	    for (uint8_t i = 0; i < bufferSize; i++)
 8000562:	2300      	movs	r3, #0
 8000564:	73fb      	strb	r3, [r7, #15]
 8000566:	e00a      	b.n	800057e <RFM69_receive+0x106>
	    {
	    	buffer[i] = SPI_transfer8(0);
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	18d4      	adds	r4, r2, r3
 800056e:	2000      	movs	r0, #0
 8000570:	f000 f992 	bl	8000898 <SPI_transfer8>
 8000574:	4603      	mov	r3, r0
 8000576:	7023      	strb	r3, [r4, #0]
	    for (uint8_t i = 0; i < bufferSize; i++)
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	3301      	adds	r3, #1
 800057c:	73fb      	strb	r3, [r7, #15]
 800057e:	7bfa      	ldrb	r2, [r7, #15]
 8000580:	78fb      	ldrb	r3, [r7, #3]
 8000582:	429a      	cmp	r2, r3
 8000584:	d3f0      	bcc.n	8000568 <RFM69_receive+0xf0>
	    }
	    if (bufferSize < RF69_MAX_DATA_LEN) buffer[bufferSize] = 0; // add null at end of string
 8000586:	78fb      	ldrb	r3, [r7, #3]
 8000588:	2b3c      	cmp	r3, #60	; 0x3c
 800058a:	d804      	bhi.n	8000596 <RFM69_receive+0x11e>
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
	    RFM69_unselect();
 8000596:	f000 f8d3 	bl	8000740 <RFM69_unselect>
	    RFM69_setMode(RF69_MODE_RX);
 800059a:	2003      	movs	r0, #3
 800059c:	f7ff fee0 	bl	8000360 <RFM69_setMode>
	    return true;
 80005a0:	2301      	movs	r3, #1
 80005a2:	e7ff      	b.n	80005a4 <RFM69_receive+0x12c>
	  }
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd90      	pop	{r4, r7, pc}
 80005ac:	20000000 	.word	0x20000000
 80005b0:	2000002f 	.word	0x2000002f
 80005b4:	2000002e 	.word	0x2000002e
 80005b8:	20000035 	.word	0x20000035
 80005bc:	20000034 	.word	0x20000034
 80005c0:	2000002d 	.word	0x2000002d
 80005c4:	20000031 	.word	0x20000031
 80005c8:	20000030 	.word	0x20000030

080005cc <RFM69_receiveBegin>:
// internal function
//void RFM69::isr0() { selfPointer->interruptHandler(); }

// internal function
void RFM69_receiveBegin()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  datalen = 0;
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <RFM69_receiveBegin+0x68>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
  senderID = 0;
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <RFM69_receiveBegin+0x6c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
  targetID = 0;
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <RFM69_receiveBegin+0x70>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
  payloadLen = 0;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <RFM69_receiveBegin+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
  ACK_Requested = 0;
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <RFM69_receiveBegin+0x78>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
  ACK_RECEIVED = 0;
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <RFM69_receiveBegin+0x7c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
  rssi = 0;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <RFM69_receiveBegin+0x80>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	801a      	strh	r2, [r3, #0]
  if (RFM69_readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
 80005fa:	2028      	movs	r0, #40	; 0x28
 80005fc:	f000 f862 	bl	80006c4 <RFM69_readReg>
 8000600:	4603      	mov	r3, r0
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	2b00      	cmp	r3, #0
 8000608:	d00a      	beq.n	8000620 <RFM69_receiveBegin+0x54>
    RFM69_writeReg(REG_PACKETCONFIG2, (RFM69_readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
 800060a:	203d      	movs	r0, #61	; 0x3d
 800060c:	f000 f85a 	bl	80006c4 <RFM69_readReg>
 8000610:	4603      	mov	r3, r0
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	b2db      	uxtb	r3, r3
 8000618:	4619      	mov	r1, r3
 800061a:	203d      	movs	r0, #61	; 0x3d
 800061c:	f000 f86c 	bl	80006f8 <RFM69_writeReg>
  RFM69_writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
 8000620:	2140      	movs	r1, #64	; 0x40
 8000622:	2025      	movs	r0, #37	; 0x25
 8000624:	f000 f868 	bl	80006f8 <RFM69_writeReg>
  RFM69_setMode(RF69_MODE_RX);
 8000628:	2003      	movs	r0, #3
 800062a:	f7ff fe99 	bl	8000360 <RFM69_setMode>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000002c 	.word	0x2000002c
 8000638:	2000002d 	.word	0x2000002d
 800063c:	2000002e 	.word	0x2000002e
 8000640:	2000002f 	.word	0x2000002f
 8000644:	20000030 	.word	0x20000030
 8000648:	20000031 	.word	0x20000031
 800064c:	20000032 	.word	0x20000032

08000650 <RFM69_setHighPower>:
  _promiscuousMode = onOff;
  //RFM69_writeReg(REG_PACKETCONFIG1, (RFM69_readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// for RFM69HW only: you must call RFM69_setHighPower(true) after initialize() or else transmission won't work
void RFM69_setHighPower(bool onOff) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
  RFM69_writeReg(REG_OCP, ISRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
 800065a:	210f      	movs	r1, #15
 800065c:	2013      	movs	r0, #19
 800065e:	f000 f84b 	bl	80006f8 <RFM69_writeReg>
  if (ISRFM69HW) // turning ON
    RFM69_writeReg(REG_PALEVEL, (RFM69_readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
 8000662:	2011      	movs	r0, #17
 8000664:	f000 f82e 	bl	80006c4 <RFM69_readReg>
 8000668:	4603      	mov	r3, r0
 800066a:	b25b      	sxtb	r3, r3
 800066c:	f003 031f 	and.w	r3, r3, #31
 8000670:	b25b      	sxtb	r3, r3
 8000672:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000676:	b25b      	sxtb	r3, r3
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4619      	mov	r1, r3
 800067c:	2011      	movs	r0, #17
 800067e:	f000 f83b 	bl	80006f8 <RFM69_writeReg>
  else
    RFM69_writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <RFM69_setHighPowerRegs>:

// internal function
void RFM69_setHighPowerRegs(bool onOff)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	4603      	mov	r3, r0
 8000692:	71fb      	strb	r3, [r7, #7]
  RFM69_writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <RFM69_setHighPowerRegs+0x14>
 800069a:	235d      	movs	r3, #93	; 0x5d
 800069c:	e000      	b.n	80006a0 <RFM69_setHighPowerRegs+0x16>
 800069e:	2355      	movs	r3, #85	; 0x55
 80006a0:	4619      	mov	r1, r3
 80006a2:	205a      	movs	r0, #90	; 0x5a
 80006a4:	f000 f828 	bl	80006f8 <RFM69_writeReg>
  RFM69_writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <RFM69_setHighPowerRegs+0x28>
 80006ae:	237c      	movs	r3, #124	; 0x7c
 80006b0:	e000      	b.n	80006b4 <RFM69_setHighPowerRegs+0x2a>
 80006b2:	2370      	movs	r3, #112	; 0x70
 80006b4:	4619      	mov	r1, r3
 80006b6:	205c      	movs	r0, #92	; 0x5c
 80006b8:	f000 f81e 	bl	80006f8 <RFM69_writeReg>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <RFM69_readReg>:
  RFM69_writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((RFM69_readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

uint8_t RFM69_readReg(uint8_t addr)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
  uint8_t regval;
  RFM69_select();
 80006ce:	f000 f82e 	bl	800072e <RFM69_select>
  SPI_transfer8(addr & 0x7F);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f8dc 	bl	8000898 <SPI_transfer8>
  regval = SPI_transfer8(0);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 f8d9 	bl	8000898 <SPI_transfer8>
 80006e6:	4603      	mov	r3, r0
 80006e8:	73fb      	strb	r3, [r7, #15]
  RFM69_unselect();
 80006ea:	f000 f829 	bl	8000740 <RFM69_unselect>
  return regval;
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <RFM69_writeReg>:

void RFM69_writeReg(uint8_t addr, uint8_t value)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	4613      	mov	r3, r2
 8000706:	71bb      	strb	r3, [r7, #6]
  RFM69_select();
 8000708:	f000 f811 	bl	800072e <RFM69_select>
  SPI_transfer8(addr | 0x80);
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f8bf 	bl	8000898 <SPI_transfer8>
  SPI_transfer8(value);
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f8bb 	bl	8000898 <SPI_transfer8>
  RFM69_unselect();
 8000722:	f000 f80d 	bl	8000740 <RFM69_unselect>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <RFM69_select>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void RFM69_select()
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
  noInterrupts();
 8000732:	f000 f890 	bl	8000856 <noInterrupts>
  RFM69_SetCSPin(LOW);
 8000736:	2000      	movs	r0, #0
 8000738:	f000 f89c 	bl	8000874 <RFM69_SetCSPin>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <RFM69_unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void RFM69_unselect()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  RFM69_SetCSPin(HIGH);
 8000744:	2001      	movs	r0, #1
 8000746:	f000 f895 	bl	8000874 <RFM69_SetCSPin>
  interrupts();
 800074a:	f000 f88b 	bl	8000864 <interrupts>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <SPI_RX_TX>:
{
	HAL_SPI_Transmit(&hspi2, &WrPara, 1, HAL_MAX_DELAY);
}

uint8_t SPI_RX_TX(uint8_t WrPara)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af02      	add	r7, sp, #8
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	uint8_t receive;
	HAL_SPI_TransmitReceive(&hspi2, &WrPara, &receive, 1, HAL_MAX_DELAY);
 800075e:	f107 020f 	add.w	r2, r7, #15
 8000762:	1df9      	adds	r1, r7, #7
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2301      	movs	r3, #1
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <SPI_RX_TX+0x28>)
 800076e:	f002 fc16 	bl	8002f9e <HAL_SPI_TransmitReceive>
	return receive;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2000003c 	.word	0x2000003c

08000780 <packet_deserializeData>:
		data->size = 5;
		break;
	}
}

void packet_deserializeData(SWS_Packet* packet, DataBuffer* data){
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
	packet->idSensor = data->data[0];
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	701a      	strb	r2, [r3, #0]
	packet->idBase = data->data[1];
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	785a      	ldrb	r2, [r3, #1]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	705a      	strb	r2, [r3, #1]
	packet->packetID = data->data[2];
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	789a      	ldrb	r2, [r3, #2]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	709a      	strb	r2, [r3, #2]
	packet->packetType = data->data[3];
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	78da      	ldrb	r2, [r3, #3]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	70da      	strb	r2, [r3, #3]

	switch(packet->packetType){
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	78db      	ldrb	r3, [r3, #3]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	dc02      	bgt.n	80007b8 <packet_deserializeData+0x38>
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	dc03      	bgt.n	80007be <packet_deserializeData+0x3e>
				break;
		}

		break;
	default:
		break;
 80007b6:	e048      	b.n	800084a <packet_deserializeData+0xca>
	switch(packet->packetType){
 80007b8:	2b05      	cmp	r3, #5
 80007ba:	d005      	beq.n	80007c8 <packet_deserializeData+0x48>
		break;
 80007bc:	e045      	b.n	800084a <packet_deserializeData+0xca>
		packet->data[0] = data->data[4];
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	791a      	ldrb	r2, [r3, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	711a      	strb	r2, [r3, #4]
		break;
 80007c6:	e040      	b.n	800084a <packet_deserializeData+0xca>
		switch(*(packet->data)){
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	2b03      	cmp	r3, #3
 80007ce:	d038      	beq.n	8000842 <packet_deserializeData+0xc2>
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	dc38      	bgt.n	8000846 <packet_deserializeData+0xc6>
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d002      	beq.n	80007de <packet_deserializeData+0x5e>
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d011      	beq.n	8000800 <packet_deserializeData+0x80>
				break;
 80007dc:	e033      	b.n	8000846 <packet_deserializeData+0xc6>
				packet->data[0] = data->data[4];
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	791a      	ldrb	r2, [r3, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	711a      	strb	r2, [r3, #4]
				packet->data[1] = data->data[5];
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	795a      	ldrb	r2, [r3, #5]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	715a      	strb	r2, [r3, #5]
				packet->data[2] = data->data[5];
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	795a      	ldrb	r2, [r3, #5]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	719a      	strb	r2, [r3, #6]
				packet->data[3] = data->data[7];
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	79da      	ldrb	r2, [r3, #7]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	71da      	strb	r2, [r3, #7]
				break;
 80007fe:	e023      	b.n	8000848 <packet_deserializeData+0xc8>
				packet->data[0] = data->data[4];
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	791a      	ldrb	r2, [r3, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	711a      	strb	r2, [r3, #4]
				packet->data[1] = data->data[5];
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	795a      	ldrb	r2, [r3, #5]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	715a      	strb	r2, [r3, #5]
				packet->data[2] = data->data[6];
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	799a      	ldrb	r2, [r3, #6]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	719a      	strb	r2, [r3, #6]
				packet->data[3] = data->data[7];
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	79da      	ldrb	r2, [r3, #7]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	71da      	strb	r2, [r3, #7]
				packet->data[4] = data->data[8];
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	7a1a      	ldrb	r2, [r3, #8]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	721a      	strb	r2, [r3, #8]
				packet->data[5] = data->data[9];
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	7a5a      	ldrb	r2, [r3, #9]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	725a      	strb	r2, [r3, #9]
				packet->data[6] = data->data[10];
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	7a9a      	ldrb	r2, [r3, #10]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	729a      	strb	r2, [r3, #10]
				packet->data[7] = data->data[11];
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	7ada      	ldrb	r2, [r3, #11]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	72da      	strb	r2, [r3, #11]
				break;
 8000840:	e002      	b.n	8000848 <packet_deserializeData+0xc8>
				break;
 8000842:	bf00      	nop
 8000844:	e000      	b.n	8000848 <packet_deserializeData+0xc8>
				break;
 8000846:	bf00      	nop
		break;
 8000848:	bf00      	nop
	}
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <noInterrupts>:
#include "stm32f3xx_hal.h"
#include "spi.h"

static volatile uint32_t timeoutSet;

void noInterrupts(void){
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <interrupts>:

void interrupts(void){
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <RFM69_SetCSPin>:

void RFM69_SetCSPin(bool state){
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	461a      	mov	r2, r3
 8000882:	2180      	movs	r1, #128	; 0x80
 8000884:	4803      	ldr	r0, [pc, #12]	; (8000894 <RFM69_SetCSPin+0x20>)
 8000886:	f000 fe6f 	bl	8001568 <HAL_GPIO_WritePin>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	48000800 	.word	0x48000800

08000898 <SPI_transfer8>:

bool RFM69_ReadDIO0Pin(void){
	return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
}       // function to read GPIO connected to RFM69 DIO0 (RFM69 interrupt signalling)

uint8_t SPI_transfer8(uint8_t data){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	return SPI_RX_TX(data);
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff55 	bl	8000754 <SPI_RX_TX>
 80008aa:	4603      	mov	r3, r0
}     // function to transfer 1byte on SPI with return
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <Timeout_IsTimeout1>:

void Serialprint(char* c){

}            // function to print to serial port a string

bool Timeout_IsTimeout1(void){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	if(HAL_GetTick() > timeoutSet){
 80008b8:	f000 fb8a 	bl	8000fd0 <HAL_GetTick>
 80008bc:	4602      	mov	r2, r0
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <Timeout_IsTimeout1+0x1c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d901      	bls.n	80008ca <Timeout_IsTimeout1+0x16>
		return true;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e000      	b.n	80008cc <Timeout_IsTimeout1+0x18>
	}
	return false;
 80008ca:	2300      	movs	r3, #0
}      // function for timeout handling, checks if previously set timeout expired
 80008cc:	4618      	mov	r0, r3
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000038 	.word	0x20000038

080008d4 <Timeout_SetTimeout1>:


void Timeout_SetTimeout1(uint16_t a){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
	timeoutSet = HAL_GetTick() + a;
 80008de:	f000 fb77 	bl	8000fd0 <HAL_GetTick>
 80008e2:	4602      	mov	r2, r0
 80008e4:	88fb      	ldrh	r3, [r7, #6]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a02      	ldr	r2, [pc, #8]	; (80008f4 <Timeout_SetTimeout1+0x20>)
 80008ea:	6013      	str	r3, [r2, #0]
} // function for timeout handling, sets a timeout, parameter is in milliseconds (ms)
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000038 	.word	0x20000038

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b090      	sub	sp, #64	; 0x40
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fe:	f000 fb0d 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000902:	f000 f85e 	bl	80009c2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000906:	f000 f94d 	bl	8000ba4 <MX_GPIO_Init>
  MX_SPI2_Init();
 800090a:	f000 f8b9 	bl	8000a80 <MX_SPI2_Init>
  MX_TIM1_Init();
 800090e:	f000 f8f5 	bl	8000afc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  	SWS_Packet packet;
    DataBuffer buffer;
    SmokeSensorData smokeData;
    packet.packetID = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    packet.idBase = 1;
 8000918:	2301      	movs	r3, #1
 800091a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    packet.idSensor = 2;
 800091e:	2302      	movs	r3, #2
 8000920:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    packet.packetID = packet.packetID + 1;
 8000924:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000928:	3301      	adds	r3, #1
 800092a:	b2db      	uxtb	r3, r3
 800092c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    packet.packetType = SEND;
 8000930:	2305      	movs	r3, #5
 8000932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool RFM_active = false;
 8000936:	2300      	movs	r3, #0
 8000938:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  RFM_active = RFM69_initialize(RF69_868MHZ, 1, 0);
	  HAL_Delay(1000);
  }
#endif
#if Receive
  RFM_active = RFM69_initialize(RF69_868MHZ, 2, 1);
 800093c:	2201      	movs	r2, #1
 800093e:	2102      	movs	r1, #2
 8000940:	2056      	movs	r0, #86	; 0x56
 8000942:	f7ff fc47 	bl	80001d4 <RFM69_initialize>
 8000946:	4603      	mov	r3, r0
 8000948:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  while(!RFM_active){
 800094c:	e00b      	b.n	8000966 <main+0x6e>
	  RFM_active = RFM69_initialize(RF69_868MHZ, 2, 1);
 800094e:	2201      	movs	r2, #1
 8000950:	2102      	movs	r1, #2
 8000952:	2056      	movs	r0, #86	; 0x56
 8000954:	f7ff fc3e 	bl	80001d4 <RFM69_initialize>
 8000958:	4603      	mov	r3, r0
 800095a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  HAL_Delay(1000);
 800095e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000962:	f000 fb41 	bl	8000fe8 <HAL_Delay>
  while(!RFM_active){
 8000966:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800096a:	f083 0301 	eor.w	r3, r3, #1
 800096e:	b2db      	uxtb	r3, r3
 8000970:	2b00      	cmp	r3, #0
 8000972:	d1ec      	bne.n	800094e <main+0x56>
  }
#endif

#if Receive
  RFM69_setMode(RF69_MODE_RX);
 8000974:	2003      	movs	r0, #3
 8000976:	f7ff fcf3 	bl	8000360 <RFM69_setMode>
#endif
  while (1)
  {
    /* USER CODE END WHILE */
	  if(RFM_active){
 800097a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0fb      	beq.n	800097a <main+0x82>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		  HAL_Delay(2500);
#endif

#if Receive
		  if(RFM69_receive(buffer.data, buffer.size)){
 8000982:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fd73 	bl	8000478 <RFM69_receive>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d00f      	beq.n	80009b8 <main+0xc0>
			  packet_deserializeData(&packet, &buffer);
 8000998:	f107 0208 	add.w	r2, r7, #8
 800099c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff feec 	bl	8000780 <packet_deserializeData>
			  memcpy(&smokeData, packet.data, 8);
 80009a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ac:	1d19      	adds	r1, r3, #4
 80009ae:	463b      	mov	r3, r7
 80009b0:	2208      	movs	r2, #8
 80009b2:	4618      	mov	r0, r3
 80009b4:	f003 fae2 	bl	8003f7c <memcpy>
		  }
		  HAL_Delay(500);
 80009b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009bc:	f000 fb14 	bl	8000fe8 <HAL_Delay>
	  if(RFM_active){
 80009c0:	e7db      	b.n	800097a <main+0x82>

080009c2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b0a6      	sub	sp, #152	; 0x98
 80009c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009cc:	2228      	movs	r2, #40	; 0x28
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 fae1 	bl	8003f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2258      	movs	r2, #88	; 0x58
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f003 fad3 	bl	8003f98 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f2:	2302      	movs	r3, #2
 80009f4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f6:	2301      	movs	r3, #1
 80009f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fa:	2310      	movs	r3, #16
 80009fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a00:	2302      	movs	r3, #2
 8000a02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a0e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 fdb9 	bl	8001598 <HAL_RCC_OscConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a2c:	f000 f960 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a30:	230f      	movs	r3, #15
 8000a32:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a34:	2302      	movs	r3, #2
 8000a36:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a40:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a46:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fdf7 	bl	8002640 <HAL_RCC_ClockConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a58:	f000 f94a 	bl	8000cf0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 ffcf 	bl	8002a0c <HAL_RCCEx_PeriphCLKConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a74:	f000 f93c 	bl	8000cf0 <Error_Handler>
  }
}
 8000a78:	bf00      	nop
 8000a7a:	3798      	adds	r7, #152	; 0x98
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000a86:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <MX_SPI2_Init+0x78>)
 8000a88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000a8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000a9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a9e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000ace:	2207      	movs	r2, #7
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000ada:	2208      	movs	r2, #8
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000ae0:	f002 f9b2 	bl	8002e48 <HAL_SPI_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000aea:	f000 f901 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000003c 	.word	0x2000003c
 8000af8:	40003800 	.word	0x40003800

08000afc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <MX_TIM1_Init+0xa0>)
 8000b1c:	4a20      	ldr	r2, [pc, #128]	; (8000ba0 <MX_TIM1_Init+0xa4>)
 8000b1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <MX_TIM1_Init+0xa0>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_TIM1_Init+0xa0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 36000;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_TIM1_Init+0xa0>)
 8000b2e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8000b32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b34:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_TIM1_Init+0xa0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_TIM1_Init+0xa0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_TIM1_Init+0xa0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b46:	4815      	ldr	r0, [pc, #84]	; (8000b9c <MX_TIM1_Init+0xa0>)
 8000b48:	f002 fda0 	bl	800368c <HAL_TIM_Base_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b52:	f000 f8cd 	bl	8000cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	4619      	mov	r1, r3
 8000b62:	480e      	ldr	r0, [pc, #56]	; (8000b9c <MX_TIM1_Init+0xa0>)
 8000b64:	f002 ff08 	bl	8003978 <HAL_TIM_ConfigClockSource>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b6e:	f000 f8bf 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <MX_TIM1_Init+0xa0>)
 8000b84:	f003 f92c 	bl	8003de0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b8e:	f000 f8af 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000a0 	.word	0x200000a0
 8000ba0:	40012c00 	.word	0x40012c00

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b4b      	ldr	r3, [pc, #300]	; (8000ce8 <MX_GPIO_Init+0x144>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	4a4a      	ldr	r2, [pc, #296]	; (8000ce8 <MX_GPIO_Init+0x144>)
 8000bc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bc4:	6153      	str	r3, [r2, #20]
 8000bc6:	4b48      	ldr	r3, [pc, #288]	; (8000ce8 <MX_GPIO_Init+0x144>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd2:	4b45      	ldr	r3, [pc, #276]	; (8000ce8 <MX_GPIO_Init+0x144>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	4a44      	ldr	r2, [pc, #272]	; (8000ce8 <MX_GPIO_Init+0x144>)
 8000bd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bdc:	6153      	str	r3, [r2, #20]
 8000bde:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <MX_GPIO_Init+0x144>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b3f      	ldr	r3, [pc, #252]	; (8000ce8 <MX_GPIO_Init+0x144>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	4a3e      	ldr	r2, [pc, #248]	; (8000ce8 <MX_GPIO_Init+0x144>)
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	6153      	str	r3, [r2, #20]
 8000bf6:	4b3c      	ldr	r3, [pc, #240]	; (8000ce8 <MX_GPIO_Init+0x144>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b39      	ldr	r3, [pc, #228]	; (8000ce8 <MX_GPIO_Init+0x144>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a38      	ldr	r2, [pc, #224]	; (8000ce8 <MX_GPIO_Init+0x144>)
 8000c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <MX_GPIO_Init+0x144>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f000 fca1 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	4830      	ldr	r0, [pc, #192]	; (8000cec <MX_GPIO_Init+0x148>)
 8000c2c:	f000 fc9c 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c36:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4829      	ldr	r0, [pc, #164]	; (8000cec <MX_GPIO_Init+0x148>)
 8000c48:	f000 fb04 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c4c:	230c      	movs	r3, #12
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5c:	2307      	movs	r3, #7
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6a:	f000 faf3 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c6e:	2320      	movs	r3, #32
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c88:	f000 fae4 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_DI0_Pin CUSTOMNAME_Pin */
  GPIO_InitStruct.Pin = SPI_DI0_Pin|CUSTOMNAME_Pin;
 8000c8c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4812      	ldr	r0, [pc, #72]	; (8000cec <MX_GPIO_Init+0x148>)
 8000ca2:	f000 fad7 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <MX_GPIO_Init+0x148>)
 8000cbe:	f000 fac9 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor0_Pin Sensor1_Pin Sensor2_Pin Sensor3_Pin */
  GPIO_InitStruct.Pin = Sensor0_Pin|Sensor1_Pin|Sensor2_Pin|Sensor3_Pin;
 8000cc2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cda:	f000 fabb 	bl	8001254 <HAL_GPIO_Init>

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	48000800 	.word	0x48000800

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_MspInit+0x44>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <HAL_MspInit+0x44>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_MspInit+0x44>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_MspInit+0x44>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <HAL_MspInit+0x44>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_MspInit+0x44>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d32:	2007      	movs	r0, #7
 8000d34:	f000 fa4c 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000

08000d44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a20      	ldr	r2, [pc, #128]	; (8000de4 <HAL_SPI_MspInit+0xa0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d139      	bne.n	8000dda <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <HAL_SPI_MspInit+0xa4>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a1f      	ldr	r2, [pc, #124]	; (8000de8 <HAL_SPI_MspInit+0xa4>)
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <HAL_SPI_MspInit+0xa4>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <HAL_SPI_MspInit+0xa4>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <HAL_SPI_MspInit+0xa4>)
 8000d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d88:	6153      	str	r3, [r2, #20]
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_SPI_MspInit+0xa4>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin;
 8000d96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000da8:	2305      	movs	r3, #5
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	480e      	ldr	r0, [pc, #56]	; (8000dec <HAL_SPI_MspInit+0xa8>)
 8000db4:	f000 fa4e 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin|SPI_MOSI_Pin;
 8000db8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dca:	2305      	movs	r3, #5
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_SPI_MspInit+0xa8>)
 8000dd6:	f000 fa3d 	bl	8001254 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40003800 	.word	0x40003800
 8000de8:	40021000 	.word	0x40021000
 8000dec:	48000400 	.word	0x48000400

08000df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_TIM_Base_MspInit+0x44>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d113      	bne.n	8000e2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_TIM_Base_MspInit+0x48>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <HAL_TIM_Base_MspInit+0x48>)
 8000e08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_TIM_Base_MspInit+0x48>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	201b      	movs	r0, #27
 8000e20:	f000 f9e1 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e24:	201b      	movs	r0, #27
 8000e26:	f000 f9fa 	bl	800121e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40012c00 	.word	0x40012c00
 8000e38:	40021000 	.word	0x40021000

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <NMI_Handler+0x4>

08000e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <MemManage_Handler+0x4>

08000e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e88:	f000 f88e 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <TIM1_CC_IRQHandler+0x10>)
 8000e96:	f002 fc50 	bl	800373a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000a0 	.word	0x200000a0

08000ea4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <SystemInit+0x20>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <SystemInit+0x20>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ece:	490e      	ldr	r1, [pc, #56]	; (8000f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <LoopForever+0xe>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee4:	4c0b      	ldr	r4, [pc, #44]	; (8000f14 <LoopForever+0x16>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ef2:	f7ff ffd7 	bl	8000ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f003 f81d 	bl	8003f34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efa:	f7ff fcfd 	bl	80008f8 <main>

08000efe <LoopForever>:

LoopForever:
    b LoopForever
 8000efe:	e7fe      	b.n	8000efe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f0c:	08003ff8 	.word	0x08003ff8
  ldr r2, =_sbss
 8000f10:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f14:	200000f0 	.word	0x200000f0

08000f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_2_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_Init+0x28>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_Init+0x28>)
 8000f26:	f043 0310 	orr.w	r3, r3, #16
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f94f 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fee0 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40022000 	.word	0x40022000

08000f48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f967 	bl	800123a <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f000 f92f 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000004 	.word	0x20000004
 8000fa0:	2000000c 	.word	0x2000000c
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2000000c 	.word	0x2000000c
 8000fcc:	200000ec 	.word	0x200000ec

08000fd0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	200000ec 	.word	0x200000ec

08000fe8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d005      	beq.n	800100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_Delay+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800100e:	bf00      	nop
 8001010:	f7ff ffde 	bl	8000fd0 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f7      	bhi.n	8001010 <HAL_Delay+0x28>
  {
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000000c 	.word	0x2000000c

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff29 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff3e 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff8e 	bl	8001124 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5d 	bl	80010d0 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff31 	bl	8001094 <__NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffa2 	bl	800118c <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001262:	e160      	b.n	8001526 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2101      	movs	r1, #1
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	4013      	ands	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8152 	beq.w	8001520 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b01      	cmp	r3, #1
 8001286:	d005      	beq.n	8001294 <HAL_GPIO_Init+0x40>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d130      	bne.n	80012f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ca:	2201      	movs	r2, #1
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	f003 0201 	and.w	r2, r3, #1
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d017      	beq.n	8001332 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d123      	bne.n	8001386 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	6939      	ldr	r1, [r7, #16]
 8001382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2203      	movs	r2, #3
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0203 	and.w	r2, r3, #3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 80ac 	beq.w	8001520 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c8:	4b5e      	ldr	r3, [pc, #376]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a5d      	ldr	r2, [pc, #372]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b5b      	ldr	r3, [pc, #364]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013e0:	4a59      	ldr	r2, [pc, #356]	; (8001548 <HAL_GPIO_Init+0x2f4>)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800140a:	d025      	beq.n	8001458 <HAL_GPIO_Init+0x204>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a4f      	ldr	r2, [pc, #316]	; (800154c <HAL_GPIO_Init+0x2f8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d01f      	beq.n	8001454 <HAL_GPIO_Init+0x200>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a4e      	ldr	r2, [pc, #312]	; (8001550 <HAL_GPIO_Init+0x2fc>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d019      	beq.n	8001450 <HAL_GPIO_Init+0x1fc>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a4d      	ldr	r2, [pc, #308]	; (8001554 <HAL_GPIO_Init+0x300>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d013      	beq.n	800144c <HAL_GPIO_Init+0x1f8>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a4c      	ldr	r2, [pc, #304]	; (8001558 <HAL_GPIO_Init+0x304>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d00d      	beq.n	8001448 <HAL_GPIO_Init+0x1f4>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a4b      	ldr	r2, [pc, #300]	; (800155c <HAL_GPIO_Init+0x308>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d007      	beq.n	8001444 <HAL_GPIO_Init+0x1f0>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a4a      	ldr	r2, [pc, #296]	; (8001560 <HAL_GPIO_Init+0x30c>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d101      	bne.n	8001440 <HAL_GPIO_Init+0x1ec>
 800143c:	2306      	movs	r3, #6
 800143e:	e00c      	b.n	800145a <HAL_GPIO_Init+0x206>
 8001440:	2307      	movs	r3, #7
 8001442:	e00a      	b.n	800145a <HAL_GPIO_Init+0x206>
 8001444:	2305      	movs	r3, #5
 8001446:	e008      	b.n	800145a <HAL_GPIO_Init+0x206>
 8001448:	2304      	movs	r3, #4
 800144a:	e006      	b.n	800145a <HAL_GPIO_Init+0x206>
 800144c:	2303      	movs	r3, #3
 800144e:	e004      	b.n	800145a <HAL_GPIO_Init+0x206>
 8001450:	2302      	movs	r3, #2
 8001452:	e002      	b.n	800145a <HAL_GPIO_Init+0x206>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <HAL_GPIO_Init+0x206>
 8001458:	2300      	movs	r3, #0
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	f002 0203 	and.w	r2, r2, #3
 8001460:	0092      	lsls	r2, r2, #2
 8001462:	4093      	lsls	r3, r2
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800146a:	4937      	ldr	r1, [pc, #220]	; (8001548 <HAL_GPIO_Init+0x2f4>)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001478:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <HAL_GPIO_Init+0x310>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800149c:	4a31      	ldr	r2, [pc, #196]	; (8001564 <HAL_GPIO_Init+0x310>)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014a2:	4b30      	ldr	r3, [pc, #192]	; (8001564 <HAL_GPIO_Init+0x310>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014c6:	4a27      	ldr	r2, [pc, #156]	; (8001564 <HAL_GPIO_Init+0x310>)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014cc:	4b25      	ldr	r3, [pc, #148]	; (8001564 <HAL_GPIO_Init+0x310>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014f0:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <HAL_GPIO_Init+0x310>)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f6:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <HAL_GPIO_Init+0x310>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_GPIO_Init+0x310>)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	f47f ae97 	bne.w	8001264 <HAL_GPIO_Init+0x10>
  }
}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000
 800154c:	48000400 	.word	0x48000400
 8001550:	48000800 	.word	0x48000800
 8001554:	48000c00 	.word	0x48000c00
 8001558:	48001000 	.word	0x48001000
 800155c:	48001400 	.word	0x48001400
 8001560:	48001800 	.word	0x48001800
 8001564:	40010400 	.word	0x40010400

08001568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001578:	787b      	ldrb	r3, [r7, #1]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001584:	e002      	b.n	800158c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800159e:	af00      	add	r7, sp, #0
 80015a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	f001 b83a 	b.w	8002632 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 816f 	beq.w	80018b2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015d4:	4bb5      	ldr	r3, [pc, #724]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d00c      	beq.n	80015fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e0:	4bb2      	ldr	r3, [pc, #712]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d15c      	bne.n	80016a6 <HAL_RCC_OscConfig+0x10e>
 80015ec:	4baf      	ldr	r3, [pc, #700]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80015f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f8:	d155      	bne.n	80016a6 <HAL_RCC_OscConfig+0x10e>
 80015fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015fe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001602:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001606:	fa93 f3a3 	rbit	r3, r3
 800160a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800160e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001612:	fab3 f383 	clz	r3, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	095b      	lsrs	r3, r3, #5
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b01      	cmp	r3, #1
 8001624:	d102      	bne.n	800162c <HAL_RCC_OscConfig+0x94>
 8001626:	4ba1      	ldr	r3, [pc, #644]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	e015      	b.n	8001658 <HAL_RCC_OscConfig+0xc0>
 800162c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001630:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001634:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001638:	fa93 f3a3 	rbit	r3, r3
 800163c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001644:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001648:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800164c:	fa93 f3a3 	rbit	r3, r3
 8001650:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001654:	4b95      	ldr	r3, [pc, #596]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800165c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001660:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001664:	fa92 f2a2 	rbit	r2, r2
 8001668:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800166c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001670:	fab2 f282 	clz	r2, r2
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	f042 0220 	orr.w	r2, r2, #32
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	f002 021f 	and.w	r2, r2, #31
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f202 	lsl.w	r2, r1, r2
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8111 	beq.w	80018b0 <HAL_RCC_OscConfig+0x318>
 800168e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001692:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f040 8108 	bne.w	80018b0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	f000 bfc6 	b.w	8002632 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b6:	d106      	bne.n	80016c6 <HAL_RCC_OscConfig+0x12e>
 80016b8:	4b7c      	ldr	r3, [pc, #496]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a7b      	ldr	r2, [pc, #492]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 80016be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e036      	b.n	8001734 <HAL_RCC_OscConfig+0x19c>
 80016c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x158>
 80016d6:	4b75      	ldr	r3, [pc, #468]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a74      	ldr	r2, [pc, #464]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 80016dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b72      	ldr	r3, [pc, #456]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a71      	ldr	r2, [pc, #452]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 80016e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e021      	b.n	8001734 <HAL_RCC_OscConfig+0x19c>
 80016f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x184>
 8001702:	4b6a      	ldr	r3, [pc, #424]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a69      	ldr	r2, [pc, #420]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 8001708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a66      	ldr	r2, [pc, #408]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0x19c>
 800171c:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a62      	ldr	r2, [pc, #392]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 8001722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b60      	ldr	r3, [pc, #384]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a5f      	ldr	r2, [pc, #380]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 800172e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001732:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001738:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d059      	beq.n	80017f8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fc44 	bl	8000fd0 <HAL_GetTick>
 8001748:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174c:	e00a      	b.n	8001764 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174e:	f7ff fc3f 	bl	8000fd0 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d902      	bls.n	8001764 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	f000 bf67 	b.w	8002632 <HAL_RCC_OscConfig+0x109a>
 8001764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001768:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001770:	fa93 f3a3 	rbit	r3, r3
 8001774:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001778:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177c:	fab3 f383 	clz	r3, r3
 8001780:	b2db      	uxtb	r3, r3
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b01      	cmp	r3, #1
 800178e:	d102      	bne.n	8001796 <HAL_RCC_OscConfig+0x1fe>
 8001790:	4b46      	ldr	r3, [pc, #280]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	e015      	b.n	80017c2 <HAL_RCC_OscConfig+0x22a>
 8001796:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800179a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80017a2:	fa93 f3a3 	rbit	r3, r3
 80017a6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80017aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80017b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80017b6:	fa93 f3a3 	rbit	r3, r3
 80017ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017c6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80017ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80017ce:	fa92 f2a2 	rbit	r2, r2
 80017d2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80017d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80017da:	fab2 f282 	clz	r2, r2
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	f042 0220 	orr.w	r2, r2, #32
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	f002 021f 	and.w	r2, r2, #31
 80017ea:	2101      	movs	r1, #1
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0ab      	beq.n	800174e <HAL_RCC_OscConfig+0x1b6>
 80017f6:	e05c      	b.n	80018b2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fbea 	bl	8000fd0 <HAL_GetTick>
 80017fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001800:	e00a      	b.n	8001818 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001802:	f7ff fbe5 	bl	8000fd0 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d902      	bls.n	8001818 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	f000 bf0d 	b.w	8002632 <HAL_RCC_OscConfig+0x109a>
 8001818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800181c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001824:	fa93 f3a3 	rbit	r3, r3
 8001828:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800182c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001830:	fab3 f383 	clz	r3, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d102      	bne.n	800184a <HAL_RCC_OscConfig+0x2b2>
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x2de>
 800184a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800184e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800185e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001862:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001866:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_RCC_OscConfig+0x314>)
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800187a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800187e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001882:	fa92 f2a2 	rbit	r2, r2
 8001886:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800188a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800188e:	fab2 f282 	clz	r2, r2
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	f042 0220 	orr.w	r2, r2, #32
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	f002 021f 	and.w	r2, r2, #31
 800189e:	2101      	movs	r1, #1
 80018a0:	fa01 f202 	lsl.w	r2, r1, r2
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1ab      	bne.n	8001802 <HAL_RCC_OscConfig+0x26a>
 80018aa:	e002      	b.n	80018b2 <HAL_RCC_OscConfig+0x31a>
 80018ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 817f 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018c8:	4ba7      	ldr	r3, [pc, #668]	; (8001b68 <HAL_RCC_OscConfig+0x5d0>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00c      	beq.n	80018ee <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018d4:	4ba4      	ldr	r3, [pc, #656]	; (8001b68 <HAL_RCC_OscConfig+0x5d0>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d173      	bne.n	80019c8 <HAL_RCC_OscConfig+0x430>
 80018e0:	4ba1      	ldr	r3, [pc, #644]	; (8001b68 <HAL_RCC_OscConfig+0x5d0>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80018e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018ec:	d16c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x430>
 80018ee:	2302      	movs	r3, #2
 80018f0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001900:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d102      	bne.n	800191e <HAL_RCC_OscConfig+0x386>
 8001918:	4b93      	ldr	r3, [pc, #588]	; (8001b68 <HAL_RCC_OscConfig+0x5d0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	e013      	b.n	8001946 <HAL_RCC_OscConfig+0x3ae>
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001930:	2302      	movs	r3, #2
 8001932:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001936:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001942:	4b89      	ldr	r3, [pc, #548]	; (8001b68 <HAL_RCC_OscConfig+0x5d0>)
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	2202      	movs	r2, #2
 8001948:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800194c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001950:	fa92 f2a2 	rbit	r2, r2
 8001954:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001958:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800195c:	fab2 f282 	clz	r2, r2
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	f042 0220 	orr.w	r2, r2, #32
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	f002 021f 	and.w	r2, r2, #31
 800196c:	2101      	movs	r1, #1
 800196e:	fa01 f202 	lsl.w	r2, r1, r2
 8001972:	4013      	ands	r3, r2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00a      	beq.n	800198e <HAL_RCC_OscConfig+0x3f6>
 8001978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d002      	beq.n	800198e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	f000 be52 	b.w	8002632 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198e:	4b76      	ldr	r3, [pc, #472]	; (8001b68 <HAL_RCC_OscConfig+0x5d0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	21f8      	movs	r1, #248	; 0xf8
 80019a4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80019ac:	fa91 f1a1 	rbit	r1, r1
 80019b0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80019b4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80019b8:	fab1 f181 	clz	r1, r1
 80019bc:	b2c9      	uxtb	r1, r1
 80019be:	408b      	lsls	r3, r1
 80019c0:	4969      	ldr	r1, [pc, #420]	; (8001b68 <HAL_RCC_OscConfig+0x5d0>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	e0fe      	b.n	8001bc6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 8088 	beq.w	8001aea <HAL_RCC_OscConfig+0x552>
 80019da:	2301      	movs	r3, #1
 80019dc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80019ec:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f0:	fab3 f383 	clz	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	461a      	mov	r2, r3
 8001a02:	2301      	movs	r3, #1
 8001a04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7ff fae3 	bl	8000fd0 <HAL_GetTick>
 8001a0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a10:	f7ff fade 	bl	8000fd0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d902      	bls.n	8001a26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	f000 be06 	b.w	8002632 <HAL_RCC_OscConfig+0x109a>
 8001a26:	2302      	movs	r3, #2
 8001a28:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001a38:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d102      	bne.n	8001a56 <HAL_RCC_OscConfig+0x4be>
 8001a50:	4b45      	ldr	r3, [pc, #276]	; (8001b68 <HAL_RCC_OscConfig+0x5d0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	e013      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e6>
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a6e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <HAL_RCC_OscConfig+0x5d0>)
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001a84:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001a88:	fa92 f2a2 	rbit	r2, r2
 8001a8c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001a90:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a94:	fab2 f282 	clz	r2, r2
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	f042 0220 	orr.w	r2, r2, #32
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	f002 021f 	and.w	r2, r2, #31
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0af      	beq.n	8001a10 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_RCC_OscConfig+0x5d0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	21f8      	movs	r1, #248	; 0xf8
 8001ac6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001ace:	fa91 f1a1 	rbit	r1, r1
 8001ad2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001ad6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ada:	fab1 f181 	clz	r1, r1
 8001ade:	b2c9      	uxtb	r1, r1
 8001ae0:	408b      	lsls	r3, r1
 8001ae2:	4921      	ldr	r1, [pc, #132]	; (8001b68 <HAL_RCC_OscConfig+0x5d0>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
 8001ae8:	e06d      	b.n	8001bc6 <HAL_RCC_OscConfig+0x62e>
 8001aea:	2301      	movs	r3, #1
 8001aec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001afc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	461a      	mov	r2, r3
 8001b12:	2300      	movs	r3, #0
 8001b14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff fa5b 	bl	8000fd0 <HAL_GetTick>
 8001b1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b20:	f7ff fa56 	bl	8000fd0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d902      	bls.n	8001b36 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	f000 bd7e 	b.w	8002632 <HAL_RCC_OscConfig+0x109a>
 8001b36:	2302      	movs	r3, #2
 8001b38:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001b48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d105      	bne.n	8001b6c <HAL_RCC_OscConfig+0x5d4>
 8001b60:	4b01      	ldr	r3, [pc, #4]	; (8001b68 <HAL_RCC_OscConfig+0x5d0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	e016      	b.n	8001b94 <HAL_RCC_OscConfig+0x5fc>
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001b7e:	2302      	movs	r3, #2
 8001b80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b84:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b90:	4bbf      	ldr	r3, [pc, #764]	; (8001e90 <HAL_RCC_OscConfig+0x8f8>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	2202      	movs	r2, #2
 8001b96:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001b9a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001b9e:	fa92 f2a2 	rbit	r2, r2
 8001ba2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001ba6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001baa:	fab2 f282 	clz	r2, r2
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	f042 0220 	orr.w	r2, r2, #32
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	f002 021f 	and.w	r2, r2, #31
 8001bba:	2101      	movs	r1, #1
 8001bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1ac      	bne.n	8001b20 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8113 	beq.w	8001e02 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d07c      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x74e>
 8001bec:	2301      	movs	r3, #1
 8001bee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001bfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4ba2      	ldr	r3, [pc, #648]	; (8001e94 <HAL_RCC_OscConfig+0x8fc>)
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	461a      	mov	r2, r3
 8001c12:	2301      	movs	r3, #1
 8001c14:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c16:	f7ff f9db 	bl	8000fd0 <HAL_GetTick>
 8001c1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c20:	f7ff f9d6 	bl	8000fd0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d902      	bls.n	8001c36 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	f000 bcfe 	b.w	8002632 <HAL_RCC_OscConfig+0x109a>
 8001c36:	2302      	movs	r3, #2
 8001c38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c40:	fa93 f2a3 	rbit	r2, r3
 8001c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c48:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c56:	2202      	movs	r2, #2
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	fa93 f2a3 	rbit	r2, r3
 8001c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	fa93 f2a3 	rbit	r2, r3
 8001c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c96:	4b7e      	ldr	r3, [pc, #504]	; (8001e90 <HAL_RCC_OscConfig+0x8f8>)
 8001c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ca2:	2102      	movs	r1, #2
 8001ca4:	6019      	str	r1, [r3, #0]
 8001ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001caa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	fa93 f1a3 	rbit	r1, r3
 8001cb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cbc:	6019      	str	r1, [r3, #0]
  return result;
 8001cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	2101      	movs	r1, #1
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d09d      	beq.n	8001c20 <HAL_RCC_OscConfig+0x688>
 8001ce4:	e08d      	b.n	8001e02 <HAL_RCC_OscConfig+0x86a>
 8001ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	fa93 f2a3 	rbit	r2, r3
 8001d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d04:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d08:	601a      	str	r2, [r3, #0]
  return result;
 8001d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d12:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b5d      	ldr	r3, [pc, #372]	; (8001e94 <HAL_RCC_OscConfig+0x8fc>)
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	461a      	mov	r2, r3
 8001d24:	2300      	movs	r3, #0
 8001d26:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d28:	f7ff f952 	bl	8000fd0 <HAL_GetTick>
 8001d2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d32:	f7ff f94d 	bl	8000fd0 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d902      	bls.n	8001d48 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	f000 bc75 	b.w	8002632 <HAL_RCC_OscConfig+0x109a>
 8001d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d50:	2202      	movs	r2, #2
 8001d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fa93 f2a3 	rbit	r2, r3
 8001d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d74:	2202      	movs	r2, #2
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	fa93 f2a3 	rbit	r2, r3
 8001d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d94:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d98:	2202      	movs	r2, #2
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	fa93 f2a3 	rbit	r2, r3
 8001daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001db2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <HAL_RCC_OscConfig+0x8f8>)
 8001db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dbc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	6019      	str	r1, [r3, #0]
 8001dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	fa93 f1a3 	rbit	r1, r3
 8001dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001dda:	6019      	str	r1, [r3, #0]
  return result;
 8001ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	2101      	movs	r1, #1
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d197      	bne.n	8001d32 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 81a5 	beq.w	8002162 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <HAL_RCC_OscConfig+0x8f8>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d116      	bne.n	8001e58 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_RCC_OscConfig+0x8f8>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4a18      	ldr	r2, [pc, #96]	; (8001e90 <HAL_RCC_OscConfig+0x8f8>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	61d3      	str	r3, [r2, #28]
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <HAL_RCC_OscConfig+0x8f8>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e50:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e52:	2301      	movs	r3, #1
 8001e54:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_RCC_OscConfig+0x900>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d121      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <HAL_RCC_OscConfig+0x900>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <HAL_RCC_OscConfig+0x900>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e70:	f7ff f8ae 	bl	8000fd0 <HAL_GetTick>
 8001e74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	e010      	b.n	8001e9c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7a:	f7ff f8a9 	bl	8000fd0 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	; 0x64
 8001e88:	d908      	bls.n	8001e9c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e3d1      	b.n	8002632 <HAL_RCC_OscConfig+0x109a>
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	10908120 	.word	0x10908120
 8001e98:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	4b8d      	ldr	r3, [pc, #564]	; (80020d4 <HAL_RCC_OscConfig+0xb3c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0e8      	beq.n	8001e7a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x92e>
 8001eb8:	4b87      	ldr	r3, [pc, #540]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a86      	ldr	r2, [pc, #536]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	e035      	b.n	8001f32 <HAL_RCC_OscConfig+0x99a>
 8001ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x958>
 8001ed6:	4b80      	ldr	r3, [pc, #512]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a7f      	ldr	r2, [pc, #508]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	6213      	str	r3, [r2, #32]
 8001ee2:	4b7d      	ldr	r3, [pc, #500]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	4a7c      	ldr	r2, [pc, #496]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001ee8:	f023 0304 	bic.w	r3, r3, #4
 8001eec:	6213      	str	r3, [r2, #32]
 8001eee:	e020      	b.n	8001f32 <HAL_RCC_OscConfig+0x99a>
 8001ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d10c      	bne.n	8001f1a <HAL_RCC_OscConfig+0x982>
 8001f00:	4b75      	ldr	r3, [pc, #468]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4a74      	ldr	r2, [pc, #464]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001f06:	f043 0304 	orr.w	r3, r3, #4
 8001f0a:	6213      	str	r3, [r2, #32]
 8001f0c:	4b72      	ldr	r3, [pc, #456]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a71      	ldr	r2, [pc, #452]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e00b      	b.n	8001f32 <HAL_RCC_OscConfig+0x99a>
 8001f1a:	4b6f      	ldr	r3, [pc, #444]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4a6e      	ldr	r2, [pc, #440]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	6213      	str	r3, [r2, #32]
 8001f26:	4b6c      	ldr	r3, [pc, #432]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4a6b      	ldr	r2, [pc, #428]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001f2c:	f023 0304 	bic.w	r3, r3, #4
 8001f30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8081 	beq.w	8002046 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f44:	f7ff f844 	bl	8000fd0 <HAL_GetTick>
 8001f48:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4c:	e00b      	b.n	8001f66 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7ff f83f 	bl	8000fd0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e365      	b.n	8002632 <HAL_RCC_OscConfig+0x109a>
 8001f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f6e:	2202      	movs	r2, #2
 8001f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	fa93 f2a3 	rbit	r2, r3
 8001f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f8e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f92:	2202      	movs	r2, #2
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	fa93 f2a3 	rbit	r2, r3
 8001fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001fac:	601a      	str	r2, [r3, #0]
  return result;
 8001fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001fb6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d102      	bne.n	8001fd2 <HAL_RCC_OscConfig+0xa3a>
 8001fcc:	4b42      	ldr	r3, [pc, #264]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	e013      	b.n	8001ffa <HAL_RCC_OscConfig+0xa62>
 8001fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001fda:	2202      	movs	r2, #2
 8001fdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	fa93 f2a3 	rbit	r2, r3
 8001fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ffe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002002:	2102      	movs	r1, #2
 8002004:	6011      	str	r1, [r2, #0]
 8002006:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800200a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	fa92 f1a2 	rbit	r1, r2
 8002014:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002018:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800201c:	6011      	str	r1, [r2, #0]
  return result;
 800201e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002022:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	fab2 f282 	clz	r2, r2
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	f002 021f 	and.w	r2, r2, #31
 8002038:	2101      	movs	r1, #1
 800203a:	fa01 f202 	lsl.w	r2, r1, r2
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d084      	beq.n	8001f4e <HAL_RCC_OscConfig+0x9b6>
 8002044:	e083      	b.n	800214e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002046:	f7fe ffc3 	bl	8000fd0 <HAL_GetTick>
 800204a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002050:	f7fe ffbe 	bl	8000fd0 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e2e4      	b.n	8002632 <HAL_RCC_OscConfig+0x109a>
 8002068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002070:	2202      	movs	r2, #2
 8002072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002078:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	fa93 f2a3 	rbit	r2, r3
 8002082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002086:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002090:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002094:	2202      	movs	r2, #2
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	fa93 f2a3 	rbit	r2, r3
 80020a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020ae:	601a      	str	r2, [r3, #0]
  return result;
 80020b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	095b      	lsrs	r3, r3, #5
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d106      	bne.n	80020dc <HAL_RCC_OscConfig+0xb44>
 80020ce:	4b02      	ldr	r3, [pc, #8]	; (80020d8 <HAL_RCC_OscConfig+0xb40>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	e017      	b.n	8002104 <HAL_RCC_OscConfig+0xb6c>
 80020d4:	40007000 	.word	0x40007000
 80020d8:	40021000 	.word	0x40021000
 80020dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80020e4:	2202      	movs	r2, #2
 80020e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fa93 f2a3 	rbit	r2, r3
 80020f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	4bb3      	ldr	r3, [pc, #716]	; (80023d0 <HAL_RCC_OscConfig+0xe38>)
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002108:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800210c:	2102      	movs	r1, #2
 800210e:	6011      	str	r1, [r2, #0]
 8002110:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002114:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	fa92 f1a2 	rbit	r1, r2
 800211e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002122:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002126:	6011      	str	r1, [r2, #0]
  return result;
 8002128:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800212c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	fab2 f282 	clz	r2, r2
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	f002 021f 	and.w	r2, r2, #31
 8002142:	2101      	movs	r1, #1
 8002144:	fa01 f202 	lsl.w	r2, r1, r2
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d180      	bne.n	8002050 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800214e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002152:	2b01      	cmp	r3, #1
 8002154:	d105      	bne.n	8002162 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002156:	4b9e      	ldr	r3, [pc, #632]	; (80023d0 <HAL_RCC_OscConfig+0xe38>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4a9d      	ldr	r2, [pc, #628]	; (80023d0 <HAL_RCC_OscConfig+0xe38>)
 800215c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002160:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002166:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 825e 	beq.w	8002630 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002174:	4b96      	ldr	r3, [pc, #600]	; (80023d0 <HAL_RCC_OscConfig+0xe38>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	f000 821f 	beq.w	80025c0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002182:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002186:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b02      	cmp	r3, #2
 8002190:	f040 8170 	bne.w	8002474 <HAL_RCC_OscConfig+0xedc>
 8002194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002198:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800219c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	fa93 f2a3 	rbit	r2, r3
 80021b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021b8:	601a      	str	r2, [r3, #0]
  return result;
 80021ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021be:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021c2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	461a      	mov	r2, r3
 80021d6:	2300      	movs	r3, #0
 80021d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7fe fef9 	bl	8000fd0 <HAL_GetTick>
 80021de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e2:	e009      	b.n	80021f8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e4:	f7fe fef4 	bl	8000fd0 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e21c      	b.n	8002632 <HAL_RCC_OscConfig+0x109a>
 80021f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002200:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002204:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	fa93 f2a3 	rbit	r2, r3
 8002214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002218:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800221c:	601a      	str	r2, [r3, #0]
  return result;
 800221e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002222:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002226:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d102      	bne.n	8002242 <HAL_RCC_OscConfig+0xcaa>
 800223c:	4b64      	ldr	r3, [pc, #400]	; (80023d0 <HAL_RCC_OscConfig+0xe38>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	e027      	b.n	8002292 <HAL_RCC_OscConfig+0xcfa>
 8002242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002246:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800224a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800224e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002254:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	fa93 f2a3 	rbit	r2, r3
 800225e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002262:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fa93 f2a3 	rbit	r2, r3
 8002284:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002288:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	4b50      	ldr	r3, [pc, #320]	; (80023d0 <HAL_RCC_OscConfig+0xe38>)
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002296:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800229a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800229e:	6011      	str	r1, [r2, #0]
 80022a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022a4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	fa92 f1a2 	rbit	r1, r2
 80022ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022b2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80022b6:	6011      	str	r1, [r2, #0]
  return result;
 80022b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022bc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	fab2 f282 	clz	r2, r2
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	f042 0220 	orr.w	r2, r2, #32
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	f002 021f 	and.w	r2, r2, #31
 80022d2:	2101      	movs	r1, #1
 80022d4:	fa01 f202 	lsl.w	r2, r1, r2
 80022d8:	4013      	ands	r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d182      	bne.n	80021e4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022de:	4b3c      	ldr	r3, [pc, #240]	; (80023d0 <HAL_RCC_OscConfig+0xe38>)
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	f023 020f 	bic.w	r2, r3, #15
 80022e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	4937      	ldr	r1, [pc, #220]	; (80023d0 <HAL_RCC_OscConfig+0xe38>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80022f8:	4b35      	ldr	r3, [pc, #212]	; (80023d0 <HAL_RCC_OscConfig+0xe38>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002300:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002304:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6a19      	ldr	r1, [r3, #32]
 800230c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002310:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	430b      	orrs	r3, r1
 800231a:	492d      	ldr	r1, [pc, #180]	; (80023d0 <HAL_RCC_OscConfig+0xe38>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
 8002320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002324:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800232c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002332:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	fa93 f2a3 	rbit	r2, r3
 800233c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002340:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002344:	601a      	str	r2, [r3, #0]
  return result;
 8002346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800234e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800235a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	461a      	mov	r2, r3
 8002362:	2301      	movs	r3, #1
 8002364:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7fe fe33 	bl	8000fd0 <HAL_GetTick>
 800236a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800236e:	e009      	b.n	8002384 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe fe2e 	bl	8000fd0 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e156      	b.n	8002632 <HAL_RCC_OscConfig+0x109a>
 8002384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002388:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800238c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002396:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	fa93 f2a3 	rbit	r2, r3
 80023a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023a8:	601a      	str	r2, [r3, #0]
  return result;
 80023aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ae:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d105      	bne.n	80023d4 <HAL_RCC_OscConfig+0xe3c>
 80023c8:	4b01      	ldr	r3, [pc, #4]	; (80023d0 <HAL_RCC_OscConfig+0xe38>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	e02a      	b.n	8002424 <HAL_RCC_OscConfig+0xe8c>
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80023dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	fa93 f2a3 	rbit	r2, r3
 80023f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023fe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002402:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	fa93 f2a3 	rbit	r2, r3
 8002416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	4b86      	ldr	r3, [pc, #536]	; (800263c <HAL_RCC_OscConfig+0x10a4>)
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002428:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800242c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002430:	6011      	str	r1, [r2, #0]
 8002432:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002436:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	fa92 f1a2 	rbit	r1, r2
 8002440:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002444:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002448:	6011      	str	r1, [r2, #0]
  return result;
 800244a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800244e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	fab2 f282 	clz	r2, r2
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	f042 0220 	orr.w	r2, r2, #32
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	f002 021f 	and.w	r2, r2, #31
 8002464:	2101      	movs	r1, #1
 8002466:	fa01 f202 	lsl.w	r2, r1, r2
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	f43f af7f 	beq.w	8002370 <HAL_RCC_OscConfig+0xdd8>
 8002472:	e0dd      	b.n	8002630 <HAL_RCC_OscConfig+0x1098>
 8002474:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002478:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800247c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002486:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	fa93 f2a3 	rbit	r2, r3
 8002490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002494:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002498:	601a      	str	r2, [r3, #0]
  return result;
 800249a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800249e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024a2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a4:	fab3 f383 	clz	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	461a      	mov	r2, r3
 80024b6:	2300      	movs	r3, #0
 80024b8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fd89 	bl	8000fd0 <HAL_GetTick>
 80024be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c2:	e009      	b.n	80024d8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe fd84 	bl	8000fd0 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e0ac      	b.n	8002632 <HAL_RCC_OscConfig+0x109a>
 80024d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80024e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	fa93 f2a3 	rbit	r2, r3
 80024f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024fc:	601a      	str	r2, [r3, #0]
  return result;
 80024fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002502:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002506:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d102      	bne.n	8002522 <HAL_RCC_OscConfig+0xf8a>
 800251c:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCC_OscConfig+0x10a4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	e027      	b.n	8002572 <HAL_RCC_OscConfig+0xfda>
 8002522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002526:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800252a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800252e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002534:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	fa93 f2a3 	rbit	r2, r3
 800253e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002542:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800254c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800255a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002568:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	4b33      	ldr	r3, [pc, #204]	; (800263c <HAL_RCC_OscConfig+0x10a4>)
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002576:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800257a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800257e:	6011      	str	r1, [r2, #0]
 8002580:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002584:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	fa92 f1a2 	rbit	r1, r2
 800258e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002592:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002596:	6011      	str	r1, [r2, #0]
  return result;
 8002598:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800259c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	fab2 f282 	clz	r2, r2
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	f042 0220 	orr.w	r2, r2, #32
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f002 021f 	and.w	r2, r2, #31
 80025b2:	2101      	movs	r1, #1
 80025b4:	fa01 f202 	lsl.w	r2, r1, r2
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d182      	bne.n	80024c4 <HAL_RCC_OscConfig+0xf2c>
 80025be:	e037      	b.n	8002630 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e02e      	b.n	8002632 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_RCC_OscConfig+0x10a4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80025dc:	4b17      	ldr	r3, [pc, #92]	; (800263c <HAL_RCC_OscConfig+0x10a4>)
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025e8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80025ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d117      	bne.n	800262c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80025fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002600:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002608:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002610:	429a      	cmp	r2, r3
 8002612:	d10b      	bne.n	800262c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002614:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002618:	f003 020f 	and.w	r2, r3, #15
 800261c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002620:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000

08002640 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b09e      	sub	sp, #120	; 0x78
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e162      	b.n	800291e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002658:	4b90      	ldr	r3, [pc, #576]	; (800289c <HAL_RCC_ClockConfig+0x25c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d910      	bls.n	8002688 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b8d      	ldr	r3, [pc, #564]	; (800289c <HAL_RCC_ClockConfig+0x25c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 0207 	bic.w	r2, r3, #7
 800266e:	498b      	ldr	r1, [pc, #556]	; (800289c <HAL_RCC_ClockConfig+0x25c>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b89      	ldr	r3, [pc, #548]	; (800289c <HAL_RCC_ClockConfig+0x25c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e14a      	b.n	800291e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002694:	4b82      	ldr	r3, [pc, #520]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	497f      	ldr	r1, [pc, #508]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80dc 	beq.w	800286c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d13c      	bne.n	8002736 <HAL_RCC_ClockConfig+0xf6>
 80026bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d102      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xa6>
 80026e0:	4b6f      	ldr	r3, [pc, #444]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	e00f      	b.n	8002706 <HAL_RCC_ClockConfig+0xc6>
 80026e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	667b      	str	r3, [r7, #100]	; 0x64
 80026f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026f8:	663b      	str	r3, [r7, #96]	; 0x60
 80026fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002702:	4b67      	ldr	r3, [pc, #412]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800270a:	65ba      	str	r2, [r7, #88]	; 0x58
 800270c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800270e:	fa92 f2a2 	rbit	r2, r2
 8002712:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002716:	fab2 f282 	clz	r2, r2
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	f042 0220 	orr.w	r2, r2, #32
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	f002 021f 	and.w	r2, r2, #31
 8002726:	2101      	movs	r1, #1
 8002728:	fa01 f202 	lsl.w	r2, r1, r2
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d17b      	bne.n	800282a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e0f3      	b.n	800291e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d13c      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x178>
 800273e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002742:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800274c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	b2db      	uxtb	r3, r3
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d102      	bne.n	8002768 <HAL_RCC_ClockConfig+0x128>
 8002762:	4b4f      	ldr	r3, [pc, #316]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	e00f      	b.n	8002788 <HAL_RCC_ClockConfig+0x148>
 8002768:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800276c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	647b      	str	r3, [r7, #68]	; 0x44
 8002776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800277a:	643b      	str	r3, [r7, #64]	; 0x40
 800277c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002784:	4b46      	ldr	r3, [pc, #280]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800278c:	63ba      	str	r2, [r7, #56]	; 0x38
 800278e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002790:	fa92 f2a2 	rbit	r2, r2
 8002794:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002798:	fab2 f282 	clz	r2, r2
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	f042 0220 	orr.w	r2, r2, #32
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	f002 021f 	and.w	r2, r2, #31
 80027a8:	2101      	movs	r1, #1
 80027aa:	fa01 f202 	lsl.w	r2, r1, r2
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d13a      	bne.n	800282a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0b2      	b.n	800291e <HAL_RCC_ClockConfig+0x2de>
 80027b8:	2302      	movs	r3, #2
 80027ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d102      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x1a0>
 80027da:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	e00d      	b.n	80027fc <HAL_RCC_ClockConfig+0x1bc>
 80027e0:	2302      	movs	r3, #2
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
 80027ec:	2302      	movs	r3, #2
 80027ee:	623b      	str	r3, [r7, #32]
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	4b29      	ldr	r3, [pc, #164]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	2202      	movs	r2, #2
 80027fe:	61ba      	str	r2, [r7, #24]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	fa92 f2a2 	rbit	r2, r2
 8002806:	617a      	str	r2, [r7, #20]
  return result;
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	fab2 f282 	clz	r2, r2
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	f042 0220 	orr.w	r2, r2, #32
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	f002 021f 	and.w	r2, r2, #31
 800281a:	2101      	movs	r1, #1
 800281c:	fa01 f202 	lsl.w	r2, r1, r2
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e079      	b.n	800291e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282a:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f023 0203 	bic.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	491a      	ldr	r1, [pc, #104]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800283c:	f7fe fbc8 	bl	8000fd0 <HAL_GetTick>
 8002840:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	e00a      	b.n	800285a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002844:	f7fe fbc4 	bl	8000fd0 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e061      	b.n	800291e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 020c 	and.w	r2, r3, #12
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	429a      	cmp	r2, r3
 800286a:	d1eb      	bne.n	8002844 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_ClockConfig+0x25c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d214      	bcs.n	80028a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <HAL_RCC_ClockConfig+0x25c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 0207 	bic.w	r2, r3, #7
 8002882:	4906      	ldr	r1, [pc, #24]	; (800289c <HAL_RCC_ClockConfig+0x25c>)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b04      	ldr	r3, [pc, #16]	; (800289c <HAL_RCC_ClockConfig+0x25c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e040      	b.n	800291e <HAL_RCC_ClockConfig+0x2de>
 800289c:	40022000 	.word	0x40022000
 80028a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b0:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_RCC_ClockConfig+0x2e8>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	491a      	ldr	r1, [pc, #104]	; (8002928 <HAL_RCC_ClockConfig+0x2e8>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d009      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ce:	4b16      	ldr	r3, [pc, #88]	; (8002928 <HAL_RCC_ClockConfig+0x2e8>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4912      	ldr	r1, [pc, #72]	; (8002928 <HAL_RCC_ClockConfig+0x2e8>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028e2:	f000 f829 	bl	8002938 <HAL_RCC_GetSysClockFreq>
 80028e6:	4601      	mov	r1, r0
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <HAL_RCC_ClockConfig+0x2e8>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f0:	22f0      	movs	r2, #240	; 0xf0
 80028f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	fa92 f2a2 	rbit	r2, r2
 80028fa:	60fa      	str	r2, [r7, #12]
  return result;
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	fab2 f282 	clz	r2, r2
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	40d3      	lsrs	r3, r2
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <HAL_RCC_ClockConfig+0x2ec>)
 8002908:	5cd3      	ldrb	r3, [r2, r3]
 800290a:	fa21 f303 	lsr.w	r3, r1, r3
 800290e:	4a08      	ldr	r2, [pc, #32]	; (8002930 <HAL_RCC_ClockConfig+0x2f0>)
 8002910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_RCC_ClockConfig+0x2f4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fb16 	bl	8000f48 <HAL_InitTick>
  
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3778      	adds	r7, #120	; 0x78
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	08003fc0 	.word	0x08003fc0
 8002930:	20000004 	.word	0x20000004
 8002934:	20000008 	.word	0x20000008

08002938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002938:	b480      	push	{r7}
 800293a:	b08b      	sub	sp, #44	; 0x2c
 800293c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002952:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b04      	cmp	r3, #4
 8002960:	d002      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x30>
 8002962:	2b08      	cmp	r3, #8
 8002964:	d003      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0x36>
 8002966:	e03f      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002968:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xc8>)
 800296a:	623b      	str	r3, [r7, #32]
      break;
 800296c:	e03f      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002974:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002978:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	fa92 f2a2 	rbit	r2, r2
 8002980:	607a      	str	r2, [r7, #4]
  return result;
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	fab2 f282 	clz	r2, r2
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	40d3      	lsrs	r3, r2
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xcc>)
 800298e:	5cd3      	ldrb	r3, [r2, r3]
 8002990:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002992:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	220f      	movs	r2, #15
 800299c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	fa92 f2a2 	rbit	r2, r2
 80029a4:	60fa      	str	r2, [r7, #12]
  return result;
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	fab2 f282 	clz	r2, r2
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	40d3      	lsrs	r3, r2
 80029b0:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029b2:	5cd3      	ldrb	r3, [r2, r3]
 80029b4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029c0:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
 80029d0:	e007      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029d2:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	fb02 f303 	mul.w	r3, r2, r3
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	623b      	str	r3, [r7, #32]
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029ea:	623b      	str	r3, [r7, #32]
      break;
 80029ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ee:	6a3b      	ldr	r3, [r7, #32]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	372c      	adds	r7, #44	; 0x2c
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40021000 	.word	0x40021000
 8002a00:	007a1200 	.word	0x007a1200
 8002a04:	08003fd0 	.word	0x08003fd0
 8002a08:	08003fe0 	.word	0x08003fe0

08002a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b092      	sub	sp, #72	; 0x48
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80d4 	beq.w	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a30:	4b4e      	ldr	r3, [pc, #312]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10e      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3c:	4b4b      	ldr	r3, [pc, #300]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	4a4a      	ldr	r2, [pc, #296]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a46:	61d3      	str	r3, [r2, #28]
 8002a48:	4b48      	ldr	r3, [pc, #288]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a54:	2301      	movs	r3, #1
 8002a56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5a:	4b45      	ldr	r3, [pc, #276]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d118      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a66:	4b42      	ldr	r3, [pc, #264]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a41      	ldr	r2, [pc, #260]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a72:	f7fe faad 	bl	8000fd0 <HAL_GetTick>
 8002a76:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a78:	e008      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7a:	f7fe faa9 	bl	8000fd0 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b64      	cmp	r3, #100	; 0x64
 8002a86:	d901      	bls.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e1d6      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a98:	4b34      	ldr	r3, [pc, #208]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8084 	beq.w	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d07c      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ab8:	4b2c      	ldr	r3, [pc, #176]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b26      	ldr	r3, [pc, #152]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	461a      	mov	r2, r3
 8002b06:	2300      	movs	r3, #0
 8002b08:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b0a:	4a18      	ldr	r2, [pc, #96]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d04b      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fa59 	bl	8000fd0 <HAL_GetTick>
 8002b1e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7fe fa55 	bl	8000fd0 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e180      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
 8002b44:	2302      	movs	r3, #2
 8002b46:	623b      	str	r3, [r7, #32]
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	61fb      	str	r3, [r7, #28]
  return result;
 8002b50:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d108      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b66:	4b01      	ldr	r3, [pc, #4]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	e00d      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40007000 	.word	0x40007000
 8002b74:	10908100 	.word	0x10908100
 8002b78:	2302      	movs	r3, #2
 8002b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	4b9a      	ldr	r3, [pc, #616]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	2202      	movs	r2, #2
 8002b8a:	613a      	str	r2, [r7, #16]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	fa92 f2a2 	rbit	r2, r2
 8002b92:	60fa      	str	r2, [r7, #12]
  return result;
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	fab2 f282 	clz	r2, r2
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	f002 021f 	and.w	r2, r2, #31
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0b7      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002bb2:	4b8f      	ldr	r3, [pc, #572]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	498c      	ldr	r1, [pc, #560]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d105      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bcc:	4b88      	ldr	r3, [pc, #544]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	4a87      	ldr	r2, [pc, #540]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002be4:	4b82      	ldr	r3, [pc, #520]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	f023 0203 	bic.w	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	497f      	ldr	r1, [pc, #508]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c02:	4b7b      	ldr	r3, [pc, #492]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	4978      	ldr	r1, [pc, #480]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c20:	4b73      	ldr	r3, [pc, #460]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	4970      	ldr	r1, [pc, #448]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c3e:	4b6c      	ldr	r3, [pc, #432]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f023 0210 	bic.w	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4969      	ldr	r1, [pc, #420]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c5c:	4b64      	ldr	r3, [pc, #400]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c68:	4961      	ldr	r1, [pc, #388]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c7a:	4b5d      	ldr	r3, [pc, #372]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f023 0220 	bic.w	r2, r3, #32
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	495a      	ldr	r1, [pc, #360]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c98:	4b55      	ldr	r3, [pc, #340]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	4952      	ldr	r1, [pc, #328]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cb6:	4b4e      	ldr	r3, [pc, #312]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	494b      	ldr	r1, [pc, #300]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cd4:	4b46      	ldr	r3, [pc, #280]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	4943      	ldr	r1, [pc, #268]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cf2:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	493c      	ldr	r1, [pc, #240]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d10:	4b37      	ldr	r3, [pc, #220]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	4934      	ldr	r1, [pc, #208]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002d2e:	4b30      	ldr	r3, [pc, #192]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	492d      	ldr	r1, [pc, #180]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d4c:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d58:	4925      	ldr	r1, [pc, #148]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002d6a:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	491e      	ldr	r1, [pc, #120]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	4916      	ldr	r1, [pc, #88]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db2:	490f      	ldr	r1, [pc, #60]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd0:	4907      	ldr	r1, [pc, #28]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00c      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002de2:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	e002      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df6:	4913      	ldr	r1, [pc, #76]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002e08:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e14:	490b      	ldr	r1, [pc, #44]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002e26:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e32:	4904      	ldr	r1, [pc, #16]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3748      	adds	r7, #72	; 0x48
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000

08002e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e09d      	b.n	8002f96 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d108      	bne.n	8002e74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e6a:	d009      	beq.n	8002e80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61da      	str	r2, [r3, #28]
 8002e72:	e005      	b.n	8002e80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd ff52 	bl	8000d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ec0:	d902      	bls.n	8002ec8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e002      	b.n	8002ece <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ecc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ed6:	d007      	beq.n	8002ee8 <HAL_SPI_Init+0xa0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ee0:	d002      	beq.n	8002ee8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	ea42 0103 	orr.w	r1, r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	0c1b      	lsrs	r3, r3, #16
 8002f44:	f003 0204 	and.w	r2, r3, #4
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f64:	ea42 0103 	orr.w	r1, r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b08a      	sub	sp, #40	; 0x28
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fac:	2301      	movs	r3, #1
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_SPI_TransmitReceive+0x26>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e1fb      	b.n	80033bc <HAL_SPI_TransmitReceive+0x41e>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fcc:	f7fe f800 	bl	8000fd0 <HAL_GetTick>
 8002fd0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fd8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002fe4:	887b      	ldrh	r3, [r7, #2]
 8002fe6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fe8:	7efb      	ldrb	r3, [r7, #27]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d00e      	beq.n	800300c <HAL_SPI_TransmitReceive+0x6e>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ff4:	d106      	bne.n	8003004 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_SPI_TransmitReceive+0x66>
 8002ffe:	7efb      	ldrb	r3, [r7, #27]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d003      	beq.n	800300c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003004:	2302      	movs	r3, #2
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800300a:	e1cd      	b.n	80033a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_SPI_TransmitReceive+0x80>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_SPI_TransmitReceive+0x80>
 8003018:	887b      	ldrh	r3, [r7, #2]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d103      	bne.n	8003026 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003024:	e1c0      	b.n	80033a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b04      	cmp	r3, #4
 8003030:	d003      	beq.n	800303a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2205      	movs	r2, #5
 8003036:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	887a      	ldrh	r2, [r7, #2]
 800304a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	887a      	ldrh	r2, [r7, #2]
 8003052:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	887a      	ldrh	r2, [r7, #2]
 8003060:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	887a      	ldrh	r2, [r7, #2]
 8003066:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800307c:	d802      	bhi.n	8003084 <HAL_SPI_TransmitReceive+0xe6>
 800307e:	8a3b      	ldrh	r3, [r7, #16]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d908      	bls.n	8003096 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	e007      	b.n	80030a6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030a4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d007      	beq.n	80030c4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030cc:	d97c      	bls.n	80031c8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_SPI_TransmitReceive+0x13e>
 80030d6:	8a7b      	ldrh	r3, [r7, #18]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d169      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	881a      	ldrh	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	1c9a      	adds	r2, r3, #2
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003100:	e056      	b.n	80031b0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b02      	cmp	r3, #2
 800310e:	d11b      	bne.n	8003148 <HAL_SPI_TransmitReceive+0x1aa>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d016      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x1aa>
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	2b01      	cmp	r3, #1
 800311e:	d113      	bne.n	8003148 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	881a      	ldrh	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	1c9a      	adds	r2, r3, #2
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b01      	cmp	r3, #1
 8003154:	d11c      	bne.n	8003190 <HAL_SPI_TransmitReceive+0x1f2>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d016      	beq.n	8003190 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	b292      	uxth	r2, r2
 800316e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	1c9a      	adds	r2, r3, #2
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800318c:	2301      	movs	r3, #1
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003190:	f7fd ff1e 	bl	8000fd0 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800319c:	429a      	cmp	r2, r3
 800319e:	d807      	bhi.n	80031b0 <HAL_SPI_TransmitReceive+0x212>
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	d003      	beq.n	80031b0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80031ae:	e0fb      	b.n	80033a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1a3      	bne.n	8003102 <HAL_SPI_TransmitReceive+0x164>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d19d      	bne.n	8003102 <HAL_SPI_TransmitReceive+0x164>
 80031c6:	e0df      	b.n	8003388 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_SPI_TransmitReceive+0x23a>
 80031d0:	8a7b      	ldrh	r3, [r7, #18]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	f040 80cb 	bne.w	800336e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d912      	bls.n	8003208 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	881a      	ldrh	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	1c9a      	adds	r2, r3, #2
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b02      	subs	r3, #2
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003206:	e0b2      	b.n	800336e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	7812      	ldrb	r2, [r2, #0]
 8003214:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800322e:	e09e      	b.n	800336e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b02      	cmp	r3, #2
 800323c:	d134      	bne.n	80032a8 <HAL_SPI_TransmitReceive+0x30a>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d02f      	beq.n	80032a8 <HAL_SPI_TransmitReceive+0x30a>
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	2b01      	cmp	r3, #1
 800324c:	d12c      	bne.n	80032a8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d912      	bls.n	800327e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	881a      	ldrh	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	1c9a      	adds	r2, r3, #2
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b02      	subs	r3, #2
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800327c:	e012      	b.n	80032a4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	330c      	adds	r3, #12
 8003288:	7812      	ldrb	r2, [r2, #0]
 800328a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d148      	bne.n	8003348 <HAL_SPI_TransmitReceive+0x3aa>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d042      	beq.n	8003348 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d923      	bls.n	8003316 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	b292      	uxth	r2, r2
 80032da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	1c9a      	adds	r2, r3, #2
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b02      	subs	r3, #2
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d81f      	bhi.n	8003344 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	e016      	b.n	8003344 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f103 020c 	add.w	r2, r3, #12
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	7812      	ldrb	r2, [r2, #0]
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003344:	2301      	movs	r3, #1
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003348:	f7fd fe42 	bl	8000fd0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003354:	429a      	cmp	r2, r3
 8003356:	d803      	bhi.n	8003360 <HAL_SPI_TransmitReceive+0x3c2>
 8003358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d102      	bne.n	8003366 <HAL_SPI_TransmitReceive+0x3c8>
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	2b00      	cmp	r3, #0
 8003364:	d103      	bne.n	800336e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800336c:	e01c      	b.n	80033a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	f47f af5b 	bne.w	8003230 <HAL_SPI_TransmitReceive+0x292>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	f47f af54 	bne.w	8003230 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f937 	bl	8003600 <SPI_EndRxTxTransaction>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d006      	beq.n	80033a6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	661a      	str	r2, [r3, #96]	; 0x60
 80033a4:	e000      	b.n	80033a8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80033a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3728      	adds	r7, #40	; 0x28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	4613      	mov	r3, r2
 80033d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033d4:	f7fd fdfc 	bl	8000fd0 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	4413      	add	r3, r2
 80033e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033e4:	f7fd fdf4 	bl	8000fd0 <HAL_GetTick>
 80033e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033ea:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	015b      	lsls	r3, r3, #5
 80033f0:	0d1b      	lsrs	r3, r3, #20
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	fb02 f303 	mul.w	r3, r2, r3
 80033f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033fa:	e054      	b.n	80034a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003402:	d050      	beq.n	80034a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003404:	f7fd fde4 	bl	8000fd0 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	429a      	cmp	r2, r3
 8003412:	d902      	bls.n	800341a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d13d      	bne.n	8003496 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003428:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003432:	d111      	bne.n	8003458 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343c:	d004      	beq.n	8003448 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003446:	d107      	bne.n	8003458 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003456:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003460:	d10f      	bne.n	8003482 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003480:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e017      	b.n	80034c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4013      	ands	r3, r2
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	bf0c      	ite	eq
 80034b6:	2301      	moveq	r3, #1
 80034b8:	2300      	movne	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d19b      	bne.n	80033fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000004 	.word	0x20000004

080034d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034e6:	f7fd fd73 	bl	8000fd0 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	4413      	add	r3, r2
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80034f6:	f7fd fd6b 	bl	8000fd0 <HAL_GetTick>
 80034fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	330c      	adds	r3, #12
 8003502:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003504:	4b3d      	ldr	r3, [pc, #244]	; (80035fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00da      	lsls	r2, r3, #3
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	0d1b      	lsrs	r3, r3, #20
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	fb02 f303 	mul.w	r3, r2, r3
 800351a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800351c:	e060      	b.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003524:	d107      	bne.n	8003536 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d104      	bne.n	8003536 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003534:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d050      	beq.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800353e:	f7fd fd47 	bl	8000fd0 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354a:	429a      	cmp	r2, r3
 800354c:	d902      	bls.n	8003554 <SPI_WaitFifoStateUntilTimeout+0x80>
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	2b00      	cmp	r3, #0
 8003552:	d13d      	bne.n	80035d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003562:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800356c:	d111      	bne.n	8003592 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003576:	d004      	beq.n	8003582 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003580:	d107      	bne.n	8003592 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003590:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359a:	d10f      	bne.n	80035bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e010      	b.n	80035f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	3b01      	subs	r3, #1
 80035de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d196      	bne.n	800351e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3728      	adds	r7, #40	; 0x28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000004 	.word	0x20000004

08003600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2200      	movs	r2, #0
 8003614:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff ff5b 	bl	80034d4 <SPI_WaitFifoStateUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e027      	b.n	8003684 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2200      	movs	r2, #0
 800363c:	2180      	movs	r1, #128	; 0x80
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f7ff fec0 	bl	80033c4 <SPI_WaitFlagStateUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d007      	beq.n	800365a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364e:	f043 0220 	orr.w	r2, r3, #32
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e014      	b.n	8003684 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2200      	movs	r2, #0
 8003662:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f7ff ff34 	bl	80034d4 <SPI_WaitFifoStateUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e000      	b.n	8003684 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e049      	b.n	8003732 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fb9c 	bl	8000df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f000 fa50 	bl	8003b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b02      	cmp	r3, #2
 800374e:	d122      	bne.n	8003796 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b02      	cmp	r3, #2
 800375c:	d11b      	bne.n	8003796 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f06f 0202 	mvn.w	r2, #2
 8003766:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f9d8 	bl	8003b32 <HAL_TIM_IC_CaptureCallback>
 8003782:	e005      	b.n	8003790 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f9ca 	bl	8003b1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f9db 	bl	8003b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d122      	bne.n	80037ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d11b      	bne.n	80037ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f06f 0204 	mvn.w	r2, #4
 80037ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f9ae 	bl	8003b32 <HAL_TIM_IC_CaptureCallback>
 80037d6:	e005      	b.n	80037e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f9a0 	bl	8003b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f9b1 	bl	8003b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d122      	bne.n	800383e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b08      	cmp	r3, #8
 8003804:	d11b      	bne.n	800383e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f06f 0208 	mvn.w	r2, #8
 800380e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2204      	movs	r2, #4
 8003814:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f984 	bl	8003b32 <HAL_TIM_IC_CaptureCallback>
 800382a:	e005      	b.n	8003838 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f976 	bl	8003b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f987 	bl	8003b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b10      	cmp	r3, #16
 800384a:	d122      	bne.n	8003892 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b10      	cmp	r3, #16
 8003858:	d11b      	bne.n	8003892 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f06f 0210 	mvn.w	r2, #16
 8003862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2208      	movs	r2, #8
 8003868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f95a 	bl	8003b32 <HAL_TIM_IC_CaptureCallback>
 800387e:	e005      	b.n	800388c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f94c 	bl	8003b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f95d 	bl	8003b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b01      	cmp	r3, #1
 800389e:	d10e      	bne.n	80038be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d107      	bne.n	80038be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f06f 0201 	mvn.w	r2, #1
 80038b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f926 	bl	8003b0a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	2b80      	cmp	r3, #128	; 0x80
 80038ca:	d10e      	bne.n	80038ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d6:	2b80      	cmp	r3, #128	; 0x80
 80038d8:	d107      	bne.n	80038ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fb11 	bl	8003f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f8:	d10e      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d107      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fb04 	bl	8003f20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d10e      	bne.n	8003944 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d107      	bne.n	8003944 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800393c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f90b 	bl	8003b5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b20      	cmp	r3, #32
 8003950:	d10e      	bne.n	8003970 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b20      	cmp	r3, #32
 800395e:	d107      	bne.n	8003970 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0220 	mvn.w	r2, #32
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fac4 	bl	8003ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_TIM_ConfigClockSource+0x1c>
 8003990:	2302      	movs	r3, #2
 8003992:	e0b6      	b.n	8003b02 <HAL_TIM_ConfigClockSource+0x18a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d0:	d03e      	beq.n	8003a50 <HAL_TIM_ConfigClockSource+0xd8>
 80039d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d6:	f200 8087 	bhi.w	8003ae8 <HAL_TIM_ConfigClockSource+0x170>
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039de:	f000 8086 	beq.w	8003aee <HAL_TIM_ConfigClockSource+0x176>
 80039e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e6:	d87f      	bhi.n	8003ae8 <HAL_TIM_ConfigClockSource+0x170>
 80039e8:	2b70      	cmp	r3, #112	; 0x70
 80039ea:	d01a      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0xaa>
 80039ec:	2b70      	cmp	r3, #112	; 0x70
 80039ee:	d87b      	bhi.n	8003ae8 <HAL_TIM_ConfigClockSource+0x170>
 80039f0:	2b60      	cmp	r3, #96	; 0x60
 80039f2:	d050      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x11e>
 80039f4:	2b60      	cmp	r3, #96	; 0x60
 80039f6:	d877      	bhi.n	8003ae8 <HAL_TIM_ConfigClockSource+0x170>
 80039f8:	2b50      	cmp	r3, #80	; 0x50
 80039fa:	d03c      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0xfe>
 80039fc:	2b50      	cmp	r3, #80	; 0x50
 80039fe:	d873      	bhi.n	8003ae8 <HAL_TIM_ConfigClockSource+0x170>
 8003a00:	2b40      	cmp	r3, #64	; 0x40
 8003a02:	d058      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0x13e>
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d86f      	bhi.n	8003ae8 <HAL_TIM_ConfigClockSource+0x170>
 8003a08:	2b30      	cmp	r3, #48	; 0x30
 8003a0a:	d064      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0x15e>
 8003a0c:	2b30      	cmp	r3, #48	; 0x30
 8003a0e:	d86b      	bhi.n	8003ae8 <HAL_TIM_ConfigClockSource+0x170>
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d060      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0x15e>
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	d867      	bhi.n	8003ae8 <HAL_TIM_ConfigClockSource+0x170>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d05c      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0x15e>
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d05a      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0x15e>
 8003a20:	e062      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6899      	ldr	r1, [r3, #8]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f000 f9b5 	bl	8003da0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	609a      	str	r2, [r3, #8]
      break;
 8003a4e:	e04f      	b.n	8003af0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	6899      	ldr	r1, [r3, #8]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f000 f99e 	bl	8003da0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a72:	609a      	str	r2, [r3, #8]
      break;
 8003a74:	e03c      	b.n	8003af0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6859      	ldr	r1, [r3, #4]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	461a      	mov	r2, r3
 8003a84:	f000 f912 	bl	8003cac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2150      	movs	r1, #80	; 0x50
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f96b 	bl	8003d6a <TIM_ITRx_SetConfig>
      break;
 8003a94:	e02c      	b.n	8003af0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	6859      	ldr	r1, [r3, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f000 f931 	bl	8003d0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2160      	movs	r1, #96	; 0x60
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f95b 	bl	8003d6a <TIM_ITRx_SetConfig>
      break;
 8003ab4:	e01c      	b.n	8003af0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6859      	ldr	r1, [r3, #4]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f000 f8f2 	bl	8003cac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2140      	movs	r1, #64	; 0x40
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f94b 	bl	8003d6a <TIM_ITRx_SetConfig>
      break;
 8003ad4:	e00c      	b.n	8003af0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	f000 f942 	bl	8003d6a <TIM_ITRx_SetConfig>
      break;
 8003ae6:	e003      	b.n	8003af0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
      break;
 8003aec:	e000      	b.n	8003af0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003aee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a42      	ldr	r2, [pc, #264]	; (8003c8c <TIM_Base_SetConfig+0x11c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d013      	beq.n	8003bb0 <TIM_Base_SetConfig+0x40>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8e:	d00f      	beq.n	8003bb0 <TIM_Base_SetConfig+0x40>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a3f      	ldr	r2, [pc, #252]	; (8003c90 <TIM_Base_SetConfig+0x120>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00b      	beq.n	8003bb0 <TIM_Base_SetConfig+0x40>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a3e      	ldr	r2, [pc, #248]	; (8003c94 <TIM_Base_SetConfig+0x124>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d007      	beq.n	8003bb0 <TIM_Base_SetConfig+0x40>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a3d      	ldr	r2, [pc, #244]	; (8003c98 <TIM_Base_SetConfig+0x128>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_Base_SetConfig+0x40>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a3c      	ldr	r2, [pc, #240]	; (8003c9c <TIM_Base_SetConfig+0x12c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d108      	bne.n	8003bc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a31      	ldr	r2, [pc, #196]	; (8003c8c <TIM_Base_SetConfig+0x11c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01f      	beq.n	8003c0a <TIM_Base_SetConfig+0x9a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd0:	d01b      	beq.n	8003c0a <TIM_Base_SetConfig+0x9a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a2e      	ldr	r2, [pc, #184]	; (8003c90 <TIM_Base_SetConfig+0x120>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d017      	beq.n	8003c0a <TIM_Base_SetConfig+0x9a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a2d      	ldr	r2, [pc, #180]	; (8003c94 <TIM_Base_SetConfig+0x124>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <TIM_Base_SetConfig+0x9a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a2c      	ldr	r2, [pc, #176]	; (8003c98 <TIM_Base_SetConfig+0x128>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00f      	beq.n	8003c0a <TIM_Base_SetConfig+0x9a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a2c      	ldr	r2, [pc, #176]	; (8003ca0 <TIM_Base_SetConfig+0x130>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00b      	beq.n	8003c0a <TIM_Base_SetConfig+0x9a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a2b      	ldr	r2, [pc, #172]	; (8003ca4 <TIM_Base_SetConfig+0x134>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d007      	beq.n	8003c0a <TIM_Base_SetConfig+0x9a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2a      	ldr	r2, [pc, #168]	; (8003ca8 <TIM_Base_SetConfig+0x138>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d003      	beq.n	8003c0a <TIM_Base_SetConfig+0x9a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a25      	ldr	r2, [pc, #148]	; (8003c9c <TIM_Base_SetConfig+0x12c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d108      	bne.n	8003c1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a12      	ldr	r2, [pc, #72]	; (8003c8c <TIM_Base_SetConfig+0x11c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d013      	beq.n	8003c70 <TIM_Base_SetConfig+0x100>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <TIM_Base_SetConfig+0x128>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00f      	beq.n	8003c70 <TIM_Base_SetConfig+0x100>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <TIM_Base_SetConfig+0x130>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00b      	beq.n	8003c70 <TIM_Base_SetConfig+0x100>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a12      	ldr	r2, [pc, #72]	; (8003ca4 <TIM_Base_SetConfig+0x134>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d007      	beq.n	8003c70 <TIM_Base_SetConfig+0x100>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a11      	ldr	r2, [pc, #68]	; (8003ca8 <TIM_Base_SetConfig+0x138>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d003      	beq.n	8003c70 <TIM_Base_SetConfig+0x100>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a0c      	ldr	r2, [pc, #48]	; (8003c9c <TIM_Base_SetConfig+0x12c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d103      	bne.n	8003c78 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	615a      	str	r2, [r3, #20]
}
 8003c7e:	bf00      	nop
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40000800 	.word	0x40000800
 8003c98:	40013400 	.word	0x40013400
 8003c9c:	40015000 	.word	0x40015000
 8003ca0:	40014000 	.word	0x40014000
 8003ca4:	40014400 	.word	0x40014400
 8003ca8:	40014800 	.word	0x40014800

08003cac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	f023 0201 	bic.w	r2, r3, #1
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f023 030a 	bic.w	r3, r3, #10
 8003ce8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	621a      	str	r2, [r3, #32]
}
 8003cfe:	bf00      	nop
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b087      	sub	sp, #28
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f023 0210 	bic.w	r2, r3, #16
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	031b      	lsls	r3, r3, #12
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f043 0307 	orr.w	r3, r3, #7
 8003d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	609a      	str	r2, [r3, #8]
}
 8003d94:	bf00      	nop
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	021a      	lsls	r2, r3, #8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	609a      	str	r2, [r3, #8]
}
 8003dd4:	bf00      	nop
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e06d      	b.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a30      	ldr	r2, [pc, #192]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d009      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a2f      	ldr	r2, [pc, #188]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a2d      	ldr	r2, [pc, #180]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d108      	bne.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d01d      	beq.n	8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e74:	d018      	beq.n	8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1c      	ldr	r2, [pc, #112]	; (8003eec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a1a      	ldr	r2, [pc, #104]	; (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00e      	beq.n	8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d009      	beq.n	8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a16      	ldr	r2, [pc, #88]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a11      	ldr	r2, [pc, #68]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d10c      	bne.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40013400 	.word	0x40013400
 8003ee8:	40015000 	.word	0x40015000
 8003eec:	40000400 	.word	0x40000400
 8003ef0:	40000800 	.word	0x40000800
 8003ef4:	40014000 	.word	0x40014000

08003ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <__libc_init_array>:
 8003f34:	b570      	push	{r4, r5, r6, lr}
 8003f36:	4d0d      	ldr	r5, [pc, #52]	; (8003f6c <__libc_init_array+0x38>)
 8003f38:	4c0d      	ldr	r4, [pc, #52]	; (8003f70 <__libc_init_array+0x3c>)
 8003f3a:	1b64      	subs	r4, r4, r5
 8003f3c:	10a4      	asrs	r4, r4, #2
 8003f3e:	2600      	movs	r6, #0
 8003f40:	42a6      	cmp	r6, r4
 8003f42:	d109      	bne.n	8003f58 <__libc_init_array+0x24>
 8003f44:	4d0b      	ldr	r5, [pc, #44]	; (8003f74 <__libc_init_array+0x40>)
 8003f46:	4c0c      	ldr	r4, [pc, #48]	; (8003f78 <__libc_init_array+0x44>)
 8003f48:	f000 f82e 	bl	8003fa8 <_init>
 8003f4c:	1b64      	subs	r4, r4, r5
 8003f4e:	10a4      	asrs	r4, r4, #2
 8003f50:	2600      	movs	r6, #0
 8003f52:	42a6      	cmp	r6, r4
 8003f54:	d105      	bne.n	8003f62 <__libc_init_array+0x2e>
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
 8003f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f5c:	4798      	blx	r3
 8003f5e:	3601      	adds	r6, #1
 8003f60:	e7ee      	b.n	8003f40 <__libc_init_array+0xc>
 8003f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f66:	4798      	blx	r3
 8003f68:	3601      	adds	r6, #1
 8003f6a:	e7f2      	b.n	8003f52 <__libc_init_array+0x1e>
 8003f6c:	08003ff0 	.word	0x08003ff0
 8003f70:	08003ff0 	.word	0x08003ff0
 8003f74:	08003ff0 	.word	0x08003ff0
 8003f78:	08003ff4 	.word	0x08003ff4

08003f7c <memcpy>:
 8003f7c:	440a      	add	r2, r1
 8003f7e:	4291      	cmp	r1, r2
 8003f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f84:	d100      	bne.n	8003f88 <memcpy+0xc>
 8003f86:	4770      	bx	lr
 8003f88:	b510      	push	{r4, lr}
 8003f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f92:	4291      	cmp	r1, r2
 8003f94:	d1f9      	bne.n	8003f8a <memcpy+0xe>
 8003f96:	bd10      	pop	{r4, pc}

08003f98 <memset>:
 8003f98:	4402      	add	r2, r0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d100      	bne.n	8003fa2 <memset+0xa>
 8003fa0:	4770      	bx	lr
 8003fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fa6:	e7f9      	b.n	8003f9c <memset+0x4>

08003fa8 <_init>:
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003faa:	bf00      	nop
 8003fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fae:	bc08      	pop	{r3}
 8003fb0:	469e      	mov	lr, r3
 8003fb2:	4770      	bx	lr

08003fb4 <_fini>:
 8003fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb6:	bf00      	nop
 8003fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fba:	bc08      	pop	{r3}
 8003fbc:	469e      	mov	lr, r3
 8003fbe:	4770      	bx	lr
