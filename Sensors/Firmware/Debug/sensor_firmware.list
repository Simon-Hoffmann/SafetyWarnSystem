
sensor_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f30  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080040c4  080040c4  000140c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f4  080040f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080040f4  080040f4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040f4  080040f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040f8  080040f8  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080040fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000000e0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d75f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021c0  00000000  00000000  0002d79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  0002f960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c50  00000000  00000000  000306b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022140  00000000  00000000  00031308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe63  00000000  00000000  00053448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc24f  00000000  00000000  000632ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f4fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003700  00000000  00000000  0012f54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080040ac 	.word	0x080040ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080040ac 	.word	0x080040ac

080001d4 <RFM69_initialize>:
// internal
static void RFM69_sendFrame(uint8_t toAddress, const void* buffer, uint8_t size, bool requestACK, bool sendACK);


bool RFM69_initialize(uint8_t freqBand, uint8_t nodeID, uint16_t networkID)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08e      	sub	sp, #56	; 0x38
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	80bb      	strh	r3, [r7, #4]
  const uint8_t CONFIG[][2] =
 80001e6:	f240 4301 	movw	r3, #1025	; 0x401
 80001ea:	813b      	strh	r3, [r7, #8]
 80001ec:	2302      	movs	r3, #2
 80001ee:	817b      	strh	r3, [r7, #10]
 80001f0:	f240 2303 	movw	r3, #515	; 0x203
 80001f4:	81bb      	strh	r3, [r7, #12]
 80001f6:	f244 0304 	movw	r3, #16388	; 0x4004
 80001fa:	81fb      	strh	r3, [r7, #14]
 80001fc:	f240 3305 	movw	r3, #773	; 0x305
 8000200:	823b      	strh	r3, [r7, #16]
 8000202:	f243 3306 	movw	r3, #13062	; 0x3306
 8000206:	827b      	strh	r3, [r7, #18]
 8000208:	2307      	movs	r3, #7
 800020a:	753b      	strb	r3, [r7, #20]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	2b1f      	cmp	r3, #31
 8000210:	d00b      	beq.n	800022a <RFM69_initialize+0x56>
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	2b2b      	cmp	r3, #43	; 0x2b
 8000216:	d006      	beq.n	8000226 <RFM69_initialize+0x52>
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	2b56      	cmp	r3, #86	; 0x56
 800021c:	d101      	bne.n	8000222 <RFM69_initialize+0x4e>
 800021e:	23d9      	movs	r3, #217	; 0xd9
 8000220:	e004      	b.n	800022c <RFM69_initialize+0x58>
 8000222:	23e4      	movs	r3, #228	; 0xe4
 8000224:	e002      	b.n	800022c <RFM69_initialize+0x58>
 8000226:	236c      	movs	r3, #108	; 0x6c
 8000228:	e000      	b.n	800022c <RFM69_initialize+0x58>
 800022a:	234e      	movs	r3, #78	; 0x4e
  const uint8_t CONFIG[][2] =
 800022c:	757b      	strb	r3, [r7, #21]
 800022e:	2308      	movs	r3, #8
 8000230:	75bb      	strb	r3, [r7, #22]
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b1f      	cmp	r3, #31
 8000236:	d00b      	beq.n	8000250 <RFM69_initialize+0x7c>
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	2b2b      	cmp	r3, #43	; 0x2b
 800023c:	d006      	beq.n	800024c <RFM69_initialize+0x78>
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	2b56      	cmp	r3, #86	; 0x56
 8000242:	d101      	bne.n	8000248 <RFM69_initialize+0x74>
 8000244:	2300      	movs	r3, #0
 8000246:	e004      	b.n	8000252 <RFM69_initialize+0x7e>
 8000248:	23c0      	movs	r3, #192	; 0xc0
 800024a:	e002      	b.n	8000252 <RFM69_initialize+0x7e>
 800024c:	2340      	movs	r3, #64	; 0x40
 800024e:	e000      	b.n	8000252 <RFM69_initialize+0x7e>
 8000250:	23c0      	movs	r3, #192	; 0xc0
  const uint8_t CONFIG[][2] =
 8000252:	75fb      	strb	r3, [r7, #23]
 8000254:	2309      	movs	r3, #9
 8000256:	833b      	strh	r3, [r7, #24]
 8000258:	f244 2319 	movw	r3, #16921	; 0x4219
 800025c:	837b      	strh	r3, [r7, #26]
 800025e:	f244 0325 	movw	r3, #16421	; 0x4025
 8000262:	83bb      	strh	r3, [r7, #28]
 8000264:	f240 7326 	movw	r3, #1830	; 0x726
 8000268:	83fb      	strh	r3, [r7, #30]
 800026a:	f241 0328 	movw	r3, #4136	; 0x1028
 800026e:	843b      	strh	r3, [r7, #32]
 8000270:	f64d 4329 	movw	r3, #56361	; 0xdc29
 8000274:	847b      	strh	r3, [r7, #34]	; 0x22
 8000276:	f648 032e 	movw	r3, #34862	; 0x882e
 800027a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800027c:	232f      	movs	r3, #47	; 0x2f
 800027e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* 0x26 */ { REG_DIOMAPPING2, RF_DIOMAPPING2_CLKOUT_OFF }, // DIO5 ClkOut disable for power saving
    /* 0x28 */ { REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN }, // writing to this bit ensures that the FIFO & status flags are reset
    /* 0x29 */ { REG_RSSITHRESH, 220 }, // must be set to dBm = (-Sensitivity / 2), default is 0xE4 = 228 so -114dBm
    ///* 0x2D */ { REG_PREAMBLELSB, RF_PREAMBLESIZE_LSB_VALUE } // default 3 preamble bytes 0xAAAAAA
    /* 0x2E */ { REG_SYNCCONFIG, RF_SYNC_ON | RF_SYNC_FIFOFILL_AUTO | RF_SYNC_SIZE_2 | RF_SYNC_TOL_0 },
    /* 0x2F */ { REG_SYNCVALUE1, (uint8_t)(networkID & 0x00FF) },  // NETWORK ID lower 8 bits
 8000282:	88bb      	ldrh	r3, [r7, #4]
 8000284:	b2db      	uxtb	r3, r3
  const uint8_t CONFIG[][2] =
 8000286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800028a:	2330      	movs	r3, #48	; 0x30
 800028c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    /* 0x30 */ { REG_SYNCVALUE2, (uint8_t)(networkID >> 8) },      // NETWORK ID higher 8 bits
 8000290:	88bb      	ldrh	r3, [r7, #4]
 8000292:	0a1b      	lsrs	r3, r3, #8
 8000294:	b29b      	uxth	r3, r3
 8000296:	b2db      	uxtb	r3, r3
  const uint8_t CONFIG[][2] =
 8000298:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800029c:	f249 0337 	movw	r3, #36919	; 0x9037
 80002a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80002a2:	f244 2338 	movw	r3, #16952	; 0x4238
 80002a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80002a8:	f648 733c 	movw	r3, #36668	; 0x8f3c
 80002ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80002ae:	f241 233d 	movw	r3, #4669	; 0x123d
 80002b2:	863b      	strh	r3, [r7, #48]	; 0x30
 80002b4:	f243 036f 	movw	r3, #12399	; 0x306f
 80002b8:	867b      	strh	r3, [r7, #50]	; 0x32
 80002ba:	23ff      	movs	r3, #255	; 0xff
 80002bc:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode for Fading Margin Improvement, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
  uint8_t i;

  RFM69_SetCSPin(HIGH);
 80002be:	2001      	movs	r0, #1
 80002c0:	f000 fb5c 	bl	800097c <RFM69_SetCSPin>
  {
    RFM69_writeReg(REG_SYNCVALUE1, 0x55);
  }
  while (RFM69_readReg(REG_SYNCVALUE1) != 0x55 && !Timeout_IsTimeout1());
*/
  for (i = 0; CONFIG[i][0] != 255; i++)
 80002c4:	2300      	movs	r3, #0
 80002c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80002ca:	e016      	b.n	80002fa <RFM69_initialize+0x126>
  {
    RFM69_writeReg(CONFIG[i][0], CONFIG[i][1]);
 80002cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	3338      	adds	r3, #56	; 0x38
 80002d4:	443b      	add	r3, r7
 80002d6:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 80002da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	3338      	adds	r3, #56	; 0x38
 80002e2:	443b      	add	r3, r7
 80002e4:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 80002e8:	4619      	mov	r1, r3
 80002ea:	4610      	mov	r0, r2
 80002ec:	f000 fa71 	bl	80007d2 <RFM69_writeReg>
  for (i = 0; CONFIG[i][0] != 255; i++)
 80002f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002f4:	3301      	adds	r3, #1
 80002f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80002fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	3338      	adds	r3, #56	; 0x38
 8000302:	443b      	add	r3, r7
 8000304:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8000308:	2bff      	cmp	r3, #255	; 0xff
 800030a:	d1df      	bne.n	80002cc <RFM69_initialize+0xf8>

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  //encrypt(0);

  RFM69_setHighPower(ISRFM69HW); // called regardless if it's a RFM69W or RFM69HW
 800030c:	2001      	movs	r0, #1
 800030e:	f000 fa0c 	bl	800072a <RFM69_setHighPower>
  RFM69_setMode(RF69_MODE_STANDBY);
 8000312:	2001      	movs	r0, #1
 8000314:	f000 f824 	bl	8000360 <RFM69_setMode>
  Timeout_SetTimeout1(50);
 8000318:	2032      	movs	r0, #50	; 0x32
 800031a:	f000 fb6f 	bl	80009fc <Timeout_SetTimeout1>
  while (((RFM69_readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && !Timeout_IsTimeout1()); // wait for ModeReady
 800031e:	bf00      	nop
 8000320:	2027      	movs	r0, #39	; 0x27
 8000322:	f000 fa3c 	bl	800079e <RFM69_readReg>
 8000326:	4603      	mov	r3, r0
 8000328:	b25b      	sxtb	r3, r3
 800032a:	2b00      	cmp	r3, #0
 800032c:	db07      	blt.n	800033e <RFM69_initialize+0x16a>
 800032e:	f000 fb55 	bl	80009dc <Timeout_IsTimeout1>
 8000332:	4603      	mov	r3, r0
 8000334:	f083 0301 	eor.w	r3, r3, #1
 8000338:	b2db      	uxtb	r3, r3
 800033a:	2b00      	cmp	r3, #0
 800033c:	d1f0      	bne.n	8000320 <RFM69_initialize+0x14c>
  if (Timeout_IsTimeout1())
 800033e:	f000 fb4d 	bl	80009dc <Timeout_IsTimeout1>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <RFM69_initialize+0x178>
  {
    return false;
 8000348:	2300      	movs	r3, #0
 800034a:	e003      	b.n	8000354 <RFM69_initialize+0x180>
  }

  _address = nodeID;
 800034c:	4a03      	ldr	r2, [pc, #12]	; (800035c <RFM69_initialize+0x188>)
 800034e:	79bb      	ldrb	r3, [r7, #6]
 8000350:	7013      	strb	r3, [r2, #0]
  return true;
 8000352:	2301      	movs	r3, #1
}
 8000354:	4618      	mov	r0, r3
 8000356:	3738      	adds	r7, #56	; 0x38
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000034 	.word	0x20000034

08000360 <RFM69_setMode>:
  }
  RFM69_setMode(oldMode);
}

void RFM69_setMode(uint8_t newMode)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
  if (newMode == _mode)
 800036a:	4b42      	ldr	r3, [pc, #264]	; (8000474 <RFM69_setMode+0x114>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	b2db      	uxtb	r3, r3
 8000370:	79fa      	ldrb	r2, [r7, #7]
 8000372:	429a      	cmp	r2, r3
 8000374:	d077      	beq.n	8000466 <RFM69_setMode+0x106>
    return;

  switch (newMode) {
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b04      	cmp	r3, #4
 800037a:	d876      	bhi.n	800046a <RFM69_setMode+0x10a>
 800037c:	a201      	add	r2, pc, #4	; (adr r2, 8000384 <RFM69_setMode+0x24>)
 800037e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000382:	bf00      	nop
 8000384:	0800042d 	.word	0x0800042d
 8000388:	0800040b 	.word	0x0800040b
 800038c:	080003e9 	.word	0x080003e9
 8000390:	080003c1 	.word	0x080003c1
 8000394:	08000399 	.word	0x08000399
    case RF69_MODE_TX:
      RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
 8000398:	2001      	movs	r0, #1
 800039a:	f000 fa00 	bl	800079e <RFM69_readReg>
 800039e:	4603      	mov	r3, r0
 80003a0:	b25b      	sxtb	r3, r3
 80003a2:	f023 031c 	bic.w	r3, r3, #28
 80003a6:	b25b      	sxtb	r3, r3
 80003a8:	f043 030c 	orr.w	r3, r3, #12
 80003ac:	b25b      	sxtb	r3, r3
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	4619      	mov	r1, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	f000 fa0d 	bl	80007d2 <RFM69_writeReg>
      if (ISRFM69HW) RFM69_setHighPowerRegs(true);
 80003b8:	2001      	movs	r0, #1
 80003ba:	f000 f9d3 	bl	8000764 <RFM69_setHighPowerRegs>
      break;
 80003be:	e041      	b.n	8000444 <RFM69_setMode+0xe4>
    case RF69_MODE_RX:
      RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
 80003c0:	2001      	movs	r0, #1
 80003c2:	f000 f9ec 	bl	800079e <RFM69_readReg>
 80003c6:	4603      	mov	r3, r0
 80003c8:	b25b      	sxtb	r3, r3
 80003ca:	f023 031c 	bic.w	r3, r3, #28
 80003ce:	b25b      	sxtb	r3, r3
 80003d0:	f043 0310 	orr.w	r3, r3, #16
 80003d4:	b25b      	sxtb	r3, r3
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	4619      	mov	r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	f000 f9f9 	bl	80007d2 <RFM69_writeReg>
      if (ISRFM69HW) RFM69_setHighPowerRegs(false);
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f9bf 	bl	8000764 <RFM69_setHighPowerRegs>
      break;
 80003e6:	e02d      	b.n	8000444 <RFM69_setMode+0xe4>
    case RF69_MODE_SYNTH:
      RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
 80003e8:	2001      	movs	r0, #1
 80003ea:	f000 f9d8 	bl	800079e <RFM69_readReg>
 80003ee:	4603      	mov	r3, r0
 80003f0:	b25b      	sxtb	r3, r3
 80003f2:	f023 031c 	bic.w	r3, r3, #28
 80003f6:	b25b      	sxtb	r3, r3
 80003f8:	f043 0308 	orr.w	r3, r3, #8
 80003fc:	b25b      	sxtb	r3, r3
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	4619      	mov	r1, r3
 8000402:	2001      	movs	r0, #1
 8000404:	f000 f9e5 	bl	80007d2 <RFM69_writeReg>
      break;
 8000408:	e01c      	b.n	8000444 <RFM69_setMode+0xe4>
    case RF69_MODE_STANDBY:
      RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
 800040a:	2001      	movs	r0, #1
 800040c:	f000 f9c7 	bl	800079e <RFM69_readReg>
 8000410:	4603      	mov	r3, r0
 8000412:	b25b      	sxtb	r3, r3
 8000414:	f023 031c 	bic.w	r3, r3, #28
 8000418:	b25b      	sxtb	r3, r3
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	b25b      	sxtb	r3, r3
 8000420:	b2db      	uxtb	r3, r3
 8000422:	4619      	mov	r1, r3
 8000424:	2001      	movs	r0, #1
 8000426:	f000 f9d4 	bl	80007d2 <RFM69_writeReg>
      break;
 800042a:	e00b      	b.n	8000444 <RFM69_setMode+0xe4>
    case RF69_MODE_SLEEP:
      RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
 800042c:	2001      	movs	r0, #1
 800042e:	f000 f9b6 	bl	800079e <RFM69_readReg>
 8000432:	4603      	mov	r3, r0
 8000434:	f023 031c 	bic.w	r3, r3, #28
 8000438:	b2db      	uxtb	r3, r3
 800043a:	4619      	mov	r1, r3
 800043c:	2001      	movs	r0, #1
 800043e:	f000 f9c8 	bl	80007d2 <RFM69_writeReg>
      break;
 8000442:	bf00      	nop
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (RFM69_readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
 8000444:	bf00      	nop
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <RFM69_setMode+0x114>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	b2db      	uxtb	r3, r3
 800044c:	2b00      	cmp	r3, #0
 800044e:	d106      	bne.n	800045e <RFM69_setMode+0xfe>
 8000450:	2027      	movs	r0, #39	; 0x27
 8000452:	f000 f9a4 	bl	800079e <RFM69_readReg>
 8000456:	4603      	mov	r3, r0
 8000458:	b25b      	sxtb	r3, r3
 800045a:	2b00      	cmp	r3, #0
 800045c:	daf3      	bge.n	8000446 <RFM69_setMode+0xe6>

  _mode = newMode;
 800045e:	4a05      	ldr	r2, [pc, #20]	; (8000474 <RFM69_setMode+0x114>)
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	7013      	strb	r3, [r2, #0]
 8000464:	e002      	b.n	800046c <RFM69_setMode+0x10c>
    return;
 8000466:	bf00      	nop
 8000468:	e000      	b.n	800046c <RFM69_setMode+0x10c>
      return;
 800046a:	bf00      	nop
}
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000000 	.word	0x20000000

08000478 <RFM69_canSend>:
  }
  RFM69_writeReg(REG_PALEVEL, (RFM69_readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
}

bool RFM69_canSend()
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && payloadLen == 0 && RFM69_readRSSI(true) < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <RFM69_canSend+0x38>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	2b03      	cmp	r3, #3
 8000484:	d110      	bne.n	80004a8 <RFM69_canSend+0x30>
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <RFM69_canSend+0x3c>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	2b00      	cmp	r3, #0
 800048e:	d10b      	bne.n	80004a8 <RFM69_canSend+0x30>
 8000490:	2001      	movs	r0, #1
 8000492:	f000 f921 	bl	80006d8 <RFM69_readRSSI>
 8000496:	4603      	mov	r3, r0
 8000498:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 800049c:	da04      	bge.n	80004a8 <RFM69_canSend+0x30>
  {
    RFM69_setMode(RF69_MODE_STANDBY);
 800049e:	2001      	movs	r0, #1
 80004a0:	f7ff ff5e 	bl	8000360 <RFM69_setMode>
    return true;
 80004a4:	2301      	movs	r3, #1
 80004a6:	e000      	b.n	80004aa <RFM69_canSend+0x32>
  }
  return false;
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000000 	.word	0x20000000
 80004b4:	2000002f 	.word	0x2000002f

080004b8 <RFM69_send>:

void RFM69_send(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af02      	add	r7, sp, #8
 80004be:	6039      	str	r1, [r7, #0]
 80004c0:	4611      	mov	r1, r2
 80004c2:	461a      	mov	r2, r3
 80004c4:	4603      	mov	r3, r0
 80004c6:	71fb      	strb	r3, [r7, #7]
 80004c8:	460b      	mov	r3, r1
 80004ca:	71bb      	strb	r3, [r7, #6]
 80004cc:	4613      	mov	r3, r2
 80004ce:	717b      	strb	r3, [r7, #5]
  RFM69_writeReg(REG_PACKETCONFIG2, (RFM69_readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
 80004d0:	203d      	movs	r0, #61	; 0x3d
 80004d2:	f000 f964 	bl	800079e <RFM69_readReg>
 80004d6:	4603      	mov	r3, r0
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	4619      	mov	r1, r3
 80004e0:	203d      	movs	r0, #61	; 0x3d
 80004e2:	f000 f976 	bl	80007d2 <RFM69_writeReg>
  //uint32_t now = millis();
  while (!RFM69_canSend() /*&& millis() - now < RF69_CSMA_LIMIT_MS*/) RFM69_receiveDone();
 80004e6:	e001      	b.n	80004ec <RFM69_send+0x34>
 80004e8:	f000 f8d0 	bl	800068c <RFM69_receiveDone>
 80004ec:	f7ff ffc4 	bl	8000478 <RFM69_canSend>
 80004f0:	4603      	mov	r3, r0
 80004f2:	f083 0301 	eor.w	r3, r3, #1
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d1f5      	bne.n	80004e8 <RFM69_send+0x30>
  RFM69_sendFrame(toAddress, buffer, bufferSize, requestACK, false);
 80004fc:	797b      	ldrb	r3, [r7, #5]
 80004fe:	79ba      	ldrb	r2, [r7, #6]
 8000500:	79f8      	ldrb	r0, [r7, #7]
 8000502:	2100      	movs	r1, #0
 8000504:	9100      	str	r1, [sp, #0]
 8000506:	6839      	ldr	r1, [r7, #0]
 8000508:	f000 f804 	bl	8000514 <RFM69_sendFrame>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <RFM69_sendFrame>:
  rssi = l_rssi; // restore payload RSSI
}

// internal function
static void RFM69_sendFrame(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK, bool sendACK)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6039      	str	r1, [r7, #0]
 800051c:	4611      	mov	r1, r2
 800051e:	461a      	mov	r2, r3
 8000520:	4603      	mov	r3, r0
 8000522:	71fb      	strb	r3, [r7, #7]
 8000524:	460b      	mov	r3, r1
 8000526:	71bb      	strb	r3, [r7, #6]
 8000528:	4613      	mov	r3, r2
 800052a:	717b      	strb	r3, [r7, #5]
  RFM69_setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
 800052c:	2001      	movs	r0, #1
 800052e:	f7ff ff17 	bl	8000360 <RFM69_setMode>
  while ((RFM69_readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
 8000532:	bf00      	nop
 8000534:	2027      	movs	r0, #39	; 0x27
 8000536:	f000 f932 	bl	800079e <RFM69_readReg>
 800053a:	4603      	mov	r3, r0
 800053c:	b25b      	sxtb	r3, r3
 800053e:	2b00      	cmp	r3, #0
 8000540:	daf8      	bge.n	8000534 <RFM69_sendFrame+0x20>
  RFM69_writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
 8000542:	2100      	movs	r1, #0
 8000544:	2025      	movs	r0, #37	; 0x25
 8000546:	f000 f944 	bl	80007d2 <RFM69_writeReg>
  if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	2b3d      	cmp	r3, #61	; 0x3d
 800054e:	d901      	bls.n	8000554 <RFM69_sendFrame+0x40>
 8000550:	233d      	movs	r3, #61	; 0x3d
 8000552:	71bb      	strb	r3, [r7, #6]

  // control byte
  uint8_t CTLbyte = 0x00;
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]
  if (sendACK)
 8000558:	7e3b      	ldrb	r3, [r7, #24]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d002      	beq.n	8000564 <RFM69_sendFrame+0x50>
    CTLbyte = RFM69_CTL_SENDACK;
 800055e:	2380      	movs	r3, #128	; 0x80
 8000560:	73fb      	strb	r3, [r7, #15]
 8000562:	e004      	b.n	800056e <RFM69_sendFrame+0x5a>
  else if (requestACK)
 8000564:	797b      	ldrb	r3, [r7, #5]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <RFM69_sendFrame+0x5a>
    CTLbyte = RFM69_CTL_REQACK;
 800056a:	2340      	movs	r3, #64	; 0x40
 800056c:	73fb      	strb	r3, [r7, #15]

  // write to FIFO
  RFM69_select();
 800056e:	f000 f94b 	bl	8000808 <RFM69_select>
  SPI_transfer8(REG_FIFO | 0x80);
 8000572:	2080      	movs	r0, #128	; 0x80
 8000574:	f000 fa24 	bl	80009c0 <SPI_transfer8>
  SPI_transfer8(bufferSize + 3);
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	3303      	adds	r3, #3
 800057c:	b2db      	uxtb	r3, r3
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fa1e 	bl	80009c0 <SPI_transfer8>
  SPI_transfer8(toAddress);
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fa1a 	bl	80009c0 <SPI_transfer8>
  SPI_transfer8(_address);
 800058c:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <RFM69_sendFrame+0xf0>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fa15 	bl	80009c0 <SPI_transfer8>
  SPI_transfer8(CTLbyte);
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fa11 	bl	80009c0 <SPI_transfer8>

  for (uint8_t i = 0; i < bufferSize; i++)
 800059e:	2300      	movs	r3, #0
 80005a0:	73bb      	strb	r3, [r7, #14]
 80005a2:	e009      	b.n	80005b8 <RFM69_sendFrame+0xa4>
    SPI_transfer8(((uint8_t*) buffer)[i]);
 80005a4:	7bbb      	ldrb	r3, [r7, #14]
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	4413      	add	r3, r2
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fa07 	bl	80009c0 <SPI_transfer8>
  for (uint8_t i = 0; i < bufferSize; i++)
 80005b2:	7bbb      	ldrb	r3, [r7, #14]
 80005b4:	3301      	adds	r3, #1
 80005b6:	73bb      	strb	r3, [r7, #14]
 80005b8:	7bba      	ldrb	r2, [r7, #14]
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d3f1      	bcc.n	80005a4 <RFM69_sendFrame+0x90>
  RFM69_unselect();
 80005c0:	f000 f92b 	bl	800081a <RFM69_unselect>

  // no need to wait for transmit mode to be ready since its handled by the radio
  RFM69_setMode(RF69_MODE_TX);
 80005c4:	2004      	movs	r0, #4
 80005c6:	f7ff fecb 	bl	8000360 <RFM69_setMode>
  Timeout_SetTimeout1(RF69_TX_LIMIT_MS);
 80005ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ce:	f000 fa15 	bl	80009fc <Timeout_SetTimeout1>
  while (((RFM69_ReadDIO0Pin()) == 0 && !Timeout_IsTimeout1())); // wait for DIO0 to turn HIGH signalling transmission finish
 80005d2:	bf00      	nop
 80005d4:	f000 f9e4 	bl	80009a0 <RFM69_ReadDIO0Pin>
 80005d8:	4603      	mov	r3, r0
 80005da:	f083 0301 	eor.w	r3, r3, #1
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d007      	beq.n	80005f4 <RFM69_sendFrame+0xe0>
 80005e4:	f000 f9fa 	bl	80009dc <Timeout_IsTimeout1>
 80005e8:	4603      	mov	r3, r0
 80005ea:	f083 0301 	eor.w	r3, r3, #1
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1ef      	bne.n	80005d4 <RFM69_sendFrame+0xc0>
  //while (RFM69_readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // wait for ModeReady
  RFM69_setMode(RF69_MODE_STANDBY);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f7ff feb3 	bl	8000360 <RFM69_setMode>
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000034 	.word	0x20000034

08000608 <RFM69_receiveBegin>:
// internal function
//void RFM69::isr0() { selfPointer->interruptHandler(); }

// internal function
void RFM69_receiveBegin()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  datalen = 0;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <RFM69_receiveBegin+0x68>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
  senderID = 0;
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <RFM69_receiveBegin+0x6c>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
  targetID = 0;
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <RFM69_receiveBegin+0x70>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
  payloadLen = 0;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <RFM69_receiveBegin+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
  ACK_Requested = 0;
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <RFM69_receiveBegin+0x78>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
  ACK_RECEIVED = 0;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <RFM69_receiveBegin+0x7c>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
  rssi = 0;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <RFM69_receiveBegin+0x80>)
 8000632:	2200      	movs	r2, #0
 8000634:	801a      	strh	r2, [r3, #0]
  if (RFM69_readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
 8000636:	2028      	movs	r0, #40	; 0x28
 8000638:	f000 f8b1 	bl	800079e <RFM69_readReg>
 800063c:	4603      	mov	r3, r0
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	2b00      	cmp	r3, #0
 8000644:	d00a      	beq.n	800065c <RFM69_receiveBegin+0x54>
    RFM69_writeReg(REG_PACKETCONFIG2, (RFM69_readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
 8000646:	203d      	movs	r0, #61	; 0x3d
 8000648:	f000 f8a9 	bl	800079e <RFM69_readReg>
 800064c:	4603      	mov	r3, r0
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4619      	mov	r1, r3
 8000656:	203d      	movs	r0, #61	; 0x3d
 8000658:	f000 f8bb 	bl	80007d2 <RFM69_writeReg>
  RFM69_writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
 800065c:	2140      	movs	r1, #64	; 0x40
 800065e:	2025      	movs	r0, #37	; 0x25
 8000660:	f000 f8b7 	bl	80007d2 <RFM69_writeReg>
  RFM69_setMode(RF69_MODE_RX);
 8000664:	2003      	movs	r0, #3
 8000666:	f7ff fe7b 	bl	8000360 <RFM69_setMode>
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000002c 	.word	0x2000002c
 8000674:	2000002d 	.word	0x2000002d
 8000678:	2000002e 	.word	0x2000002e
 800067c:	2000002f 	.word	0x2000002f
 8000680:	20000030 	.word	0x20000030
 8000684:	20000031 	.word	0x20000031
 8000688:	20000032 	.word	0x20000032

0800068c <RFM69_receiveDone>:

// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
bool RFM69_receiveDone()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
//ATOMIC_BLOCK(ATOMIC_FORCEON)
  noInterrupts(); // re-enabled in RFM69_unselect() via setMode() or via RFM69_receiveBegin()
 8000690:	f000 f966 	bl	8000960 <noInterrupts>
  if (_mode == RF69_MODE_RX && payloadLen > 0)
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <RFM69_receiveDone+0x44>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b03      	cmp	r3, #3
 800069c:	d109      	bne.n	80006b2 <RFM69_receiveDone+0x26>
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <RFM69_receiveDone+0x48>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d004      	beq.n	80006b2 <RFM69_receiveDone+0x26>
  {
    RFM69_setMode(RF69_MODE_STANDBY); // enables interrupts
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff fe59 	bl	8000360 <RFM69_setMode>
    return true;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e00b      	b.n	80006ca <RFM69_receiveDone+0x3e>
  }
  else if (_mode == RF69_MODE_RX) // already in RX no payload yet
 80006b2:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <RFM69_receiveDone+0x44>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d103      	bne.n	80006c4 <RFM69_receiveDone+0x38>
  {
    interrupts(); // explicitly re-enable interrupts
 80006bc:	f000 f957 	bl	800096e <interrupts>
    return false;
 80006c0:	2300      	movs	r3, #0
 80006c2:	e002      	b.n	80006ca <RFM69_receiveDone+0x3e>
  }
  RFM69_receiveBegin();
 80006c4:	f7ff ffa0 	bl	8000608 <RFM69_receiveBegin>
  return false;
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000000 	.word	0x20000000
 80006d4:	2000002f 	.word	0x2000002f

080006d8 <RFM69_readRSSI>:
  RFM69_writeReg(REG_PACKETCONFIG2, (RFM69_readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
}

// get the received signal strength indicator (RSSI)
int16_t RFM69_readRSSI(bool forceTrigger)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
  int16_t rssi = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	81fb      	strh	r3, [r7, #14]
  if (forceTrigger)
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00c      	beq.n	8000706 <RFM69_readRSSI+0x2e>
  {
    // RSSI trigger not needed if DAGC is in continuous mode
    RFM69_writeReg(REG_RSSICONFIG, RF_RSSI_START);
 80006ec:	2101      	movs	r1, #1
 80006ee:	2023      	movs	r0, #35	; 0x23
 80006f0:	f000 f86f 	bl	80007d2 <RFM69_writeReg>
    while ((RFM69_readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // wait for RSSI_Ready
 80006f4:	bf00      	nop
 80006f6:	2023      	movs	r0, #35	; 0x23
 80006f8:	f000 f851 	bl	800079e <RFM69_readReg>
 80006fc:	4603      	mov	r3, r0
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	2b00      	cmp	r3, #0
 8000704:	d0f7      	beq.n	80006f6 <RFM69_readRSSI+0x1e>
  }
  rssi = -RFM69_readReg(REG_RSSIVALUE);
 8000706:	2024      	movs	r0, #36	; 0x24
 8000708:	f000 f849 	bl	800079e <RFM69_readReg>
 800070c:	4603      	mov	r3, r0
 800070e:	b29b      	uxth	r3, r3
 8000710:	425b      	negs	r3, r3
 8000712:	b29b      	uxth	r3, r3
 8000714:	81fb      	strh	r3, [r7, #14]
  rssi >>= 1;
 8000716:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800071a:	105b      	asrs	r3, r3, #1
 800071c:	81fb      	strh	r3, [r7, #14]
  return rssi;
 800071e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <RFM69_setHighPower>:
  _promiscuousMode = onOff;
  //RFM69_writeReg(REG_PACKETCONFIG1, (RFM69_readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// for RFM69HW only: you must call RFM69_setHighPower(true) after initialize() or else transmission won't work
void RFM69_setHighPower(bool onOff) {
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	4603      	mov	r3, r0
 8000732:	71fb      	strb	r3, [r7, #7]
  RFM69_writeReg(REG_OCP, ISRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
 8000734:	210f      	movs	r1, #15
 8000736:	2013      	movs	r0, #19
 8000738:	f000 f84b 	bl	80007d2 <RFM69_writeReg>
  if (ISRFM69HW) // turning ON
    RFM69_writeReg(REG_PALEVEL, (RFM69_readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
 800073c:	2011      	movs	r0, #17
 800073e:	f000 f82e 	bl	800079e <RFM69_readReg>
 8000742:	4603      	mov	r3, r0
 8000744:	b25b      	sxtb	r3, r3
 8000746:	f003 031f 	and.w	r3, r3, #31
 800074a:	b25b      	sxtb	r3, r3
 800074c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000750:	b25b      	sxtb	r3, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4619      	mov	r1, r3
 8000756:	2011      	movs	r0, #17
 8000758:	f000 f83b 	bl	80007d2 <RFM69_writeReg>
  else
    RFM69_writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <RFM69_setHighPowerRegs>:

// internal function
void RFM69_setHighPowerRegs(bool onOff)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
  RFM69_writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <RFM69_setHighPowerRegs+0x14>
 8000774:	235d      	movs	r3, #93	; 0x5d
 8000776:	e000      	b.n	800077a <RFM69_setHighPowerRegs+0x16>
 8000778:	2355      	movs	r3, #85	; 0x55
 800077a:	4619      	mov	r1, r3
 800077c:	205a      	movs	r0, #90	; 0x5a
 800077e:	f000 f828 	bl	80007d2 <RFM69_writeReg>
  RFM69_writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <RFM69_setHighPowerRegs+0x28>
 8000788:	237c      	movs	r3, #124	; 0x7c
 800078a:	e000      	b.n	800078e <RFM69_setHighPowerRegs+0x2a>
 800078c:	2370      	movs	r3, #112	; 0x70
 800078e:	4619      	mov	r1, r3
 8000790:	205c      	movs	r0, #92	; 0x5c
 8000792:	f000 f81e 	bl	80007d2 <RFM69_writeReg>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <RFM69_readReg>:
  RFM69_writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((RFM69_readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

uint8_t RFM69_readReg(uint8_t addr)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b084      	sub	sp, #16
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	71fb      	strb	r3, [r7, #7]
  uint8_t regval;
  RFM69_select();
 80007a8:	f000 f82e 	bl	8000808 <RFM69_select>
  SPI_transfer8(addr & 0x7F);
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 f903 	bl	80009c0 <SPI_transfer8>
  regval = SPI_transfer8(0);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 f900 	bl	80009c0 <SPI_transfer8>
 80007c0:	4603      	mov	r3, r0
 80007c2:	73fb      	strb	r3, [r7, #15]
  RFM69_unselect();
 80007c4:	f000 f829 	bl	800081a <RFM69_unselect>
  return regval;
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <RFM69_writeReg>:

void RFM69_writeReg(uint8_t addr, uint8_t value)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	460a      	mov	r2, r1
 80007dc:	71fb      	strb	r3, [r7, #7]
 80007de:	4613      	mov	r3, r2
 80007e0:	71bb      	strb	r3, [r7, #6]
  RFM69_select();
 80007e2:	f000 f811 	bl	8000808 <RFM69_select>
  SPI_transfer8(addr | 0x80);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f8e6 	bl	80009c0 <SPI_transfer8>
  SPI_transfer8(value);
 80007f4:	79bb      	ldrb	r3, [r7, #6]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f8e2 	bl	80009c0 <SPI_transfer8>
  RFM69_unselect();
 80007fc:	f000 f80d 	bl	800081a <RFM69_unselect>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <RFM69_select>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void RFM69_select()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  noInterrupts();
 800080c:	f000 f8a8 	bl	8000960 <noInterrupts>
  RFM69_SetCSPin(LOW);
 8000810:	2000      	movs	r0, #0
 8000812:	f000 f8b3 	bl	800097c <RFM69_SetCSPin>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}

0800081a <RFM69_unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void RFM69_unselect()
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
  RFM69_SetCSPin(HIGH);
 800081e:	2001      	movs	r0, #1
 8000820:	f000 f8ac 	bl	800097c <RFM69_SetCSPin>
  interrupts();
 8000824:	f000 f8a3 	bl	800096e <interrupts>
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <SPI_RX_TX>:
{
	HAL_SPI_Transmit(&hspi2, &WrPara, 1, HAL_MAX_DELAY);
}

uint8_t SPI_RX_TX(uint8_t WrPara)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af02      	add	r7, sp, #8
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
	uint8_t receive;
	HAL_SPI_TransmitReceive(&hspi2, &WrPara, &receive, 1, HAL_MAX_DELAY);
 8000836:	f107 020f 	add.w	r2, r7, #15
 800083a:	1df9      	adds	r1, r7, #7
 800083c:	f04f 33ff 	mov.w	r3, #4294967295
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2301      	movs	r3, #1
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <SPI_RX_TX+0x28>)
 8000846:	f002 fc2c 	bl	80030a2 <HAL_SPI_TransmitReceive>
	return receive;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000003c 	.word	0x2000003c

08000858 <packet_serializeData>:

#include "packet.h"



void packet_serializeData(SWS_Packet* packet, DataBuffer* data){
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
	data->data[0] = packet->idSensor;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	781a      	ldrb	r2, [r3, #0]
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	701a      	strb	r2, [r3, #0]
	data->data[1] = packet->idBase;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	785a      	ldrb	r2, [r3, #1]
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	705a      	strb	r2, [r3, #1]
	data->data[2] = packet->packetID;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	789a      	ldrb	r2, [r3, #2]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	709a      	strb	r2, [r3, #2]
	data->data[3] = packet->packetType;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	78da      	ldrb	r2, [r3, #3]
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	70da      	strb	r2, [r3, #3]

	switch(packet->packetType){
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	78db      	ldrb	r3, [r3, #3]
 8000886:	2b02      	cmp	r3, #2
 8000888:	dc02      	bgt.n	8000890 <packet_serializeData+0x38>
 800088a:	2b00      	cmp	r3, #0
 800088c:	dc03      	bgt.n	8000896 <packet_serializeData+0x3e>
 800088e:	e05a      	b.n	8000946 <packet_serializeData+0xee>
 8000890:	2b05      	cmp	r3, #5
 8000892:	d00b      	beq.n	80008ac <packet_serializeData+0x54>
 8000894:	e057      	b.n	8000946 <packet_serializeData+0xee>
	case CONNECT:
	case CONNACK:
		data->data[4] = packet->data[0];
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	791a      	ldrb	r2, [r3, #4]
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	711a      	strb	r2, [r3, #4]
		data->data[5] = '~';
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	227e      	movs	r2, #126	; 0x7e
 80008a2:	715a      	strb	r2, [r3, #5]
		data->size = 6;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	2206      	movs	r2, #6
 80008a8:	765a      	strb	r2, [r3, #25]
		break;
 80008aa:	e053      	b.n	8000954 <packet_serializeData+0xfc>
	case SEND:
		switch(*(packet->data)){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	791b      	ldrb	r3, [r3, #4]
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	d044      	beq.n	800093e <packet_serializeData+0xe6>
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	dc44      	bgt.n	8000942 <packet_serializeData+0xea>
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d002      	beq.n	80008c2 <packet_serializeData+0x6a>
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d017      	beq.n	80008f0 <packet_serializeData+0x98>
				data->size = 13;
				break;
			case DoorSensor:
				break;
			default:
				break;
 80008c0:	e03f      	b.n	8000942 <packet_serializeData+0xea>
				data->data[4] = packet->data[0];
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	791a      	ldrb	r2, [r3, #4]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	711a      	strb	r2, [r3, #4]
				data->data[5] = packet->data[1];
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	795a      	ldrb	r2, [r3, #5]
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	715a      	strb	r2, [r3, #5]
				data->data[6] = packet->data[2];
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	799a      	ldrb	r2, [r3, #6]
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	719a      	strb	r2, [r3, #6]
				data->data[7] = packet->data[3];
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	79da      	ldrb	r2, [r3, #7]
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	71da      	strb	r2, [r3, #7]
				data->data[8] = '~';
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	227e      	movs	r2, #126	; 0x7e
 80008e6:	721a      	strb	r2, [r3, #8]
				data->size = 9;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2209      	movs	r2, #9
 80008ec:	765a      	strb	r2, [r3, #25]
				break;
 80008ee:	e029      	b.n	8000944 <packet_serializeData+0xec>
				data->data[4] = packet->data[0];
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	791a      	ldrb	r2, [r3, #4]
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	711a      	strb	r2, [r3, #4]
				data->data[5] = packet->data[1];
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	795a      	ldrb	r2, [r3, #5]
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	715a      	strb	r2, [r3, #5]
				data->data[6] = packet->data[2];
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	799a      	ldrb	r2, [r3, #6]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	719a      	strb	r2, [r3, #6]
				data->data[7] = packet->data[3];
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	79da      	ldrb	r2, [r3, #7]
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	71da      	strb	r2, [r3, #7]
				data->data[8] = packet->data[4];
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7a1a      	ldrb	r2, [r3, #8]
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	721a      	strb	r2, [r3, #8]
				data->data[9] = packet->data[5];
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7a5a      	ldrb	r2, [r3, #9]
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	725a      	strb	r2, [r3, #9]
				data->data[10] = packet->data[6];
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	7a9a      	ldrb	r2, [r3, #10]
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	729a      	strb	r2, [r3, #10]
				data->data[11] = packet->data[7];
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7ada      	ldrb	r2, [r3, #11]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	72da      	strb	r2, [r3, #11]
				data->data[12] = '~';
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	227e      	movs	r2, #126	; 0x7e
 8000934:	731a      	strb	r2, [r3, #12]
				data->size = 13;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	220d      	movs	r2, #13
 800093a:	765a      	strb	r2, [r3, #25]
				break;
 800093c:	e002      	b.n	8000944 <packet_serializeData+0xec>
				break;
 800093e:	bf00      	nop
 8000940:	e008      	b.n	8000954 <packet_serializeData+0xfc>
				break;
 8000942:	bf00      	nop
		}

		break;
 8000944:	e006      	b.n	8000954 <packet_serializeData+0xfc>
	default:
		data->data[4] = '~';
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	227e      	movs	r2, #126	; 0x7e
 800094a:	711a      	strb	r2, [r3, #4]
		data->size = 5;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	2205      	movs	r2, #5
 8000950:	765a      	strb	r2, [r3, #25]
		break;
 8000952:	bf00      	nop
	}
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <noInterrupts>:
#include "stm32f3xx_hal.h"
#include "spi.h"

static volatile uint32_t timeoutSet;

void noInterrupts(void){
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <interrupts>:

void interrupts(void){
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <RFM69_SetCSPin>:

void RFM69_SetCSPin(bool state){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	461a      	mov	r2, r3
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	4803      	ldr	r0, [pc, #12]	; (800099c <RFM69_SetCSPin+0x20>)
 800098e:	f000 fe6d 	bl	800166c <HAL_GPIO_WritePin>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	48000800 	.word	0x48000800

080009a0 <RFM69_ReadDIO0Pin>:

bool RFM69_ReadDIO0Pin(void){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <RFM69_ReadDIO0Pin+0x1c>)
 80009a8:	f000 fe48 	bl	800163c <HAL_GPIO_ReadPin>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	bf14      	ite	ne
 80009b2:	2301      	movne	r3, #1
 80009b4:	2300      	moveq	r3, #0
 80009b6:	b2db      	uxtb	r3, r3
}       // function to read GPIO connected to RFM69 DIO0 (RFM69 interrupt signalling)
 80009b8:	4618      	mov	r0, r3
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	48000800 	.word	0x48000800

080009c0 <SPI_transfer8>:

uint8_t SPI_transfer8(uint8_t data){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	return SPI_RX_TX(data);
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff2d 	bl	800082c <SPI_RX_TX>
 80009d2:	4603      	mov	r3, r0
}     // function to transfer 1byte on SPI with return
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <Timeout_IsTimeout1>:

void Serialprint(char* c){

}            // function to print to serial port a string

bool Timeout_IsTimeout1(void){
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	if(HAL_GetTick() > timeoutSet){
 80009e0:	f000 fb84 	bl	80010ec <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <Timeout_IsTimeout1+0x1c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d901      	bls.n	80009f2 <Timeout_IsTimeout1+0x16>
		return true;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e000      	b.n	80009f4 <Timeout_IsTimeout1+0x18>
	}
	return false;
 80009f2:	2300      	movs	r3, #0
}      // function for timeout handling, checks if previously set timeout expired
 80009f4:	4618      	mov	r0, r3
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000038 	.word	0x20000038

080009fc <Timeout_SetTimeout1>:


void Timeout_SetTimeout1(uint16_t a){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
	timeoutSet = HAL_GetTick() + a;
 8000a06:	f000 fb71 	bl	80010ec <HAL_GetTick>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a02      	ldr	r2, [pc, #8]	; (8000a1c <Timeout_SetTimeout1+0x20>)
 8000a12:	6013      	str	r3, [r2, #0]
} // function for timeout handling, sets a timeout, parameter is in milliseconds (ms)
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000038 	.word	0x20000038

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b090      	sub	sp, #64	; 0x40
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a26:	f000 fb07 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2a:	f000 f857 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2e:	f000 f947 	bl	8000cc0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a32:	f000 f8b3 	bl	8000b9c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000a36:	f000 f8ef 	bl	8000c18 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  	SWS_Packet packet;
    DataBuffer buffer;
    SmokeSensorData smokeData;
    packet.packetID = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    packet.idBase = 1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    packet.idSensor = 2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    packet.packetID = packet.packetID + 1;
 8000a4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a50:	3301      	adds	r3, #1
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    packet.packetType = SEND;
 8000a58:	2305      	movs	r3, #5
 8000a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    smokeData.GasDetectionTimeout_Minutes = 10;
 8000a5e:	230a      	movs	r3, #10
 8000a60:	707b      	strb	r3, [r7, #1]
    smokeData.GasSensor = 500;
 8000a62:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a66:	80bb      	strh	r3, [r7, #4]
    smokeData.SmokeSensor = 1000;
 8000a68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6c:	807b      	strh	r3, [r7, #2]
    smokeData.SensorType = 2;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	703b      	strb	r3, [r7, #0]
    smokeData.Temperature = 52;
 8000a72:	2334      	movs	r3, #52	; 0x34
 8000a74:	80fb      	strh	r3, [r7, #6]
    memcpy(packet.data, &smokeData, 8);
 8000a76:	4639      	mov	r1, r7
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	2208      	movs	r2, #8
 8000a80:	4618      	mov	r0, r3
 8000a82:	f003 fafd 	bl	8004080 <memcpy>

    packet_serializeData(&packet, &buffer);
 8000a86:	f107 0208 	add.w	r2, r7, #8
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fee1 	bl	8000858 <packet_serializeData>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool RFM_active = false;
 8000a96:	2300      	movs	r3, #0
 8000a98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  RFM_active = RFM69_initialize(RF69_868MHZ, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2056      	movs	r0, #86	; 0x56
 8000aa2:	f7ff fb97 	bl	80001d4 <RFM69_initialize>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  while (1)
  {
    /* USER CODE END WHILE */
	  if(RFM_active){
 8000aac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0fb      	beq.n	8000aac <main+0x8c>
		  RFM69_setMode(RF69_MODE_RX);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f7ff fc53 	bl	8000360 <RFM69_setMode>
		  if(RFM69_canSend()){
 8000aba:	f7ff fcdd 	bl	8000478 <RFM69_canSend>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f3      	beq.n	8000aac <main+0x8c>
			  RFM69_setMode(RF69_MODE_TX);
 8000ac4:	2004      	movs	r0, #4
 8000ac6:	f7ff fc4b 	bl	8000360 <RFM69_setMode>
			  RFM69_send(0, buffer.data, buffer.size, false);
 8000aca:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000ace:	f107 0108 	add.w	r1, r7, #8
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff fcef 	bl	80004b8 <RFM69_send>
	  if(RFM_active){
 8000ada:	e7e7      	b.n	8000aac <main+0x8c>

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b0a6      	sub	sp, #152	; 0x98
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ae6:	2228      	movs	r2, #40	; 0x28
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 fad6 	bl	800409c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2258      	movs	r2, #88	; 0x58
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 fac8 	bl	800409c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b14:	2310      	movs	r3, #16
 8000b16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b28:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fdae 	bl	800169c <HAL_RCC_OscConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b46:	f000 f961 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b64:	2102      	movs	r1, #2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 fdec 	bl	8002744 <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b72:	f000 f94b 	bl	8000e0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 ffc4 	bl	8002b10 <HAL_RCCEx_PeriphCLKConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b8e:	f000 f93d 	bl	8000e0c <Error_Handler>
  }
}
 8000b92:	bf00      	nop
 8000b94:	3798      	adds	r7, #152	; 0x98
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_SPI2_Init+0x74>)
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <MX_SPI2_Init+0x78>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_SPI2_Init+0x74>)
 8000ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_SPI2_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <MX_SPI2_Init+0x74>)
 8000bb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_SPI2_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <MX_SPI2_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_SPI2_Init+0x74>)
 8000bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_SPI2_Init+0x74>)
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_SPI2_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_SPI2_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MX_SPI2_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_SPI2_Init+0x74>)
 8000bea:	2207      	movs	r2, #7
 8000bec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MX_SPI2_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_SPI2_Init+0x74>)
 8000bf6:	2208      	movs	r2, #8
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_SPI2_Init+0x74>)
 8000bfc:	f002 f9a6 	bl	8002f4c <HAL_SPI_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c06:	f000 f901 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000003c 	.word	0x2000003c
 8000c14:	40003800 	.word	0x40003800

08000c18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <MX_TIM1_Init+0xa0>)
 8000c38:	4a20      	ldr	r2, [pc, #128]	; (8000cbc <MX_TIM1_Init+0xa4>)
 8000c3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <MX_TIM1_Init+0xa0>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_TIM1_Init+0xa0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 36000;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_TIM1_Init+0xa0>)
 8000c4a:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8000c4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <MX_TIM1_Init+0xa0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_TIM1_Init+0xa0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_TIM1_Init+0xa0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c62:	4815      	ldr	r0, [pc, #84]	; (8000cb8 <MX_TIM1_Init+0xa0>)
 8000c64:	f002 fd94 	bl	8003790 <HAL_TIM_Base_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c6e:	f000 f8cd 	bl	8000e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <MX_TIM1_Init+0xa0>)
 8000c80:	f002 fefc 	bl	8003a7c <HAL_TIM_ConfigClockSource>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c8a:	f000 f8bf 	bl	8000e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <MX_TIM1_Init+0xa0>)
 8000ca0:	f003 f920 	bl	8003ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000caa:	f000 f8af 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	3720      	adds	r7, #32
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000a0 	.word	0x200000a0
 8000cbc:	40012c00 	.word	0x40012c00

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	4b4b      	ldr	r3, [pc, #300]	; (8000e04 <MX_GPIO_Init+0x144>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a4a      	ldr	r2, [pc, #296]	; (8000e04 <MX_GPIO_Init+0x144>)
 8000cdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ce0:	6153      	str	r3, [r2, #20]
 8000ce2:	4b48      	ldr	r3, [pc, #288]	; (8000e04 <MX_GPIO_Init+0x144>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cee:	4b45      	ldr	r3, [pc, #276]	; (8000e04 <MX_GPIO_Init+0x144>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4a44      	ldr	r2, [pc, #272]	; (8000e04 <MX_GPIO_Init+0x144>)
 8000cf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cf8:	6153      	str	r3, [r2, #20]
 8000cfa:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <MX_GPIO_Init+0x144>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b3f      	ldr	r3, [pc, #252]	; (8000e04 <MX_GPIO_Init+0x144>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	4a3e      	ldr	r2, [pc, #248]	; (8000e04 <MX_GPIO_Init+0x144>)
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	6153      	str	r3, [r2, #20]
 8000d12:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <MX_GPIO_Init+0x144>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <MX_GPIO_Init+0x144>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	4a38      	ldr	r2, [pc, #224]	; (8000e04 <MX_GPIO_Init+0x144>)
 8000d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d28:	6153      	str	r3, [r2, #20]
 8000d2a:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <MX_GPIO_Init+0x144>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2120      	movs	r1, #32
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3e:	f000 fc95 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	4830      	ldr	r0, [pc, #192]	; (8000e08 <MX_GPIO_Init+0x148>)
 8000d48:	f000 fc90 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d52:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4829      	ldr	r0, [pc, #164]	; (8000e08 <MX_GPIO_Init+0x148>)
 8000d64:	f000 fae0 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d68:	230c      	movs	r3, #12
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d78:	2307      	movs	r3, #7
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d86:	f000 facf 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da4:	f000 fac0 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_DI0_Pin CUSTOMNAME_Pin */
  GPIO_InitStruct.Pin = SPI_DI0_Pin|CUSTOMNAME_Pin;
 8000da8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4812      	ldr	r0, [pc, #72]	; (8000e08 <MX_GPIO_Init+0x148>)
 8000dbe:	f000 fab3 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480b      	ldr	r0, [pc, #44]	; (8000e08 <MX_GPIO_Init+0x148>)
 8000dda:	f000 faa5 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor0_Pin Sensor1_Pin Sensor2_Pin Sensor3_Pin */
  GPIO_InitStruct.Pin = Sensor0_Pin|Sensor1_Pin|Sensor2_Pin|Sensor3_Pin;
 8000dde:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df6:	f000 fa97 	bl	8001328 <HAL_GPIO_Init>

}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48000800 	.word	0x48000800

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <Error_Handler+0x8>
	...

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_MspInit+0x44>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <HAL_MspInit+0x44>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6193      	str	r3, [r2, #24]
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_MspInit+0x44>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_MspInit+0x44>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_MspInit+0x44>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_MspInit+0x44>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e4e:	2007      	movs	r0, #7
 8000e50:	f000 fa28 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a20      	ldr	r2, [pc, #128]	; (8000f00 <HAL_SPI_MspInit+0xa0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d139      	bne.n	8000ef6 <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_SPI_MspInit+0xa4>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <HAL_SPI_MspInit+0xa4>)
 8000e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <HAL_SPI_MspInit+0xa4>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <HAL_SPI_MspInit+0xa4>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <HAL_SPI_MspInit+0xa4>)
 8000ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea4:	6153      	str	r3, [r2, #20]
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_SPI_MspInit+0xa4>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin;
 8000eb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480e      	ldr	r0, [pc, #56]	; (8000f08 <HAL_SPI_MspInit+0xa8>)
 8000ed0:	f000 fa2a 	bl	8001328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin|SPI_MOSI_Pin;
 8000ed4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4805      	ldr	r0, [pc, #20]	; (8000f08 <HAL_SPI_MspInit+0xa8>)
 8000ef2:	f000 fa19 	bl	8001328 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	; 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40003800 	.word	0x40003800
 8000f04:	40021000 	.word	0x40021000
 8000f08:	48000400 	.word	0x48000400

08000f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <HAL_TIM_Base_MspInit+0x44>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d113      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_TIM_Base_MspInit+0x48>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <HAL_TIM_Base_MspInit+0x48>)
 8000f24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f28:	6193      	str	r3, [r2, #24]
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_TIM_Base_MspInit+0x48>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	201b      	movs	r0, #27
 8000f3c:	f000 f9bd 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f40:	201b      	movs	r0, #27
 8000f42:	f000 f9d6 	bl	80012f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40012c00 	.word	0x40012c00
 8000f54:	40021000 	.word	0x40021000

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 f88e 	bl	80010c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <TIM1_CC_IRQHandler+0x10>)
 8000fb2:	f002 fc44 	bl	800383e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200000a0 	.word	0x200000a0

08000fc0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fea:	490e      	ldr	r1, [pc, #56]	; (8001024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <LoopForever+0xe>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001000:	4c0b      	ldr	r4, [pc, #44]	; (8001030 <LoopForever+0x16>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800100e:	f7ff ffd7 	bl	8000fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f003 f811 	bl	8004038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001016:	f7ff fd03 	bl	8000a20 <main>

0800101a <LoopForever>:

LoopForever:
    b LoopForever
 800101a:	e7fe      	b.n	800101a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800101c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001028:	080040fc 	.word	0x080040fc
  ldr r2, =_sbss
 800102c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001030:	200000f0 	.word	0x200000f0

08001034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC1_2_IRQHandler>
	...

08001038 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_Init+0x28>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_Init+0x28>)
 8001042:	f043 0310 	orr.w	r3, r3, #16
 8001046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 f92b 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104e:	2000      	movs	r0, #0
 8001050:	f000 f808 	bl	8001064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001054:	f7ff fee0 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40022000 	.word	0x40022000

08001064 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_InitTick+0x54>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x58>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f943 	bl	800130e <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e00e      	b.n	80010b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b0f      	cmp	r3, #15
 8001096:	d80a      	bhi.n	80010ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f000 f90b 	bl	80012ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_InitTick+0x5c>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000004 	.word	0x20000004
 80010bc:	2000000c 	.word	0x2000000c
 80010c0:	20000008 	.word	0x20000008

080010c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x20>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x24>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <HAL_IncTick+0x24>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	2000000c 	.word	0x2000000c
 80010e8:	200000ec 	.word	0x200000ec

080010ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <HAL_GetTick+0x14>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200000ec 	.word	0x200000ec

08001104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800112c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	2b00      	cmp	r3, #0
 8001178:	db0b      	blt.n	8001192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	4907      	ldr	r1, [pc, #28]	; (80011a0 <__NVIC_EnableIRQ+0x38>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	2001      	movs	r0, #1
 800118a:	fa00 f202 	lsl.w	r2, r0, r2
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000e100 	.word	0xe000e100

080011a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	db0a      	blt.n	80011ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	490c      	ldr	r1, [pc, #48]	; (80011f0 <__NVIC_SetPriority+0x4c>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011cc:	e00a      	b.n	80011e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4908      	ldr	r1, [pc, #32]	; (80011f4 <__NVIC_SetPriority+0x50>)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	3b04      	subs	r3, #4
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	440b      	add	r3, r1
 80011e2:	761a      	strb	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f1c3 0307 	rsb	r3, r3, #7
 8001212:	2b04      	cmp	r3, #4
 8001214:	bf28      	it	cs
 8001216:	2304      	movcs	r3, #4
 8001218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3304      	adds	r3, #4
 800121e:	2b06      	cmp	r3, #6
 8001220:	d902      	bls.n	8001228 <NVIC_EncodePriority+0x30>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3b03      	subs	r3, #3
 8001226:	e000      	b.n	800122a <NVIC_EncodePriority+0x32>
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	f04f 32ff 	mov.w	r2, #4294967295
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43d9      	mvns	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	4313      	orrs	r3, r2
         );
}
 8001252:	4618      	mov	r0, r3
 8001254:	3724      	adds	r7, #36	; 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001270:	d301      	bcc.n	8001276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001272:	2301      	movs	r3, #1
 8001274:	e00f      	b.n	8001296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <SysTick_Config+0x40>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127e:	210f      	movs	r1, #15
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f7ff ff8e 	bl	80011a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <SysTick_Config+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <SysTick_Config+0x40>)
 8001290:	2207      	movs	r2, #7
 8001292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff29 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012cc:	f7ff ff3e 	bl	800114c <__NVIC_GetPriorityGrouping>
 80012d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff ff8e 	bl	80011f8 <NVIC_EncodePriority>
 80012dc:	4602      	mov	r2, r0
 80012de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff5d 	bl	80011a4 <__NVIC_SetPriority>
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff31 	bl	8001168 <__NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffa2 	bl	8001260 <SysTick_Config>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001336:	e160      	b.n	80015fa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2101      	movs	r1, #1
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	4013      	ands	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 8152 	beq.w	80015f4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	2b01      	cmp	r3, #1
 800135a:	d005      	beq.n	8001368 <HAL_GPIO_Init+0x40>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d130      	bne.n	80013ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	2203      	movs	r2, #3
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800139e:	2201      	movs	r2, #1
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	f003 0201 	and.w	r2, r3, #1
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d017      	beq.n	8001406 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d123      	bne.n	800145a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	08da      	lsrs	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3208      	adds	r2, #8
 800141a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	691a      	ldr	r2, [r3, #16]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	08da      	lsrs	r2, r3, #3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3208      	adds	r2, #8
 8001454:	6939      	ldr	r1, [r7, #16]
 8001456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0203 	and.w	r2, r3, #3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 80ac 	beq.w	80015f4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149c:	4b5e      	ldr	r3, [pc, #376]	; (8001618 <HAL_GPIO_Init+0x2f0>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a5d      	ldr	r2, [pc, #372]	; (8001618 <HAL_GPIO_Init+0x2f0>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b5b      	ldr	r3, [pc, #364]	; (8001618 <HAL_GPIO_Init+0x2f0>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b4:	4a59      	ldr	r2, [pc, #356]	; (800161c <HAL_GPIO_Init+0x2f4>)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014de:	d025      	beq.n	800152c <HAL_GPIO_Init+0x204>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a4f      	ldr	r2, [pc, #316]	; (8001620 <HAL_GPIO_Init+0x2f8>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d01f      	beq.n	8001528 <HAL_GPIO_Init+0x200>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a4e      	ldr	r2, [pc, #312]	; (8001624 <HAL_GPIO_Init+0x2fc>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d019      	beq.n	8001524 <HAL_GPIO_Init+0x1fc>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a4d      	ldr	r2, [pc, #308]	; (8001628 <HAL_GPIO_Init+0x300>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d013      	beq.n	8001520 <HAL_GPIO_Init+0x1f8>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a4c      	ldr	r2, [pc, #304]	; (800162c <HAL_GPIO_Init+0x304>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d00d      	beq.n	800151c <HAL_GPIO_Init+0x1f4>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a4b      	ldr	r2, [pc, #300]	; (8001630 <HAL_GPIO_Init+0x308>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d007      	beq.n	8001518 <HAL_GPIO_Init+0x1f0>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a4a      	ldr	r2, [pc, #296]	; (8001634 <HAL_GPIO_Init+0x30c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d101      	bne.n	8001514 <HAL_GPIO_Init+0x1ec>
 8001510:	2306      	movs	r3, #6
 8001512:	e00c      	b.n	800152e <HAL_GPIO_Init+0x206>
 8001514:	2307      	movs	r3, #7
 8001516:	e00a      	b.n	800152e <HAL_GPIO_Init+0x206>
 8001518:	2305      	movs	r3, #5
 800151a:	e008      	b.n	800152e <HAL_GPIO_Init+0x206>
 800151c:	2304      	movs	r3, #4
 800151e:	e006      	b.n	800152e <HAL_GPIO_Init+0x206>
 8001520:	2303      	movs	r3, #3
 8001522:	e004      	b.n	800152e <HAL_GPIO_Init+0x206>
 8001524:	2302      	movs	r3, #2
 8001526:	e002      	b.n	800152e <HAL_GPIO_Init+0x206>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <HAL_GPIO_Init+0x206>
 800152c:	2300      	movs	r3, #0
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	f002 0203 	and.w	r2, r2, #3
 8001534:	0092      	lsls	r2, r2, #2
 8001536:	4093      	lsls	r3, r2
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800153e:	4937      	ldr	r1, [pc, #220]	; (800161c <HAL_GPIO_Init+0x2f4>)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	3302      	adds	r3, #2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800154c:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <HAL_GPIO_Init+0x310>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001570:	4a31      	ldr	r2, [pc, #196]	; (8001638 <HAL_GPIO_Init+0x310>)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001576:	4b30      	ldr	r3, [pc, #192]	; (8001638 <HAL_GPIO_Init+0x310>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800159a:	4a27      	ldr	r2, [pc, #156]	; (8001638 <HAL_GPIO_Init+0x310>)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_GPIO_Init+0x310>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015c4:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <HAL_GPIO_Init+0x310>)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <HAL_GPIO_Init+0x310>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <HAL_GPIO_Init+0x310>)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3301      	adds	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	f47f ae97 	bne.w	8001338 <HAL_GPIO_Init+0x10>
  }
}
 800160a:	bf00      	nop
 800160c:	bf00      	nop
 800160e:	371c      	adds	r7, #28
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40021000 	.word	0x40021000
 800161c:	40010000 	.word	0x40010000
 8001620:	48000400 	.word	0x48000400
 8001624:	48000800 	.word	0x48000800
 8001628:	48000c00 	.word	0x48000c00
 800162c:	48001000 	.word	0x48001000
 8001630:	48001400 	.word	0x48001400
 8001634:	48001800 	.word	0x48001800
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e001      	b.n	800165e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001688:	e002      	b.n	8001690 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016ac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	f001 b83a 	b.w	8002736 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 816f 	beq.w	80019b6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016d8:	4bb5      	ldr	r3, [pc, #724]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d00c      	beq.n	80016fe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e4:	4bb2      	ldr	r3, [pc, #712]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d15c      	bne.n	80017aa <HAL_RCC_OscConfig+0x10e>
 80016f0:	4baf      	ldr	r3, [pc, #700]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fc:	d155      	bne.n	80017aa <HAL_RCC_OscConfig+0x10e>
 80016fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001702:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800170a:	fa93 f3a3 	rbit	r3, r3
 800170e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001712:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	095b      	lsrs	r3, r3, #5
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d102      	bne.n	8001730 <HAL_RCC_OscConfig+0x94>
 800172a:	4ba1      	ldr	r3, [pc, #644]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	e015      	b.n	800175c <HAL_RCC_OscConfig+0xc0>
 8001730:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001734:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001738:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800173c:	fa93 f3a3 	rbit	r3, r3
 8001740:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001748:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800174c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001758:	4b95      	ldr	r3, [pc, #596]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001760:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001764:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001768:	fa92 f2a2 	rbit	r2, r2
 800176c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001770:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001774:	fab2 f282 	clz	r2, r2
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	f042 0220 	orr.w	r2, r2, #32
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	f002 021f 	and.w	r2, r2, #31
 8001784:	2101      	movs	r1, #1
 8001786:	fa01 f202 	lsl.w	r2, r1, r2
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 8111 	beq.w	80019b4 <HAL_RCC_OscConfig+0x318>
 8001792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001796:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f040 8108 	bne.w	80019b4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	f000 bfc6 	b.w	8002736 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ba:	d106      	bne.n	80017ca <HAL_RCC_OscConfig+0x12e>
 80017bc:	4b7c      	ldr	r3, [pc, #496]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a7b      	ldr	r2, [pc, #492]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 80017c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	e036      	b.n	8001838 <HAL_RCC_OscConfig+0x19c>
 80017ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x158>
 80017da:	4b75      	ldr	r3, [pc, #468]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a74      	ldr	r2, [pc, #464]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 80017e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b72      	ldr	r3, [pc, #456]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a71      	ldr	r2, [pc, #452]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 80017ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e021      	b.n	8001838 <HAL_RCC_OscConfig+0x19c>
 80017f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x184>
 8001806:	4b6a      	ldr	r3, [pc, #424]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a69      	ldr	r2, [pc, #420]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b67      	ldr	r3, [pc, #412]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a66      	ldr	r2, [pc, #408]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0x19c>
 8001820:	4b63      	ldr	r3, [pc, #396]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a62      	ldr	r2, [pc, #392]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b60      	ldr	r3, [pc, #384]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a5f      	ldr	r2, [pc, #380]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001836:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d059      	beq.n	80018fc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fc50 	bl	80010ec <HAL_GetTick>
 800184c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001852:	f7ff fc4b 	bl	80010ec <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d902      	bls.n	8001868 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	f000 bf67 	b.w	8002736 <HAL_RCC_OscConfig+0x109a>
 8001868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800186c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800187c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b01      	cmp	r3, #1
 8001892:	d102      	bne.n	800189a <HAL_RCC_OscConfig+0x1fe>
 8001894:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	e015      	b.n	80018c6 <HAL_RCC_OscConfig+0x22a>
 800189a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80018ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80018b6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018c2:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ca:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80018ce:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80018d2:	fa92 f2a2 	rbit	r2, r2
 80018d6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80018da:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018de:	fab2 f282 	clz	r2, r2
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f042 0220 	orr.w	r2, r2, #32
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f002 021f 	and.w	r2, r2, #31
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f202 	lsl.w	r2, r1, r2
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0ab      	beq.n	8001852 <HAL_RCC_OscConfig+0x1b6>
 80018fa:	e05c      	b.n	80019b6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fbf6 	bl	80010ec <HAL_GetTick>
 8001900:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001904:	e00a      	b.n	800191c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001906:	f7ff fbf1 	bl	80010ec <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d902      	bls.n	800191c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	f000 bf0d 	b.w	8002736 <HAL_RCC_OscConfig+0x109a>
 800191c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001920:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001930:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d102      	bne.n	800194e <HAL_RCC_OscConfig+0x2b2>
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	e015      	b.n	800197a <HAL_RCC_OscConfig+0x2de>
 800194e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001952:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001962:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001966:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800196a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800196e:	fa93 f3a3 	rbit	r3, r3
 8001972:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_RCC_OscConfig+0x314>)
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800197e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001982:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001986:	fa92 f2a2 	rbit	r2, r2
 800198a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800198e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001992:	fab2 f282 	clz	r2, r2
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	f042 0220 	orr.w	r2, r2, #32
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	f002 021f 	and.w	r2, r2, #31
 80019a2:	2101      	movs	r1, #1
 80019a4:	fa01 f202 	lsl.w	r2, r1, r2
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ab      	bne.n	8001906 <HAL_RCC_OscConfig+0x26a>
 80019ae:	e002      	b.n	80019b6 <HAL_RCC_OscConfig+0x31a>
 80019b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 817f 	beq.w	8001cca <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019cc:	4ba7      	ldr	r3, [pc, #668]	; (8001c6c <HAL_RCC_OscConfig+0x5d0>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00c      	beq.n	80019f2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019d8:	4ba4      	ldr	r3, [pc, #656]	; (8001c6c <HAL_RCC_OscConfig+0x5d0>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d173      	bne.n	8001acc <HAL_RCC_OscConfig+0x430>
 80019e4:	4ba1      	ldr	r3, [pc, #644]	; (8001c6c <HAL_RCC_OscConfig+0x5d0>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80019ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019f0:	d16c      	bne.n	8001acc <HAL_RCC_OscConfig+0x430>
 80019f2:	2302      	movs	r3, #2
 80019f4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001a04:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d102      	bne.n	8001a22 <HAL_RCC_OscConfig+0x386>
 8001a1c:	4b93      	ldr	r3, [pc, #588]	; (8001c6c <HAL_RCC_OscConfig+0x5d0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	e013      	b.n	8001a4a <HAL_RCC_OscConfig+0x3ae>
 8001a22:	2302      	movs	r3, #2
 8001a24:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001a2c:	fa93 f3a3 	rbit	r3, r3
 8001a30:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001a34:	2302      	movs	r3, #2
 8001a36:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a3a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a46:	4b89      	ldr	r3, [pc, #548]	; (8001c6c <HAL_RCC_OscConfig+0x5d0>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001a50:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001a54:	fa92 f2a2 	rbit	r2, r2
 8001a58:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001a5c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a60:	fab2 f282 	clz	r2, r2
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	f042 0220 	orr.w	r2, r2, #32
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f002 021f 	and.w	r2, r2, #31
 8001a70:	2101      	movs	r1, #1
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00a      	beq.n	8001a92 <HAL_RCC_OscConfig+0x3f6>
 8001a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d002      	beq.n	8001a92 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f000 be52 	b.w	8002736 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a92:	4b76      	ldr	r3, [pc, #472]	; (8001c6c <HAL_RCC_OscConfig+0x5d0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	21f8      	movs	r1, #248	; 0xf8
 8001aa8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001ab0:	fa91 f1a1 	rbit	r1, r1
 8001ab4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001ab8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001abc:	fab1 f181 	clz	r1, r1
 8001ac0:	b2c9      	uxtb	r1, r1
 8001ac2:	408b      	lsls	r3, r1
 8001ac4:	4969      	ldr	r1, [pc, #420]	; (8001c6c <HAL_RCC_OscConfig+0x5d0>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aca:	e0fe      	b.n	8001cca <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8088 	beq.w	8001bee <HAL_RCC_OscConfig+0x552>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001af0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001afe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	461a      	mov	r2, r3
 8001b06:	2301      	movs	r3, #1
 8001b08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff faef 	bl	80010ec <HAL_GetTick>
 8001b0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b14:	f7ff faea 	bl	80010ec <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d902      	bls.n	8001b2a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	f000 be06 	b.w	8002736 <HAL_RCC_OscConfig+0x109a>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001b34:	fa93 f3a3 	rbit	r3, r3
 8001b38:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001b3c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d102      	bne.n	8001b5a <HAL_RCC_OscConfig+0x4be>
 8001b54:	4b45      	ldr	r3, [pc, #276]	; (8001c6c <HAL_RCC_OscConfig+0x5d0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	e013      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e6>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b72:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b7e:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <HAL_RCC_OscConfig+0x5d0>)
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	2202      	movs	r2, #2
 8001b84:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001b88:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001b8c:	fa92 f2a2 	rbit	r2, r2
 8001b90:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001b94:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b98:	fab2 f282 	clz	r2, r2
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	f042 0220 	orr.w	r2, r2, #32
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f002 021f 	and.w	r2, r2, #31
 8001ba8:	2101      	movs	r1, #1
 8001baa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0af      	beq.n	8001b14 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_RCC_OscConfig+0x5d0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	21f8      	movs	r1, #248	; 0xf8
 8001bca:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001bd2:	fa91 f1a1 	rbit	r1, r1
 8001bd6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001bda:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001bde:	fab1 f181 	clz	r1, r1
 8001be2:	b2c9      	uxtb	r1, r1
 8001be4:	408b      	lsls	r3, r1
 8001be6:	4921      	ldr	r1, [pc, #132]	; (8001c6c <HAL_RCC_OscConfig+0x5d0>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e06d      	b.n	8001cca <HAL_RCC_OscConfig+0x62e>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001c00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	461a      	mov	r2, r3
 8001c16:	2300      	movs	r3, #0
 8001c18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fa67 	bl	80010ec <HAL_GetTick>
 8001c1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c24:	f7ff fa62 	bl	80010ec <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d902      	bls.n	8001c3a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	f000 bd7e 	b.w	8002736 <HAL_RCC_OscConfig+0x109a>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001c4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d105      	bne.n	8001c70 <HAL_RCC_OscConfig+0x5d4>
 8001c64:	4b01      	ldr	r3, [pc, #4]	; (8001c6c <HAL_RCC_OscConfig+0x5d0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	e016      	b.n	8001c98 <HAL_RCC_OscConfig+0x5fc>
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	2302      	movs	r3, #2
 8001c72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001c82:	2302      	movs	r3, #2
 8001c84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c88:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c94:	4bbf      	ldr	r3, [pc, #764]	; (8001f94 <HAL_RCC_OscConfig+0x8f8>)
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	2202      	movs	r2, #2
 8001c9a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001c9e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001ca2:	fa92 f2a2 	rbit	r2, r2
 8001ca6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001caa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001cae:	fab2 f282 	clz	r2, r2
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	f042 0220 	orr.w	r2, r2, #32
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	f002 021f 	and.w	r2, r2, #31
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1ac      	bne.n	8001c24 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8113 	beq.w	8001f06 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d07c      	beq.n	8001dea <HAL_RCC_OscConfig+0x74e>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001d02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4ba2      	ldr	r3, [pc, #648]	; (8001f98 <HAL_RCC_OscConfig+0x8fc>)
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	461a      	mov	r2, r3
 8001d16:	2301      	movs	r3, #1
 8001d18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff f9e7 	bl	80010ec <HAL_GetTick>
 8001d1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d24:	f7ff f9e2 	bl	80010ec <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d902      	bls.n	8001d3a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	f000 bcfe 	b.w	8002736 <HAL_RCC_OscConfig+0x109a>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d44:	fa93 f2a3 	rbit	r2, r3
 8001d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	fa93 f2a3 	rbit	r2, r3
 8001d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d7e:	2202      	movs	r2, #2
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	fa93 f2a3 	rbit	r2, r3
 8001d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	4b7e      	ldr	r3, [pc, #504]	; (8001f94 <HAL_RCC_OscConfig+0x8f8>)
 8001d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001da6:	2102      	movs	r1, #2
 8001da8:	6019      	str	r1, [r3, #0]
 8001daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	fa93 f1a3 	rbit	r1, r3
 8001db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dbc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dc0:	6019      	str	r1, [r3, #0]
  return result;
 8001dc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	2101      	movs	r1, #1
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d09d      	beq.n	8001d24 <HAL_RCC_OscConfig+0x688>
 8001de8:	e08d      	b.n	8001f06 <HAL_RCC_OscConfig+0x86a>
 8001dea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fa93 f2a3 	rbit	r2, r3
 8001e04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e08:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e0c:	601a      	str	r2, [r3, #0]
  return result;
 8001e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e12:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e16:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b5d      	ldr	r3, [pc, #372]	; (8001f98 <HAL_RCC_OscConfig+0x8fc>)
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	461a      	mov	r2, r3
 8001e28:	2300      	movs	r3, #0
 8001e2a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2c:	f7ff f95e 	bl	80010ec <HAL_GetTick>
 8001e30:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e36:	f7ff f959 	bl	80010ec <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d902      	bls.n	8001e4c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	f000 bc75 	b.w	8002736 <HAL_RCC_OscConfig+0x109a>
 8001e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e50:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e54:	2202      	movs	r2, #2
 8001e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	fa93 f2a3 	rbit	r2, r3
 8001e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e78:	2202      	movs	r2, #2
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	fa93 f2a3 	rbit	r2, r3
 8001e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f2a3 	rbit	r2, r3
 8001eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001eb6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_RCC_OscConfig+0x8f8>)
 8001eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	6019      	str	r1, [r3, #0]
 8001ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ecc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	fa93 f1a3 	rbit	r1, r3
 8001ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eda:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ede:	6019      	str	r1, [r3, #0]
  return result;
 8001ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	2101      	movs	r1, #1
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d197      	bne.n	8001e36 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 81a5 	beq.w	8002266 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f22:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <HAL_RCC_OscConfig+0x8f8>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d116      	bne.n	8001f5c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_RCC_OscConfig+0x8f8>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <HAL_RCC_OscConfig+0x8f8>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <HAL_RCC_OscConfig+0x8f8>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f54:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f56:	2301      	movs	r3, #1
 8001f58:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_RCC_OscConfig+0x900>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d121      	bne.n	8001fac <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_RCC_OscConfig+0x900>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <HAL_RCC_OscConfig+0x900>)
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f72:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f74:	f7ff f8ba 	bl	80010ec <HAL_GetTick>
 8001f78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	e010      	b.n	8001fa0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7e:	f7ff f8b5 	bl	80010ec <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d908      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e3d1      	b.n	8002736 <HAL_RCC_OscConfig+0x109a>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	10908120 	.word	0x10908120
 8001f9c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	4b8d      	ldr	r3, [pc, #564]	; (80021d8 <HAL_RCC_OscConfig+0xb3c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0e8      	beq.n	8001f7e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d106      	bne.n	8001fca <HAL_RCC_OscConfig+0x92e>
 8001fbc:	4b87      	ldr	r3, [pc, #540]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a86      	ldr	r2, [pc, #536]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	e035      	b.n	8002036 <HAL_RCC_OscConfig+0x99a>
 8001fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x958>
 8001fda:	4b80      	ldr	r3, [pc, #512]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a7f      	ldr	r2, [pc, #508]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6213      	str	r3, [r2, #32]
 8001fe6:	4b7d      	ldr	r3, [pc, #500]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a7c      	ldr	r2, [pc, #496]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 8001fec:	f023 0304 	bic.w	r3, r3, #4
 8001ff0:	6213      	str	r3, [r2, #32]
 8001ff2:	e020      	b.n	8002036 <HAL_RCC_OscConfig+0x99a>
 8001ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b05      	cmp	r3, #5
 8002002:	d10c      	bne.n	800201e <HAL_RCC_OscConfig+0x982>
 8002004:	4b75      	ldr	r3, [pc, #468]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4a74      	ldr	r2, [pc, #464]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 800200a:	f043 0304 	orr.w	r3, r3, #4
 800200e:	6213      	str	r3, [r2, #32]
 8002010:	4b72      	ldr	r3, [pc, #456]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4a71      	ldr	r2, [pc, #452]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6213      	str	r3, [r2, #32]
 800201c:	e00b      	b.n	8002036 <HAL_RCC_OscConfig+0x99a>
 800201e:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a6e      	ldr	r2, [pc, #440]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	4b6c      	ldr	r3, [pc, #432]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a6b      	ldr	r2, [pc, #428]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8081 	beq.w	800214a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7ff f850 	bl	80010ec <HAL_GetTick>
 800204c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	e00b      	b.n	800206a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7ff f84b 	bl	80010ec <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e365      	b.n	8002736 <HAL_RCC_OscConfig+0x109a>
 800206a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002072:	2202      	movs	r2, #2
 8002074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fa93 f2a3 	rbit	r2, r3
 8002084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002088:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002092:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002096:	2202      	movs	r2, #2
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	fa93 f2a3 	rbit	r2, r3
 80020a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020b0:	601a      	str	r2, [r3, #0]
  return result;
 80020b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f043 0302 	orr.w	r3, r3, #2
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d102      	bne.n	80020d6 <HAL_RCC_OscConfig+0xa3a>
 80020d0:	4b42      	ldr	r3, [pc, #264]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	e013      	b.n	80020fe <HAL_RCC_OscConfig+0xa62>
 80020d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020da:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80020de:	2202      	movs	r2, #2
 80020e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	fa93 f2a3 	rbit	r2, r3
 80020f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	4b38      	ldr	r3, [pc, #224]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002102:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002106:	2102      	movs	r1, #2
 8002108:	6011      	str	r1, [r2, #0]
 800210a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800210e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	fa92 f1a2 	rbit	r1, r2
 8002118:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800211c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002120:	6011      	str	r1, [r2, #0]
  return result;
 8002122:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002126:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	fab2 f282 	clz	r2, r2
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	f002 021f 	and.w	r2, r2, #31
 800213c:	2101      	movs	r1, #1
 800213e:	fa01 f202 	lsl.w	r2, r1, r2
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d084      	beq.n	8002052 <HAL_RCC_OscConfig+0x9b6>
 8002148:	e083      	b.n	8002252 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214a:	f7fe ffcf 	bl	80010ec <HAL_GetTick>
 800214e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002152:	e00b      	b.n	800216c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f7fe ffca 	bl	80010ec <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f241 3288 	movw	r2, #5000	; 0x1388
 8002164:	4293      	cmp	r3, r2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e2e4      	b.n	8002736 <HAL_RCC_OscConfig+0x109a>
 800216c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002170:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002174:	2202      	movs	r2, #2
 8002176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	fa93 f2a3 	rbit	r2, r3
 8002186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002194:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002198:	2202      	movs	r2, #2
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	fa93 f2a3 	rbit	r2, r3
 80021aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021b2:	601a      	str	r2, [r3, #0]
  return result;
 80021b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d106      	bne.n	80021e0 <HAL_RCC_OscConfig+0xb44>
 80021d2:	4b02      	ldr	r3, [pc, #8]	; (80021dc <HAL_RCC_OscConfig+0xb40>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	e017      	b.n	8002208 <HAL_RCC_OscConfig+0xb6c>
 80021d8:	40007000 	.word	0x40007000
 80021dc:	40021000 	.word	0x40021000
 80021e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80021e8:	2202      	movs	r2, #2
 80021ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	fa93 f2a3 	rbit	r2, r3
 80021fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021fe:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	4bb3      	ldr	r3, [pc, #716]	; (80024d4 <HAL_RCC_OscConfig+0xe38>)
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800220c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002210:	2102      	movs	r1, #2
 8002212:	6011      	str	r1, [r2, #0]
 8002214:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002218:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	fa92 f1a2 	rbit	r1, r2
 8002222:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002226:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800222a:	6011      	str	r1, [r2, #0]
  return result;
 800222c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002230:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	fab2 f282 	clz	r2, r2
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	f002 021f 	and.w	r2, r2, #31
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f202 	lsl.w	r2, r1, r2
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d180      	bne.n	8002154 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002252:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002256:	2b01      	cmp	r3, #1
 8002258:	d105      	bne.n	8002266 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225a:	4b9e      	ldr	r3, [pc, #632]	; (80024d4 <HAL_RCC_OscConfig+0xe38>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4a9d      	ldr	r2, [pc, #628]	; (80024d4 <HAL_RCC_OscConfig+0xe38>)
 8002260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002264:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002266:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 825e 	beq.w	8002734 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002278:	4b96      	ldr	r3, [pc, #600]	; (80024d4 <HAL_RCC_OscConfig+0xe38>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b08      	cmp	r3, #8
 8002282:	f000 821f 	beq.w	80026c4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002286:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b02      	cmp	r3, #2
 8002294:	f040 8170 	bne.w	8002578 <HAL_RCC_OscConfig+0xedc>
 8002298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022bc:	601a      	str	r2, [r3, #0]
  return result;
 80022be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022c6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	461a      	mov	r2, r3
 80022da:	2300      	movs	r3, #0
 80022dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7fe ff05 	bl	80010ec <HAL_GetTick>
 80022e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e6:	e009      	b.n	80022fc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e8:	f7fe ff00 	bl	80010ec <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e21c      	b.n	8002736 <HAL_RCC_OscConfig+0x109a>
 80022fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002300:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002304:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002308:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	fa93 f2a3 	rbit	r2, r3
 8002318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002320:	601a      	str	r2, [r3, #0]
  return result;
 8002322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002326:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800232a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d102      	bne.n	8002346 <HAL_RCC_OscConfig+0xcaa>
 8002340:	4b64      	ldr	r3, [pc, #400]	; (80024d4 <HAL_RCC_OscConfig+0xe38>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	e027      	b.n	8002396 <HAL_RCC_OscConfig+0xcfa>
 8002346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800234e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002358:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	fa93 f2a3 	rbit	r2, r3
 8002362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002366:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002370:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002374:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f2a3 	rbit	r2, r3
 8002388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <HAL_RCC_OscConfig+0xe38>)
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800239a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800239e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023a2:	6011      	str	r1, [r2, #0]
 80023a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023a8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	fa92 f1a2 	rbit	r1, r2
 80023b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023b6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80023ba:	6011      	str	r1, [r2, #0]
  return result;
 80023bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023c0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	fab2 f282 	clz	r2, r2
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	f042 0220 	orr.w	r2, r2, #32
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	f002 021f 	and.w	r2, r2, #31
 80023d6:	2101      	movs	r1, #1
 80023d8:	fa01 f202 	lsl.w	r2, r1, r2
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d182      	bne.n	80022e8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e2:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <HAL_RCC_OscConfig+0xe38>)
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	f023 020f 	bic.w	r2, r3, #15
 80023ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	4937      	ldr	r1, [pc, #220]	; (80024d4 <HAL_RCC_OscConfig+0xe38>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80023fc:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <HAL_RCC_OscConfig+0xe38>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002408:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a19      	ldr	r1, [r3, #32]
 8002410:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002414:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	430b      	orrs	r3, r1
 800241e:	492d      	ldr	r1, [pc, #180]	; (80024d4 <HAL_RCC_OscConfig+0xe38>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
 8002424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002428:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800242c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002436:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	fa93 f2a3 	rbit	r2, r3
 8002440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002444:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002448:	601a      	str	r2, [r3, #0]
  return result;
 800244a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002452:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800245e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	461a      	mov	r2, r3
 8002466:	2301      	movs	r3, #1
 8002468:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7fe fe3f 	bl	80010ec <HAL_GetTick>
 800246e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002472:	e009      	b.n	8002488 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002474:	f7fe fe3a 	bl	80010ec <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e156      	b.n	8002736 <HAL_RCC_OscConfig+0x109a>
 8002488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002490:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002494:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800249a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fa93 f2a3 	rbit	r2, r3
 80024a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024ac:	601a      	str	r2, [r3, #0]
  return result;
 80024ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d105      	bne.n	80024d8 <HAL_RCC_OscConfig+0xe3c>
 80024cc:	4b01      	ldr	r3, [pc, #4]	; (80024d4 <HAL_RCC_OscConfig+0xe38>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	e02a      	b.n	8002528 <HAL_RCC_OscConfig+0xe8c>
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024dc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80024e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ea:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	fa93 f2a3 	rbit	r2, r3
 80024f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002502:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002506:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002510:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	fa93 f2a3 	rbit	r2, r3
 800251a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	4b86      	ldr	r3, [pc, #536]	; (8002740 <HAL_RCC_OscConfig+0x10a4>)
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800252c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002530:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002534:	6011      	str	r1, [r2, #0]
 8002536:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800253a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	fa92 f1a2 	rbit	r1, r2
 8002544:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002548:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800254c:	6011      	str	r1, [r2, #0]
  return result;
 800254e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002552:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	fab2 f282 	clz	r2, r2
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	f042 0220 	orr.w	r2, r2, #32
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	f002 021f 	and.w	r2, r2, #31
 8002568:	2101      	movs	r1, #1
 800256a:	fa01 f202 	lsl.w	r2, r1, r2
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	f43f af7f 	beq.w	8002474 <HAL_RCC_OscConfig+0xdd8>
 8002576:	e0dd      	b.n	8002734 <HAL_RCC_OscConfig+0x1098>
 8002578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	fa93 f2a3 	rbit	r2, r3
 8002594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002598:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800259c:	601a      	str	r2, [r3, #0]
  return result;
 800259e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025a6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	461a      	mov	r2, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7fe fd95 	bl	80010ec <HAL_GetTick>
 80025c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	e009      	b.n	80025dc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe fd90 	bl	80010ec <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0ac      	b.n	8002736 <HAL_RCC_OscConfig+0x109a>
 80025dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	fa93 f2a3 	rbit	r2, r3
 80025f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025fc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002600:	601a      	str	r2, [r3, #0]
  return result;
 8002602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002606:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800260a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d102      	bne.n	8002626 <HAL_RCC_OscConfig+0xf8a>
 8002620:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_RCC_OscConfig+0x10a4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	e027      	b.n	8002676 <HAL_RCC_OscConfig+0xfda>
 8002626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800262a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800262e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002638:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	fa93 f2a3 	rbit	r2, r3
 8002642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002646:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002650:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002654:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	fa93 f2a3 	rbit	r2, r3
 8002668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800266c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	4b33      	ldr	r3, [pc, #204]	; (8002740 <HAL_RCC_OscConfig+0x10a4>)
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800267a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800267e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002682:	6011      	str	r1, [r2, #0]
 8002684:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002688:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	fa92 f1a2 	rbit	r1, r2
 8002692:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002696:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800269a:	6011      	str	r1, [r2, #0]
  return result;
 800269c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026a0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	fab2 f282 	clz	r2, r2
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	f042 0220 	orr.w	r2, r2, #32
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	f002 021f 	and.w	r2, r2, #31
 80026b6:	2101      	movs	r1, #1
 80026b8:	fa01 f202 	lsl.w	r2, r1, r2
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d182      	bne.n	80025c8 <HAL_RCC_OscConfig+0xf2c>
 80026c2:	e037      	b.n	8002734 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e02e      	b.n	8002736 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_RCC_OscConfig+0x10a4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80026e0:	4b17      	ldr	r3, [pc, #92]	; (8002740 <HAL_RCC_OscConfig+0x10a4>)
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80026ec:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80026f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d117      	bne.n	8002730 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002700:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002704:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002708:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800270c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002714:	429a      	cmp	r2, r3
 8002716:	d10b      	bne.n	8002730 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002718:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800271c:	f003 020f 	and.w	r2, r3, #15
 8002720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002724:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000

08002744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b09e      	sub	sp, #120	; 0x78
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e162      	b.n	8002a22 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800275c:	4b90      	ldr	r3, [pc, #576]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d910      	bls.n	800278c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b8d      	ldr	r3, [pc, #564]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 0207 	bic.w	r2, r3, #7
 8002772:	498b      	ldr	r1, [pc, #556]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	4b89      	ldr	r3, [pc, #548]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e14a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002798:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	497f      	ldr	r1, [pc, #508]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80dc 	beq.w	8002970 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d13c      	bne.n	800283a <HAL_RCC_ClockConfig+0xf6>
 80027c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d102      	bne.n	80027ea <HAL_RCC_ClockConfig+0xa6>
 80027e4:	4b6f      	ldr	r3, [pc, #444]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	e00f      	b.n	800280a <HAL_RCC_ClockConfig+0xc6>
 80027ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	667b      	str	r3, [r7, #100]	; 0x64
 80027f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fc:	663b      	str	r3, [r7, #96]	; 0x60
 80027fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002806:	4b67      	ldr	r3, [pc, #412]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800280e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002810:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002812:	fa92 f2a2 	rbit	r2, r2
 8002816:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002818:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800281a:	fab2 f282 	clz	r2, r2
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	f042 0220 	orr.w	r2, r2, #32
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	f002 021f 	and.w	r2, r2, #31
 800282a:	2101      	movs	r1, #1
 800282c:	fa01 f202 	lsl.w	r2, r1, r2
 8002830:	4013      	ands	r3, r2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d17b      	bne.n	800292e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e0f3      	b.n	8002a22 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d13c      	bne.n	80028bc <HAL_RCC_ClockConfig+0x178>
 8002842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002846:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d102      	bne.n	800286c <HAL_RCC_ClockConfig+0x128>
 8002866:	4b4f      	ldr	r3, [pc, #316]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	e00f      	b.n	800288c <HAL_RCC_ClockConfig+0x148>
 800286c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002870:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	647b      	str	r3, [r7, #68]	; 0x44
 800287a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800287e:	643b      	str	r3, [r7, #64]	; 0x40
 8002880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002888:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002890:	63ba      	str	r2, [r7, #56]	; 0x38
 8002892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002894:	fa92 f2a2 	rbit	r2, r2
 8002898:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800289a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800289c:	fab2 f282 	clz	r2, r2
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	f042 0220 	orr.w	r2, r2, #32
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f002 021f 	and.w	r2, r2, #31
 80028ac:	2101      	movs	r1, #1
 80028ae:	fa01 f202 	lsl.w	r2, r1, r2
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d13a      	bne.n	800292e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0b2      	b.n	8002a22 <HAL_RCC_ClockConfig+0x2de>
 80028bc:	2302      	movs	r3, #2
 80028be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d102      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x1a0>
 80028de:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	e00d      	b.n	8002900 <HAL_RCC_ClockConfig+0x1bc>
 80028e4:	2302      	movs	r3, #2
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
 80028f0:	2302      	movs	r3, #2
 80028f2:	623b      	str	r3, [r7, #32]
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	2202      	movs	r2, #2
 8002902:	61ba      	str	r2, [r7, #24]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	fa92 f2a2 	rbit	r2, r2
 800290a:	617a      	str	r2, [r7, #20]
  return result;
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	fab2 f282 	clz	r2, r2
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	f042 0220 	orr.w	r2, r2, #32
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	f002 021f 	and.w	r2, r2, #31
 800291e:	2101      	movs	r1, #1
 8002920:	fa01 f202 	lsl.w	r2, r1, r2
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e079      	b.n	8002a22 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292e:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f023 0203 	bic.w	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	491a      	ldr	r1, [pc, #104]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002940:	f7fe fbd4 	bl	80010ec <HAL_GetTick>
 8002944:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	e00a      	b.n	800295e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002948:	f7fe fbd0 	bl	80010ec <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	; 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e061      	b.n	8002a22 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 020c 	and.w	r2, r3, #12
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	429a      	cmp	r2, r3
 800296e:	d1eb      	bne.n	8002948 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d214      	bcs.n	80029a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 0207 	bic.w	r2, r3, #7
 8002986:	4906      	ldr	r1, [pc, #24]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e040      	b.n	8002a22 <HAL_RCC_ClockConfig+0x2de>
 80029a0:	40022000 	.word	0x40022000
 80029a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_RCC_ClockConfig+0x2e8>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	491a      	ldr	r1, [pc, #104]	; (8002a2c <HAL_RCC_ClockConfig+0x2e8>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_RCC_ClockConfig+0x2e8>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4912      	ldr	r1, [pc, #72]	; (8002a2c <HAL_RCC_ClockConfig+0x2e8>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029e6:	f000 f829 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 80029ea:	4601      	mov	r1, r0
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <HAL_RCC_ClockConfig+0x2e8>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f4:	22f0      	movs	r2, #240	; 0xf0
 80029f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	fa92 f2a2 	rbit	r2, r2
 80029fe:	60fa      	str	r2, [r7, #12]
  return result;
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	fab2 f282 	clz	r2, r2
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	40d3      	lsrs	r3, r2
 8002a0a:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x2ec>)
 8002a0c:	5cd3      	ldrb	r3, [r2, r3]
 8002a0e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a12:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <HAL_RCC_ClockConfig+0x2f0>)
 8002a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <HAL_RCC_ClockConfig+0x2f4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fb22 	bl	8001064 <HAL_InitTick>
  
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3778      	adds	r7, #120	; 0x78
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	080040c4 	.word	0x080040c4
 8002a34:	20000004 	.word	0x20000004
 8002a38:	20000008 	.word	0x20000008

08002a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b08b      	sub	sp, #44	; 0x2c
 8002a40:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a56:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d002      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0x30>
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d003      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0x36>
 8002a6a:	e03f      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a6c:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a6e:	623b      	str	r3, [r7, #32]
      break;
 8002a70:	e03f      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a78:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a7c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	fa92 f2a2 	rbit	r2, r2
 8002a84:	607a      	str	r2, [r7, #4]
  return result;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	fab2 f282 	clz	r2, r2
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	40d3      	lsrs	r3, r2
 8002a90:	4a1d      	ldr	r2, [pc, #116]	; (8002b08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a92:	5cd3      	ldrb	r3, [r2, r3]
 8002a94:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a96:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	220f      	movs	r2, #15
 8002aa0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	fa92 f2a2 	rbit	r2, r2
 8002aa8:	60fa      	str	r2, [r7, #12]
  return result;
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	fab2 f282 	clz	r2, r2
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	40d3      	lsrs	r3, r2
 8002ab4:	4a15      	ldr	r2, [pc, #84]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ab6:	5cd3      	ldrb	r3, [r2, r3]
 8002ab8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ac4:	4a0f      	ldr	r2, [pc, #60]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad4:	e007      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ad6:	4a0b      	ldr	r2, [pc, #44]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	623b      	str	r3, [r7, #32]
      break;
 8002aea:	e002      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002aee:	623b      	str	r3, [r7, #32]
      break;
 8002af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af2:	6a3b      	ldr	r3, [r7, #32]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	372c      	adds	r7, #44	; 0x2c
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40021000 	.word	0x40021000
 8002b04:	007a1200 	.word	0x007a1200
 8002b08:	080040d4 	.word	0x080040d4
 8002b0c:	080040e4 	.word	0x080040e4

08002b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b092      	sub	sp, #72	; 0x48
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80d4 	beq.w	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b34:	4b4e      	ldr	r3, [pc, #312]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10e      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b40:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	4a4a      	ldr	r2, [pc, #296]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	61d3      	str	r3, [r2, #28]
 8002b4c:	4b48      	ldr	r3, [pc, #288]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b45      	ldr	r3, [pc, #276]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d118      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6a:	4b42      	ldr	r3, [pc, #264]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a41      	ldr	r2, [pc, #260]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b76:	f7fe fab9 	bl	80010ec <HAL_GetTick>
 8002b7a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	e008      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7e:	f7fe fab5 	bl	80010ec <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b64      	cmp	r3, #100	; 0x64
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e1d6      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	4b38      	ldr	r3, [pc, #224]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b9c:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8084 	beq.w	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d07c      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bbc:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	461a      	mov	r2, r3
 8002be6:	2301      	movs	r3, #1
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c0e:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c12:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d04b      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fa65 	bl	80010ec <HAL_GetTick>
 8002c22:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c24:	e00a      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7fe fa61 	bl	80010ec <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e180      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
 8002c48:	2302      	movs	r3, #2
 8002c4a:	623b      	str	r3, [r7, #32]
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	61fb      	str	r3, [r7, #28]
  return result;
 8002c54:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d108      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c6a:	4b01      	ldr	r3, [pc, #4]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	e00d      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40007000 	.word	0x40007000
 8002c78:	10908100 	.word	0x10908100
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	4b9a      	ldr	r3, [pc, #616]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	613a      	str	r2, [r7, #16]
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	fa92 f2a2 	rbit	r2, r2
 8002c96:	60fa      	str	r2, [r7, #12]
  return result;
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	fab2 f282 	clz	r2, r2
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	f002 021f 	and.w	r2, r2, #31
 8002caa:	2101      	movs	r1, #1
 8002cac:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0b7      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002cb6:	4b8f      	ldr	r3, [pc, #572]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	498c      	ldr	r1, [pc, #560]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d105      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd0:	4b88      	ldr	r3, [pc, #544]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	4a87      	ldr	r2, [pc, #540]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ce8:	4b82      	ldr	r3, [pc, #520]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	f023 0203 	bic.w	r2, r3, #3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	497f      	ldr	r1, [pc, #508]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d008      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d06:	4b7b      	ldr	r3, [pc, #492]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	4978      	ldr	r1, [pc, #480]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d24:	4b73      	ldr	r3, [pc, #460]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	4970      	ldr	r1, [pc, #448]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d42:	4b6c      	ldr	r3, [pc, #432]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f023 0210 	bic.w	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	4969      	ldr	r1, [pc, #420]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d60:	4b64      	ldr	r3, [pc, #400]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	4961      	ldr	r1, [pc, #388]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f023 0220 	bic.w	r2, r3, #32
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	495a      	ldr	r1, [pc, #360]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d9c:	4b55      	ldr	r3, [pc, #340]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	4952      	ldr	r1, [pc, #328]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dba:	4b4e      	ldr	r3, [pc, #312]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	494b      	ldr	r1, [pc, #300]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dd8:	4b46      	ldr	r3, [pc, #280]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	4943      	ldr	r1, [pc, #268]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002df6:	4b3f      	ldr	r3, [pc, #252]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	493c      	ldr	r1, [pc, #240]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e14:	4b37      	ldr	r3, [pc, #220]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	4934      	ldr	r1, [pc, #208]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e32:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	492d      	ldr	r1, [pc, #180]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e50:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5c:	4925      	ldr	r1, [pc, #148]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002e6e:	4b21      	ldr	r3, [pc, #132]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	491e      	ldr	r1, [pc, #120]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	4916      	ldr	r1, [pc, #88]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	490f      	ldr	r1, [pc, #60]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed4:	4907      	ldr	r1, [pc, #28]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00c      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002ee6:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	e002      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	4913      	ldr	r1, [pc, #76]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f18:	490b      	ldr	r1, [pc, #44]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f36:	4904      	ldr	r1, [pc, #16]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3748      	adds	r7, #72	; 0x48
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000

08002f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e09d      	b.n	800309a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d108      	bne.n	8002f78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f6e:	d009      	beq.n	8002f84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
 8002f76:	e005      	b.n	8002f84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd ff5e 	bl	8000e60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fc4:	d902      	bls.n	8002fcc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	e002      	b.n	8002fd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fda:	d007      	beq.n	8002fec <HAL_SPI_Init+0xa0>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fe4:	d002      	beq.n	8002fec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302e:	ea42 0103 	orr.w	r1, r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	f003 0204 	and.w	r2, r3, #4
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003068:	ea42 0103 	orr.w	r1, r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69da      	ldr	r2, [r3, #28]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003088:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b08a      	sub	sp, #40	; 0x28
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030b0:	2301      	movs	r3, #1
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_SPI_TransmitReceive+0x26>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e1fb      	b.n	80034c0 <HAL_SPI_TransmitReceive+0x41e>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030d0:	f7fe f80c 	bl	80010ec <HAL_GetTick>
 80030d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80030e4:	887b      	ldrh	r3, [r7, #2]
 80030e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030ec:	7efb      	ldrb	r3, [r7, #27]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d00e      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x6e>
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030f8:	d106      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x66>
 8003102:	7efb      	ldrb	r3, [r7, #27]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d003      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003108:	2302      	movs	r3, #2
 800310a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800310e:	e1cd      	b.n	80034ac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_SPI_TransmitReceive+0x80>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <HAL_SPI_TransmitReceive+0x80>
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d103      	bne.n	800312a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003128:	e1c0      	b.n	80034ac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b04      	cmp	r3, #4
 8003134:	d003      	beq.n	800313e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2205      	movs	r2, #5
 800313a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	887a      	ldrh	r2, [r7, #2]
 8003156:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	887a      	ldrh	r2, [r7, #2]
 8003164:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	887a      	ldrh	r2, [r7, #2]
 800316a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003180:	d802      	bhi.n	8003188 <HAL_SPI_TransmitReceive+0xe6>
 8003182:	8a3b      	ldrh	r3, [r7, #16]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d908      	bls.n	800319a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	e007      	b.n	80031aa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031a8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d007      	beq.n	80031c8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031d0:	d97c      	bls.n	80032cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_SPI_TransmitReceive+0x13e>
 80031da:	8a7b      	ldrh	r3, [r7, #18]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d169      	bne.n	80032b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	881a      	ldrh	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	1c9a      	adds	r2, r3, #2
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003204:	e056      	b.n	80032b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b02      	cmp	r3, #2
 8003212:	d11b      	bne.n	800324c <HAL_SPI_TransmitReceive+0x1aa>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d016      	beq.n	800324c <HAL_SPI_TransmitReceive+0x1aa>
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	2b01      	cmp	r3, #1
 8003222:	d113      	bne.n	800324c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	881a      	ldrh	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	1c9a      	adds	r2, r3, #2
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d11c      	bne.n	8003294 <HAL_SPI_TransmitReceive+0x1f2>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d016      	beq.n	8003294 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	b292      	uxth	r2, r2
 8003272:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	1c9a      	adds	r2, r3, #2
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003290:	2301      	movs	r3, #1
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003294:	f7fd ff2a 	bl	80010ec <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d807      	bhi.n	80032b4 <HAL_SPI_TransmitReceive+0x212>
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d003      	beq.n	80032b4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80032b2:	e0fb      	b.n	80034ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1a3      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x164>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d19d      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x164>
 80032ca:	e0df      	b.n	800348c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_SPI_TransmitReceive+0x23a>
 80032d4:	8a7b      	ldrh	r3, [r7, #18]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	f040 80cb 	bne.w	8003472 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d912      	bls.n	800330c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ea:	881a      	ldrh	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	1c9a      	adds	r2, r3, #2
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b02      	subs	r3, #2
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	87da      	strh	r2, [r3, #62]	; 0x3e
 800330a:	e0b2      	b.n	8003472 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	330c      	adds	r3, #12
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003332:	e09e      	b.n	8003472 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b02      	cmp	r3, #2
 8003340:	d134      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x30a>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d02f      	beq.n	80033ac <HAL_SPI_TransmitReceive+0x30a>
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	2b01      	cmp	r3, #1
 8003350:	d12c      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d912      	bls.n	8003382 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	881a      	ldrh	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	1c9a      	adds	r2, r3, #2
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b02      	subs	r3, #2
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003380:	e012      	b.n	80033a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	330c      	adds	r3, #12
 800338c:	7812      	ldrb	r2, [r2, #0]
 800338e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d148      	bne.n	800344c <HAL_SPI_TransmitReceive+0x3aa>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d042      	beq.n	800344c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d923      	bls.n	800341a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	b292      	uxth	r2, r2
 80033de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	1c9a      	adds	r2, r3, #2
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b02      	subs	r3, #2
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b01      	cmp	r3, #1
 8003406:	d81f      	bhi.n	8003448 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003416:	605a      	str	r2, [r3, #4]
 8003418:	e016      	b.n	8003448 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f103 020c 	add.w	r2, r3, #12
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	7812      	ldrb	r2, [r2, #0]
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003448:	2301      	movs	r3, #1
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800344c:	f7fd fe4e 	bl	80010ec <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003458:	429a      	cmp	r2, r3
 800345a:	d803      	bhi.n	8003464 <HAL_SPI_TransmitReceive+0x3c2>
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d102      	bne.n	800346a <HAL_SPI_TransmitReceive+0x3c8>
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	2b00      	cmp	r3, #0
 8003468:	d103      	bne.n	8003472 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003470:	e01c      	b.n	80034ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	f47f af5b 	bne.w	8003334 <HAL_SPI_TransmitReceive+0x292>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	f47f af54 	bne.w	8003334 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f937 	bl	8003704 <SPI_EndRxTxTransaction>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d006      	beq.n	80034aa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	661a      	str	r2, [r3, #96]	; 0x60
 80034a8:	e000      	b.n	80034ac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80034aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80034bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3728      	adds	r7, #40	; 0x28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	4613      	mov	r3, r2
 80034d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034d8:	f7fd fe08 	bl	80010ec <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	4413      	add	r3, r2
 80034e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034e8:	f7fd fe00 	bl	80010ec <HAL_GetTick>
 80034ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034ee:	4b39      	ldr	r3, [pc, #228]	; (80035d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	015b      	lsls	r3, r3, #5
 80034f4:	0d1b      	lsrs	r3, r3, #20
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	fb02 f303 	mul.w	r3, r2, r3
 80034fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034fe:	e054      	b.n	80035aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d050      	beq.n	80035aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003508:	f7fd fdf0 	bl	80010ec <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	429a      	cmp	r2, r3
 8003516:	d902      	bls.n	800351e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d13d      	bne.n	800359a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800352c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003536:	d111      	bne.n	800355c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003540:	d004      	beq.n	800354c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354a:	d107      	bne.n	800355c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003564:	d10f      	bne.n	8003586 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003584:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e017      	b.n	80035ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4013      	ands	r3, r2
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	bf0c      	ite	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	2300      	movne	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d19b      	bne.n	8003500 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000004 	.word	0x20000004

080035d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035ea:	f7fd fd7f 	bl	80010ec <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	4413      	add	r3, r2
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80035fa:	f7fd fd77 	bl	80010ec <HAL_GetTick>
 80035fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003608:	4b3d      	ldr	r3, [pc, #244]	; (8003700 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00da      	lsls	r2, r3, #3
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	0d1b      	lsrs	r3, r3, #20
 8003618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003620:	e060      	b.n	80036e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003628:	d107      	bne.n	800363a <SPI_WaitFifoStateUntilTimeout+0x62>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d104      	bne.n	800363a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003638:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d050      	beq.n	80036e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003642:	f7fd fd53 	bl	80010ec <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364e:	429a      	cmp	r2, r3
 8003650:	d902      	bls.n	8003658 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	2b00      	cmp	r3, #0
 8003656:	d13d      	bne.n	80036d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003666:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003670:	d111      	bne.n	8003696 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800367a:	d004      	beq.n	8003686 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	d107      	bne.n	8003696 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003694:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369e:	d10f      	bne.n	80036c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e010      	b.n	80036f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	4013      	ands	r3, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d196      	bne.n	8003622 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3728      	adds	r7, #40	; 0x28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000004 	.word	0x20000004

08003704 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2200      	movs	r2, #0
 8003718:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f7ff ff5b 	bl	80035d8 <SPI_WaitFifoStateUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d007      	beq.n	8003738 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e027      	b.n	8003788 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2200      	movs	r2, #0
 8003740:	2180      	movs	r1, #128	; 0x80
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff fec0 	bl	80034c8 <SPI_WaitFlagStateUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d007      	beq.n	800375e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003752:	f043 0220 	orr.w	r2, r3, #32
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e014      	b.n	8003788 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2200      	movs	r2, #0
 8003766:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f7ff ff34 	bl	80035d8 <SPI_WaitFifoStateUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d007      	beq.n	8003786 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e000      	b.n	8003788 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e049      	b.n	8003836 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd fba8 	bl	8000f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3304      	adds	r3, #4
 80037cc:	4619      	mov	r1, r3
 80037ce:	4610      	mov	r0, r2
 80037d0:	f000 fa50 	bl	8003c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b02      	cmp	r3, #2
 8003852:	d122      	bne.n	800389a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b02      	cmp	r3, #2
 8003860:	d11b      	bne.n	800389a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f06f 0202 	mvn.w	r2, #2
 800386a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f9d8 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 8003886:	e005      	b.n	8003894 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f9ca 	bl	8003c22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f9db 	bl	8003c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d122      	bne.n	80038ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d11b      	bne.n	80038ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f06f 0204 	mvn.w	r2, #4
 80038be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f9ae 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 80038da:	e005      	b.n	80038e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f9a0 	bl	8003c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f9b1 	bl	8003c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d122      	bne.n	8003942 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b08      	cmp	r3, #8
 8003908:	d11b      	bne.n	8003942 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f06f 0208 	mvn.w	r2, #8
 8003912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2204      	movs	r2, #4
 8003918:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f984 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 800392e:	e005      	b.n	800393c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f976 	bl	8003c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f987 	bl	8003c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b10      	cmp	r3, #16
 800394e:	d122      	bne.n	8003996 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b10      	cmp	r3, #16
 800395c:	d11b      	bne.n	8003996 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f06f 0210 	mvn.w	r2, #16
 8003966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2208      	movs	r2, #8
 800396c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f95a 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 8003982:	e005      	b.n	8003990 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f94c 	bl	8003c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f95d 	bl	8003c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d10e      	bne.n	80039c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d107      	bne.n	80039c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f06f 0201 	mvn.w	r2, #1
 80039ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f926 	bl	8003c0e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039cc:	2b80      	cmp	r3, #128	; 0x80
 80039ce:	d10e      	bne.n	80039ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b80      	cmp	r3, #128	; 0x80
 80039dc:	d107      	bne.n	80039ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fb11 	bl	8004010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fc:	d10e      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	2b80      	cmp	r3, #128	; 0x80
 8003a0a:	d107      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fb04 	bl	8004024 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b40      	cmp	r3, #64	; 0x40
 8003a28:	d10e      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a34:	2b40      	cmp	r3, #64	; 0x40
 8003a36:	d107      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f90b 	bl	8003c5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d10e      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d107      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0220 	mvn.w	r2, #32
 8003a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fac4 	bl	8003ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_TIM_ConfigClockSource+0x1c>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e0b6      	b.n	8003c06 <HAL_TIM_ConfigClockSource+0x18a>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ac2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad4:	d03e      	beq.n	8003b54 <HAL_TIM_ConfigClockSource+0xd8>
 8003ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ada:	f200 8087 	bhi.w	8003bec <HAL_TIM_ConfigClockSource+0x170>
 8003ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae2:	f000 8086 	beq.w	8003bf2 <HAL_TIM_ConfigClockSource+0x176>
 8003ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aea:	d87f      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x170>
 8003aec:	2b70      	cmp	r3, #112	; 0x70
 8003aee:	d01a      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0xaa>
 8003af0:	2b70      	cmp	r3, #112	; 0x70
 8003af2:	d87b      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x170>
 8003af4:	2b60      	cmp	r3, #96	; 0x60
 8003af6:	d050      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x11e>
 8003af8:	2b60      	cmp	r3, #96	; 0x60
 8003afa:	d877      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x170>
 8003afc:	2b50      	cmp	r3, #80	; 0x50
 8003afe:	d03c      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0xfe>
 8003b00:	2b50      	cmp	r3, #80	; 0x50
 8003b02:	d873      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x170>
 8003b04:	2b40      	cmp	r3, #64	; 0x40
 8003b06:	d058      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x13e>
 8003b08:	2b40      	cmp	r3, #64	; 0x40
 8003b0a:	d86f      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x170>
 8003b0c:	2b30      	cmp	r3, #48	; 0x30
 8003b0e:	d064      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x15e>
 8003b10:	2b30      	cmp	r3, #48	; 0x30
 8003b12:	d86b      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x170>
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d060      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x15e>
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d867      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x170>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d05c      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x15e>
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d05a      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x15e>
 8003b24:	e062      	b.n	8003bec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6899      	ldr	r1, [r3, #8]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f000 f9b5 	bl	8003ea4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	609a      	str	r2, [r3, #8]
      break;
 8003b52:	e04f      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	6899      	ldr	r1, [r3, #8]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f000 f99e 	bl	8003ea4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b76:	609a      	str	r2, [r3, #8]
      break;
 8003b78:	e03c      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6859      	ldr	r1, [r3, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f000 f912 	bl	8003db0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2150      	movs	r1, #80	; 0x50
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f96b 	bl	8003e6e <TIM_ITRx_SetConfig>
      break;
 8003b98:	e02c      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6859      	ldr	r1, [r3, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f000 f931 	bl	8003e0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2160      	movs	r1, #96	; 0x60
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f95b 	bl	8003e6e <TIM_ITRx_SetConfig>
      break;
 8003bb8:	e01c      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6859      	ldr	r1, [r3, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f000 f8f2 	bl	8003db0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2140      	movs	r1, #64	; 0x40
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f94b 	bl	8003e6e <TIM_ITRx_SetConfig>
      break;
 8003bd8:	e00c      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4619      	mov	r1, r3
 8003be4:	4610      	mov	r0, r2
 8003be6:	f000 f942 	bl	8003e6e <TIM_ITRx_SetConfig>
      break;
 8003bea:	e003      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf0:	e000      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003bf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a42      	ldr	r2, [pc, #264]	; (8003d90 <TIM_Base_SetConfig+0x11c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c92:	d00f      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a3f      	ldr	r2, [pc, #252]	; (8003d94 <TIM_Base_SetConfig+0x120>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00b      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a3e      	ldr	r2, [pc, #248]	; (8003d98 <TIM_Base_SetConfig+0x124>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d007      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a3d      	ldr	r2, [pc, #244]	; (8003d9c <TIM_Base_SetConfig+0x128>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d003      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a3c      	ldr	r2, [pc, #240]	; (8003da0 <TIM_Base_SetConfig+0x12c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d108      	bne.n	8003cc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a31      	ldr	r2, [pc, #196]	; (8003d90 <TIM_Base_SetConfig+0x11c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d01f      	beq.n	8003d0e <TIM_Base_SetConfig+0x9a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd4:	d01b      	beq.n	8003d0e <TIM_Base_SetConfig+0x9a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a2e      	ldr	r2, [pc, #184]	; (8003d94 <TIM_Base_SetConfig+0x120>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d017      	beq.n	8003d0e <TIM_Base_SetConfig+0x9a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a2d      	ldr	r2, [pc, #180]	; (8003d98 <TIM_Base_SetConfig+0x124>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d013      	beq.n	8003d0e <TIM_Base_SetConfig+0x9a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a2c      	ldr	r2, [pc, #176]	; (8003d9c <TIM_Base_SetConfig+0x128>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00f      	beq.n	8003d0e <TIM_Base_SetConfig+0x9a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a2c      	ldr	r2, [pc, #176]	; (8003da4 <TIM_Base_SetConfig+0x130>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00b      	beq.n	8003d0e <TIM_Base_SetConfig+0x9a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a2b      	ldr	r2, [pc, #172]	; (8003da8 <TIM_Base_SetConfig+0x134>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d007      	beq.n	8003d0e <TIM_Base_SetConfig+0x9a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a2a      	ldr	r2, [pc, #168]	; (8003dac <TIM_Base_SetConfig+0x138>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d003      	beq.n	8003d0e <TIM_Base_SetConfig+0x9a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a25      	ldr	r2, [pc, #148]	; (8003da0 <TIM_Base_SetConfig+0x12c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d108      	bne.n	8003d20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <TIM_Base_SetConfig+0x11c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d013      	beq.n	8003d74 <TIM_Base_SetConfig+0x100>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a13      	ldr	r2, [pc, #76]	; (8003d9c <TIM_Base_SetConfig+0x128>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00f      	beq.n	8003d74 <TIM_Base_SetConfig+0x100>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a13      	ldr	r2, [pc, #76]	; (8003da4 <TIM_Base_SetConfig+0x130>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <TIM_Base_SetConfig+0x100>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <TIM_Base_SetConfig+0x134>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d007      	beq.n	8003d74 <TIM_Base_SetConfig+0x100>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a11      	ldr	r2, [pc, #68]	; (8003dac <TIM_Base_SetConfig+0x138>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <TIM_Base_SetConfig+0x100>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a0c      	ldr	r2, [pc, #48]	; (8003da0 <TIM_Base_SetConfig+0x12c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d103      	bne.n	8003d7c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	615a      	str	r2, [r3, #20]
}
 8003d82:	bf00      	nop
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40012c00 	.word	0x40012c00
 8003d94:	40000400 	.word	0x40000400
 8003d98:	40000800 	.word	0x40000800
 8003d9c:	40013400 	.word	0x40013400
 8003da0:	40015000 	.word	0x40015000
 8003da4:	40014000 	.word	0x40014000
 8003da8:	40014400 	.word	0x40014400
 8003dac:	40014800 	.word	0x40014800

08003db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f023 0201 	bic.w	r2, r3, #1
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f023 030a 	bic.w	r3, r3, #10
 8003dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	621a      	str	r2, [r3, #32]
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b087      	sub	sp, #28
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	f023 0210 	bic.w	r2, r3, #16
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	031b      	lsls	r3, r3, #12
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f043 0307 	orr.w	r3, r3, #7
 8003e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	609a      	str	r2, [r3, #8]
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	021a      	lsls	r2, r3, #8
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e06d      	b.n	8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a30      	ldr	r2, [pc, #192]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2f      	ldr	r2, [pc, #188]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a2d      	ldr	r2, [pc, #180]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d108      	bne.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1e      	ldr	r2, [pc, #120]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d01d      	beq.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d018      	beq.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1c      	ldr	r2, [pc, #112]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d013      	beq.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1a      	ldr	r2, [pc, #104]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00e      	beq.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d009      	beq.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a16      	ldr	r2, [pc, #88]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d004      	beq.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a11      	ldr	r2, [pc, #68]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d10c      	bne.n	8003fc6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	40012c00 	.word	0x40012c00
 8003fe8:	40013400 	.word	0x40013400
 8003fec:	40015000 	.word	0x40015000
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	40014000 	.word	0x40014000

08003ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <__libc_init_array>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	4d0d      	ldr	r5, [pc, #52]	; (8004070 <__libc_init_array+0x38>)
 800403c:	4c0d      	ldr	r4, [pc, #52]	; (8004074 <__libc_init_array+0x3c>)
 800403e:	1b64      	subs	r4, r4, r5
 8004040:	10a4      	asrs	r4, r4, #2
 8004042:	2600      	movs	r6, #0
 8004044:	42a6      	cmp	r6, r4
 8004046:	d109      	bne.n	800405c <__libc_init_array+0x24>
 8004048:	4d0b      	ldr	r5, [pc, #44]	; (8004078 <__libc_init_array+0x40>)
 800404a:	4c0c      	ldr	r4, [pc, #48]	; (800407c <__libc_init_array+0x44>)
 800404c:	f000 f82e 	bl	80040ac <_init>
 8004050:	1b64      	subs	r4, r4, r5
 8004052:	10a4      	asrs	r4, r4, #2
 8004054:	2600      	movs	r6, #0
 8004056:	42a6      	cmp	r6, r4
 8004058:	d105      	bne.n	8004066 <__libc_init_array+0x2e>
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004060:	4798      	blx	r3
 8004062:	3601      	adds	r6, #1
 8004064:	e7ee      	b.n	8004044 <__libc_init_array+0xc>
 8004066:	f855 3b04 	ldr.w	r3, [r5], #4
 800406a:	4798      	blx	r3
 800406c:	3601      	adds	r6, #1
 800406e:	e7f2      	b.n	8004056 <__libc_init_array+0x1e>
 8004070:	080040f4 	.word	0x080040f4
 8004074:	080040f4 	.word	0x080040f4
 8004078:	080040f4 	.word	0x080040f4
 800407c:	080040f8 	.word	0x080040f8

08004080 <memcpy>:
 8004080:	440a      	add	r2, r1
 8004082:	4291      	cmp	r1, r2
 8004084:	f100 33ff 	add.w	r3, r0, #4294967295
 8004088:	d100      	bne.n	800408c <memcpy+0xc>
 800408a:	4770      	bx	lr
 800408c:	b510      	push	{r4, lr}
 800408e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004096:	4291      	cmp	r1, r2
 8004098:	d1f9      	bne.n	800408e <memcpy+0xe>
 800409a:	bd10      	pop	{r4, pc}

0800409c <memset>:
 800409c:	4402      	add	r2, r0
 800409e:	4603      	mov	r3, r0
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d100      	bne.n	80040a6 <memset+0xa>
 80040a4:	4770      	bx	lr
 80040a6:	f803 1b01 	strb.w	r1, [r3], #1
 80040aa:	e7f9      	b.n	80040a0 <memset+0x4>

080040ac <_init>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	bf00      	nop
 80040b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b2:	bc08      	pop	{r3}
 80040b4:	469e      	mov	lr, r3
 80040b6:	4770      	bx	lr

080040b8 <_fini>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	bf00      	nop
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr
